<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classvpr_1_1_allocation" kind="class" language="C++" prot="public">
    <compoundname>vpr::Allocation</compoundname>
    <includes refid="_allocation_8hpp" local="no">Allocation.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classvpr_1_1_allocation_1aa1c4b67be8e0f44155dcd26ca93f6ec2" prot="public" static="no" mutable="no">
        <type>VkDeviceSize</type>
        <definition>VkDeviceSize vpr::Allocation::Size</definition>
        <argsstring></argsstring>
        <name>Size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/include/Allocation.hpp" line="51" column="1" bodyfile="alloc/include/Allocation.hpp" bodystart="51" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_buffer_1abe56ee5b43a1be73960fa5edae0dcb0b" compoundref="_buffer_deprecated_8cpp" startline="40" endline="53">vpr::Buffer::CreateBuffer</referencedby>
        <referencedby refid="classvpr_1_1_allocator_1a438bbd88a3f18c741f7de90f528300b1" compoundref="_allocator_8cpp" startline="62" endline="111">vpr::Allocator::FreeMemory</referencedby>
        <referencedby refid="classvpr_1_1_allocation_1ad5d461398f23e593c58f70a8cac78922" compoundref="_allocation_8cpp" startline="62" endline="67">Init</referencedby>
        <referencedby refid="classvpr_1_1_allocation_1ad680abfd77facfe5efcc222b154b595d" compoundref="_allocation_8cpp" startline="79" endline="88">InitPrivate</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1a4c04d59a27d4c3471bdf90eda1c8b662" compoundref="_buffer_deprecated_8cpp" startline="179" endline="183">vpr::Buffer::Map</referencedby>
        <referencedby refid="classvpr_1_1_allocation_1a16abc6fd06477544c4a34a012be850b5" compoundref="_allocation_8cpp" startline="45" endline="50">operator=</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1a07d786f45ff6d6712962da7910f6280c" compoundref="_buffer_deprecated_8cpp" startline="284" endline="287">vpr::Buffer::setMappedMemoryRange</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classvpr_1_1_allocation_1afa15c9bbc5bbf40d3416f7f5d85bb752" prot="public" static="no" mutable="no">
        <type>VkDeviceSize</type>
        <definition>VkDeviceSize vpr::Allocation::Alignment</definition>
        <argsstring></argsstring>
        <name>Alignment</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/include/Allocation.hpp" line="52" column="1" bodyfile="alloc/include/Allocation.hpp" bodystart="52" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_allocation_1ad5d461398f23e593c58f70a8cac78922" compoundref="_allocation_8cpp" startline="62" endline="67">Init</referencedby>
        <referencedby refid="classvpr_1_1_allocation_1a16abc6fd06477544c4a34a012be850b5" compoundref="_allocation_8cpp" startline="45" endline="50">operator=</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classvpr_1_1_allocation_1afd91b0a36dce93976913fb2c0859684a" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="structvpr_1_1_allocation_impl" kindref="compound">AllocationImpl</ref> &gt;</type>
        <definition>std::unique_ptr&lt;AllocationImpl&gt; vpr::Allocation::impl</definition>
        <argsstring></argsstring>
        <name>impl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/include/Allocation.hpp" line="54" column="1" bodyfile="alloc/include/Allocation.hpp" bodystart="54" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_allocation_1ad5d461398f23e593c58f70a8cac78922" compoundref="_allocation_8cpp" startline="62" endline="67">Init</referencedby>
        <referencedby refid="classvpr_1_1_allocation_1ad680abfd77facfe5efcc222b154b595d" compoundref="_allocation_8cpp" startline="79" endline="88">InitPrivate</referencedby>
        <referencedby refid="classvpr_1_1_allocation_1ad23615cd9f84e8e2354cf1f1e7e8f162" compoundref="_allocation_8cpp" startline="207" endline="220">IsPrivateAllocation</referencedby>
        <referencedby refid="classvpr_1_1_allocation_1a52b6b1170c2ecf99175ca809d5e89e75" compoundref="_allocation_8cpp" startline="90" endline="123">Map</referencedby>
        <referencedby refid="classvpr_1_1_allocation_1a1a223e41ca865271544ece71d18edce2" compoundref="_allocation_8cpp" startline="141" endline="162">Memory</referencedby>
        <referencedby refid="classvpr_1_1_allocation_1ab07876bad87d1c3e085ab02c1c608179" compoundref="_allocation_8cpp" startline="184" endline="205">MemoryTypeIdx</referencedby>
        <referencedby refid="classvpr_1_1_allocation_1acb642a53c185ac6530ed60959b0e4397" compoundref="_allocation_8cpp" startline="164" endline="182">Offset</referencedby>
        <referencedby refid="classvpr_1_1_allocation_1a16abc6fd06477544c4a34a012be850b5" compoundref="_allocation_8cpp" startline="45" endline="50">operator=</referencedby>
        <referencedby refid="classvpr_1_1_allocation_1a50c9f0b8277412ee7478939ade2025b8" compoundref="_allocation_8cpp" startline="125" endline="139">Unmap</referencedby>
        <referencedby refid="classvpr_1_1_allocation_1aaa942129013583bd9c1858217e5d5126" compoundref="_allocation_8cpp" startline="69" endline="77">Update</referencedby>
        <referencedby refid="classvpr_1_1_allocation_1afbf44280b9503d91a56d91479619e6cb" compoundref="_allocation_8cpp" startline="39" endline="41">~Allocation</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classvpr_1_1_allocation_1ac55862fc872fc1e9276210eddec744ca" prot="private" static="no" mutable="no">
        <type>void *</type>
        <definition>void* vpr::Allocation::userData</definition>
        <argsstring></argsstring>
        <name>userData</name>
        <initializer>{ nullptr }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/include/Allocation.hpp" line="55" column="1" bodyfile="alloc/include/Allocation.hpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classvpr_1_1_allocation_1af49216f0d72f038145500587f84d30dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::Allocation::Allocation</definition>
        <argsstring>()</argsstring>
        <name>Allocation</name>
        <briefdescription>
<para>If this is an allocation bound to a smaller region of a larger object, it is a block allocation. </para>        </briefdescription>
        <detaileddescription>
<para>Otherwise, it has it&apos;s own VkDeviceMemory object and is a &quot;PRIVATE_ALLOCATION&quot; type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/include/Allocation.hpp" line="22" column="1" bodyfile="alloc/src/Allocation.cpp" bodystart="37" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocation_1afbf44280b9503d91a56d91479619e6cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::Allocation::~Allocation</definition>
        <argsstring>()</argsstring>
        <name>~Allocation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/include/Allocation.hpp" line="23" column="1" bodyfile="alloc/src/Allocation.cpp" bodystart="39" bodyend="41"/>
        <references refid="classvpr_1_1_allocation_1afd91b0a36dce93976913fb2c0859684a" compoundref="_allocation_8hpp" startline="54">impl</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocation_1a4ffd3690b3172c28d0e080739bd83e31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::Allocation::Allocation</definition>
        <argsstring>(const Allocation &amp;)</argsstring>
        <name>Allocation</name>
        <param>
          <type>const <ref refid="classvpr_1_1_allocation" kindref="compound">Allocation</ref> &amp;</type>
          <defname>other</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/include/Allocation.hpp" line="24" column="1" bodyfile="alloc/src/Allocation.cpp" bodystart="43" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocation_1a16abc6fd06477544c4a34a012be850b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classvpr_1_1_allocation" kindref="compound">Allocation</ref> &amp;</type>
        <definition>Allocation &amp; vpr::Allocation::operator=</definition>
        <argsstring>(const Allocation &amp;)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classvpr_1_1_allocation" kindref="compound">Allocation</ref> &amp;</type>
          <defname>other</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/include/Allocation.hpp" line="25" column="1" bodyfile="alloc/src/Allocation.cpp" bodystart="45" bodyend="50"/>
        <references refid="classvpr_1_1_allocation_1afa15c9bbc5bbf40d3416f7f5d85bb752" compoundref="_allocation_8hpp" startline="52">Alignment</references>
        <references refid="classvpr_1_1_allocation_1afd91b0a36dce93976913fb2c0859684a" compoundref="_allocation_8hpp" startline="54">impl</references>
        <references refid="classvpr_1_1_allocation_1aa1c4b67be8e0f44155dcd26ca93f6ec2" compoundref="_allocation_8hpp" startline="51">Size</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocation_1a4055730036d8cb2032234def146766ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::Allocation::Allocation</definition>
        <argsstring>(Allocation &amp;&amp;other) noexcept</argsstring>
        <name>Allocation</name>
        <param>
          <type><ref refid="classvpr_1_1_allocation" kindref="compound">Allocation</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/include/Allocation.hpp" line="26" column="1" bodyfile="alloc/src/Allocation.cpp" bodystart="52" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocation_1a75408587e6fce6988e0cc1b0dcb58af1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classvpr_1_1_allocation" kindref="compound">Allocation</ref> &amp;</type>
        <definition>Allocation &amp; vpr::Allocation::operator=</definition>
        <argsstring>(Allocation &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classvpr_1_1_allocation" kindref="compound">Allocation</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/include/Allocation.hpp" line="27" column="1" bodyfile="alloc/src/Allocation.cpp" bodystart="55" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocation_1ad5d461398f23e593c58f70a8cac78922" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Allocation::Init</definition>
        <argsstring>(MemoryBlock *parent_block, const VkDeviceSize &amp;offset, const VkDeviceSize &amp;alignment, const VkDeviceSize &amp;alloc_size, void *user_data=nullptr)</argsstring>
        <name>Init</name>
        <param>
          <type><ref refid="classvpr_1_1_memory_block" kindref="compound">MemoryBlock</ref> *</type>
          <declname>parent_block</declname>
        </param>
        <param>
          <type>const VkDeviceSize &amp;</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>const VkDeviceSize &amp;</type>
          <declname>alignment</declname>
        </param>
        <param>
          <type>const VkDeviceSize &amp;</type>
          <declname>alloc_size</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>user_data can be a pointer to anything, but the lifetime of this pointer has to be managed by the user. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/include/Allocation.hpp" line="30" column="1" bodyfile="alloc/src/Allocation.cpp" bodystart="62" bodyend="67"/>
        <references refid="classvpr_1_1_allocation_1afa15c9bbc5bbf40d3416f7f5d85bb752" compoundref="_allocation_8hpp" startline="52">Alignment</references>
        <references refid="classvpr_1_1_allocation_1afd91b0a36dce93976913fb2c0859684a" compoundref="_allocation_8hpp" startline="54">impl</references>
        <references refid="classvpr_1_1_allocation_1aa1c4b67be8e0f44155dcd26ca93f6ec2" compoundref="_allocation_8hpp" startline="51">Size</references>
        <referencedby refid="structvpr_1_1_allocator_impl_1a25d6e4d4fe1d7c4adf83e95915a0a810" compoundref="_allocator_impl_8cpp" startline="129" endline="266">vpr::AllocatorImpl::allocateMemoryType</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocation_1aaa942129013583bd9c1858217e5d5126" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Allocation::Update</definition>
        <argsstring>(MemoryBlock *new_parent_block, const VkDeviceSize &amp;new_offset)</argsstring>
        <name>Update</name>
        <param>
          <type><ref refid="classvpr_1_1_memory_block" kindref="compound">MemoryBlock</ref> *</type>
          <declname>new_parent_block</declname>
        </param>
        <param>
          <type>const VkDeviceSize &amp;</type>
          <declname>new_offset</declname>
        </param>
        <briefdescription>
<para>Changes parent memory block, and specifies a new offset for the memory. </para>        </briefdescription>
        <detaileddescription>
<para>Requires re-updating internal data, and is usually part of a defrag routine. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/include/Allocation.hpp" line="32" column="1" bodyfile="alloc/src/Allocation.cpp" bodystart="69" bodyend="77"/>
        <references refid="classvpr_1_1_allocation_1afd91b0a36dce93976913fb2c0859684a" compoundref="_allocation_8hpp" startline="54">impl</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocation_1ad680abfd77facfe5efcc222b154b595d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Allocation::InitPrivate</definition>
        <argsstring>(const uint32_t &amp;type_idx, VkDeviceMemory &amp;dvc_memory, bool persistently_mapped, void *mapped_data, const VkDeviceSize &amp;data_size, void *user_data=nullptr)</argsstring>
        <name>InitPrivate</name>
        <param>
          <type>const uint32_t &amp;</type>
          <declname>type_idx</declname>
        </param>
        <param>
          <type>VkDeviceMemory &amp;</type>
          <declname>dvc_memory</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>persistently_mapped</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>mapped_data</declname>
        </param>
        <param>
          <type>const VkDeviceSize &amp;</type>
          <declname>data_size</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>persistently_mapped</parametername>
</parameternamelist>
<parameterdescription>
<para>If set, this object will be considered to be always mapped. This will remove any worries about mapping/unmapping the object. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/include/Allocation.hpp" line="34" column="1" bodyfile="alloc/src/Allocation.cpp" bodystart="79" bodyend="88"/>
        <references refid="structvpr_1_1_allocation_impl_1_1private_allocation_1a694df8b0667613a5cc03732ee459c178" compoundref="_allocation_8cpp" startline="25">vpr::AllocationImpl::privateAllocation::DvcMemory</references>
        <references refid="classvpr_1_1_allocation_1afd91b0a36dce93976913fb2c0859684a" compoundref="_allocation_8hpp" startline="54">impl</references>
        <references refid="structvpr_1_1_allocation_impl_1_1private_allocation_1a3be54a020f5ee343078e58d4324702ca" compoundref="_allocation_8cpp" startline="27">vpr::AllocationImpl::privateAllocation::MappedData</references>
        <references refid="structvpr_1_1_allocation_impl_1_1private_allocation_1a5fe23cb3dca2ba7bb90f75146d2e693e" compoundref="_allocation_8cpp" startline="24">vpr::AllocationImpl::privateAllocation::MemoryTypeIdx</references>
        <references refid="structvpr_1_1_allocation_impl_1_1private_allocation_1ae3446d4e983b3a150713140d726dd328" compoundref="_allocation_8cpp" startline="26">vpr::AllocationImpl::privateAllocation::PersistentlyMapped</references>
        <references refid="classvpr_1_1_allocation_1aa1c4b67be8e0f44155dcd26ca93f6ec2" compoundref="_allocation_8hpp" startline="51">Size</references>
        <referencedby refid="structvpr_1_1_allocator_impl_1a2ec18969e688b4cb472a16535482208d" compoundref="_allocator_impl_8cpp" startline="268" endline="289">vpr::AllocatorImpl::allocatePrivateMemory</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocation_1a52b6b1170c2ecf99175ca809d5e89e75" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Allocation::Map</definition>
        <argsstring>(const VkDeviceSize &amp;size_to_map, const VkDeviceSize &amp;offset_to_map_at, void **address_to_map_to) const</argsstring>
        <name>Map</name>
        <param>
          <type>const VkDeviceSize &amp;</type>
          <declname>size_to_map</declname>
        </param>
        <param>
          <type>const VkDeviceSize &amp;</type>
          <declname>offset_to_map_at</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>address_to_map_to</declname>
        </param>
        <briefdescription>
<para>Maps the given size and offset of this allocation, and writes the mapped address to the specified pointer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/include/Allocation.hpp" line="36" column="1" bodyfile="alloc/src/Allocation.cpp" bodystart="90" bodyend="123"/>
        <references refid="classvpr_1_1_allocation_1afd91b0a36dce93976913fb2c0859684a" compoundref="_allocation_8hpp" startline="54">impl</references>
        <references refid="namespacevpr_1a85a5d8c5ba83b162eda5df835a7e6e4d" compoundref="vpr__stdafx_8h" startline="31">vpr::VERBOSE_LOGGING</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocation_1a50c9f0b8277412ee7478939ade2025b8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Allocation::Unmap</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Unmap</name>
        <briefdescription>
<para>Unmaps the allocation - it is vital to call this when finished, as it may otherwise cause issues if left mapped. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/include/Allocation.hpp" line="38" column="1" bodyfile="alloc/src/Allocation.cpp" bodystart="125" bodyend="139"/>
        <references refid="classvpr_1_1_allocation_1afd91b0a36dce93976913fb2c0859684a" compoundref="_allocation_8hpp" startline="54">impl</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocation_1a1a223e41ca865271544ece71d18edce2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const VkDeviceMemory &amp;</type>
        <definition>const VkDeviceMemory &amp; vpr::Allocation::Memory</definition>
        <argsstring>() const</argsstring>
        <name>Memory</name>
        <briefdescription>
<para>This handle to the underlying VkDeviceMemory object will be a shared handle, when this allocation is non-private. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/include/Allocation.hpp" line="41" column="1" bodyfile="alloc/src/Allocation.cpp" bodystart="141" bodyend="162"/>
        <references refid="classvpr_1_1_allocation_1afd91b0a36dce93976913fb2c0859684a" compoundref="_allocation_8hpp" startline="54">impl</references>
        <referencedby refid="classvpr_1_1_allocator_1ae8c982057f90fad764d25d8b081e5603" compoundref="_allocator_8cpp" startline="123" endline="131">vpr::Allocator::AllocateForBuffer</referencedby>
        <referencedby refid="classvpr_1_1_allocator_1a74d845e760e100129d83bc40cd4fb12e" compoundref="_allocator_8cpp" startline="113" endline="121">vpr::Allocator::AllocateForImage</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1a843cf452ecc4aed63fef2915d40ab9c4" compoundref="_buffer_deprecated_8cpp" startline="99" endline="118">vpr::Buffer::CopyTo</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1a4c04d59a27d4c3471bdf90eda1c8b662" compoundref="_buffer_deprecated_8cpp" startline="179" endline="183">vpr::Buffer::Map</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1a07d786f45ff6d6712962da7910f6280c" compoundref="_buffer_deprecated_8cpp" startline="284" endline="287">vpr::Buffer::setMappedMemoryRange</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1a780ba4c43b7f1a8ec88a5990a76a3cd0" compoundref="_buffer_deprecated_8cpp" startline="185" endline="187">vpr::Buffer::Unmap</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocation_1acb642a53c185ac6530ed60959b0e4397" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>VkDeviceSize</type>
        <definition>VkDeviceSize vpr::Allocation::Offset</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Offset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/include/Allocation.hpp" line="42" column="1" bodyfile="alloc/src/Allocation.cpp" bodystart="164" bodyend="182"/>
        <references refid="classvpr_1_1_allocation_1afd91b0a36dce93976913fb2c0859684a" compoundref="_allocation_8hpp" startline="54">impl</references>
        <referencedby refid="classvpr_1_1_allocator_1ae8c982057f90fad764d25d8b081e5603" compoundref="_allocator_8cpp" startline="123" endline="131">vpr::Allocator::AllocateForBuffer</referencedby>
        <referencedby refid="classvpr_1_1_allocator_1a74d845e760e100129d83bc40cd4fb12e" compoundref="_allocator_8cpp" startline="113" endline="121">vpr::Allocator::AllocateForImage</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1a843cf452ecc4aed63fef2915d40ab9c4" compoundref="_buffer_deprecated_8cpp" startline="99" endline="118">vpr::Buffer::CopyTo</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1a51dacf22b4cbfcf0224c467e1f7ba7ac" compoundref="_buffer_deprecated_8cpp" startline="160" endline="168">vpr::Buffer::CreateMemoryBarrier</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1a88cde43def4e7d21b8a782554497b064" compoundref="_memory_block_8cpp" startline="405" endline="420">vpr::MemoryBlock::Free</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1abff18a0397a4aca3cbe99d0206c82981" compoundref="_memory_block_8cpp" startline="422" endline="426">vpr::MemoryBlock::Map</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1a4c04d59a27d4c3471bdf90eda1c8b662" compoundref="_buffer_deprecated_8cpp" startline="179" endline="183">vpr::Buffer::Map</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1a07d786f45ff6d6712962da7910f6280c" compoundref="_buffer_deprecated_8cpp" startline="284" endline="287">vpr::Buffer::setMappedMemoryRange</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocation_1ab07876bad87d1c3e085ab02c1c608179" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t vpr::Allocation::MemoryTypeIdx</definition>
        <argsstring>() const</argsstring>
        <name>MemoryTypeIdx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/include/Allocation.hpp" line="43" column="1" bodyfile="alloc/src/Allocation.cpp" bodystart="184" bodyend="205"/>
        <references refid="classvpr_1_1_allocation_1afd91b0a36dce93976913fb2c0859684a" compoundref="_allocation_8hpp" startline="54">impl</references>
        <referencedby refid="classvpr_1_1_allocator_1a438bbd88a3f18c741f7de90f528300b1" compoundref="_allocator_8cpp" startline="62" endline="111">vpr::Allocator::FreeMemory</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocation_1aba0b6e2e6c71e801603e6b81c2218f89" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Allocation::SetUserData</definition>
        <argsstring>(void *data) const</argsstring>
        <name>SetUserData</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/include/Allocation.hpp" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocation_1a4991454fa12026f1e25fc56c6791be2d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* vpr::Allocation::GetUserData</definition>
        <argsstring>() const</argsstring>
        <name>GetUserData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/include/Allocation.hpp" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocation_1ad23615cd9f84e8e2354cf1f1e7e8f162" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vpr::Allocation::IsPrivateAllocation</definition>
        <argsstring>() const noexcept</argsstring>
        <name>IsPrivateAllocation</name>
        <briefdescription>
<para>Returns true if this allocation is &quot;private&quot; - i.e, it is not part of a larger VkDeviceMemory block and instead received it&apos;s own unique VkDeviceMemory instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/include/Allocation.hpp" line="47" column="1" bodyfile="alloc/src/Allocation.cpp" bodystart="207" bodyend="220"/>
        <references refid="classvpr_1_1_allocation_1afd91b0a36dce93976913fb2c0859684a" compoundref="_allocation_8hpp" startline="54">impl</references>
        <referencedby refid="classvpr_1_1_allocator_1a438bbd88a3f18c741f7de90f528300b1" compoundref="_allocator_8cpp" startline="62" endline="111">vpr::Allocator::FreeMemory</referencedby>
        <referencedby refid="structvpr_1_1_allocator_impl_1a4d132f78ac784684f0384127ff5c8624" compoundref="_allocator_impl_8cpp" startline="291" endline="310">vpr::AllocatorImpl::freePrivateMemory</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocation_1add3be5fd7fee67744d380e74b0c5bfb3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vpr::Allocation::operator==</definition>
        <argsstring>(const Allocation &amp;other) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classvpr_1_1_allocation" kindref="compound">Allocation</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/include/Allocation.hpp" line="49" column="1" bodyfile="alloc/src/Allocation.cpp" bodystart="222" bodyend="226"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><linebreak/>
 <ref refid="classvpr_1_1_allocation" kindref="compound">Allocation</ref> class represents a singular allocation: can be a private allocation (i.e, only user of attached DeviceMemory) or a block allocation (bound to sub-region of device memory) </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>vpr::Allocation</label>
        <link refid="classvpr_1_1_allocation"/>
        <childnode refid="2" relation="usage">
          <edgelabel>impl</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>vpr::AllocationImpl</label>
        <link refid="structvpr_1_1_allocation_impl"/>
      </node>
      <node id="2">
        <label>std::unique_ptr&lt; vpr::AllocationImpl &gt;</label>
        <childnode refid="3" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="alloc/include/Allocation.hpp" line="17" column="1" bodyfile="alloc/include/Allocation.hpp" bodystart="17" bodyend="56"/>
    <listofallmembers>
      <member refid="classvpr_1_1_allocation_1afa15c9bbc5bbf40d3416f7f5d85bb752" prot="public" virt="non-virtual"><scope>vpr::Allocation</scope><name>Alignment</name></member>
      <member refid="classvpr_1_1_allocation_1af49216f0d72f038145500587f84d30dd" prot="public" virt="non-virtual"><scope>vpr::Allocation</scope><name>Allocation</name></member>
      <member refid="classvpr_1_1_allocation_1a4ffd3690b3172c28d0e080739bd83e31" prot="public" virt="non-virtual"><scope>vpr::Allocation</scope><name>Allocation</name></member>
      <member refid="classvpr_1_1_allocation_1a4055730036d8cb2032234def146766ba" prot="public" virt="non-virtual"><scope>vpr::Allocation</scope><name>Allocation</name></member>
      <member refid="classvpr_1_1_allocation_1a4991454fa12026f1e25fc56c6791be2d" prot="public" virt="non-virtual"><scope>vpr::Allocation</scope><name>GetUserData</name></member>
      <member refid="classvpr_1_1_allocation_1afd91b0a36dce93976913fb2c0859684a" prot="private" virt="non-virtual"><scope>vpr::Allocation</scope><name>impl</name></member>
      <member refid="classvpr_1_1_allocation_1ad5d461398f23e593c58f70a8cac78922" prot="public" virt="non-virtual"><scope>vpr::Allocation</scope><name>Init</name></member>
      <member refid="classvpr_1_1_allocation_1ad680abfd77facfe5efcc222b154b595d" prot="public" virt="non-virtual"><scope>vpr::Allocation</scope><name>InitPrivate</name></member>
      <member refid="classvpr_1_1_allocation_1ad23615cd9f84e8e2354cf1f1e7e8f162" prot="public" virt="non-virtual"><scope>vpr::Allocation</scope><name>IsPrivateAllocation</name></member>
      <member refid="classvpr_1_1_allocation_1a52b6b1170c2ecf99175ca809d5e89e75" prot="public" virt="non-virtual"><scope>vpr::Allocation</scope><name>Map</name></member>
      <member refid="classvpr_1_1_allocation_1a1a223e41ca865271544ece71d18edce2" prot="public" virt="non-virtual"><scope>vpr::Allocation</scope><name>Memory</name></member>
      <member refid="classvpr_1_1_allocation_1ab07876bad87d1c3e085ab02c1c608179" prot="public" virt="non-virtual"><scope>vpr::Allocation</scope><name>MemoryTypeIdx</name></member>
      <member refid="classvpr_1_1_allocation_1acb642a53c185ac6530ed60959b0e4397" prot="public" virt="non-virtual"><scope>vpr::Allocation</scope><name>Offset</name></member>
      <member refid="classvpr_1_1_allocation_1a16abc6fd06477544c4a34a012be850b5" prot="public" virt="non-virtual"><scope>vpr::Allocation</scope><name>operator=</name></member>
      <member refid="classvpr_1_1_allocation_1a75408587e6fce6988e0cc1b0dcb58af1" prot="public" virt="non-virtual"><scope>vpr::Allocation</scope><name>operator=</name></member>
      <member refid="classvpr_1_1_allocation_1add3be5fd7fee67744d380e74b0c5bfb3" prot="public" virt="non-virtual"><scope>vpr::Allocation</scope><name>operator==</name></member>
      <member refid="classvpr_1_1_allocation_1aba0b6e2e6c71e801603e6b81c2218f89" prot="public" virt="non-virtual"><scope>vpr::Allocation</scope><name>SetUserData</name></member>
      <member refid="classvpr_1_1_allocation_1aa1c4b67be8e0f44155dcd26ca93f6ec2" prot="public" virt="non-virtual"><scope>vpr::Allocation</scope><name>Size</name></member>
      <member refid="classvpr_1_1_allocation_1a50c9f0b8277412ee7478939ade2025b8" prot="public" virt="non-virtual"><scope>vpr::Allocation</scope><name>Unmap</name></member>
      <member refid="classvpr_1_1_allocation_1aaa942129013583bd9c1858217e5d5126" prot="public" virt="non-virtual"><scope>vpr::Allocation</scope><name>Update</name></member>
      <member refid="classvpr_1_1_allocation_1ac55862fc872fc1e9276210eddec744ca" prot="private" virt="non-virtual"><scope>vpr::Allocation</scope><name>userData</name></member>
      <member refid="classvpr_1_1_allocation_1afbf44280b9503d91a56d91479619e6cb" prot="public" virt="non-virtual"><scope>vpr::Allocation</scope><name>~Allocation</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
