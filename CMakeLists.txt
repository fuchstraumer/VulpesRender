INCLUDE(ExternalProject)
CMAKE_MINIMUM_REQUIRED(VERSION 3.5)
PROJECT(VulpesRender)

OPTION(BUILD_DYNAMIC_LIBRARY "Build VPR as a dynamic library" OFF)
IF(BUILD_DYNAMIC_LIBRARY)
    SET(BUILD_SHARED_LIBS ON)
ENDIF()

IF(APPLE)
  FIND_LIBRARY(MoltenVK NAMES "libMoltenVK.dylib" HINTS "${CMAKE_CURRENT_SOURCE_DIR}/ext/MoltenVK/macOS")
  SET(APPLE_VK_INCL "-DVULKAN_INCLUDE_DIR=${CMAKE_CURRENT_SOURCE_DIR}/ext/MoltenVk/include/vulkan")
  SET(APPLE_VK_LIB "-DVULKAN_LIBRARY=${MoltenVK}")
ENDIF()

ADD_SUBDIRECTORY(glfw)

FILE(GLOB UTIL "${CMAKE_CURRENT_SOURCE_DIR}/src/util/*.cc" "${CMAKE_CURRENT_SOURCE_DIR}/src/util/*.cpp" 
    "${CMAKE_CURRENT_SOURCE_DIR}/include/util/*.h" "${CMAKE_CURRENT_SOURCE_DIR}/include/util/*.hpp")
FILE(GLOB COMMON "${CMAKE_CURRENT_SOURCE_DIR}/src/common/*.h" "${CMAKE_CURRENT_SOURCE_DIR}/src/common/*.hpp")
FILE(GLOB COMMAND_FILES "${CMAKE_CURRENT_SOURCE_DIR}/src/command/*.cpp" "${CMAKE_CURRENT_SOURCE_DIR}/include/command/*.hpp")
FILE(GLOB CORE "${CMAKE_CURRENT_SOURCE_DIR}/src/core/*.cpp" "${CMAKE_CURRENT_SOURCE_DIR}/include/core/*.hpp")
FILE(GLOB RESOURCES "${CMAKE_CURRENT_SOURCE_DIR}/src/resource/*.cpp" "${CMAKE_CURRENT_SOURCE_DIR}/include/resource/*.hpp" "${CMAKE_CURRENT_SOURCE_DIR}/include/resource/*.inl")
FILE(GLOB RENDER "${CMAKE_CURRENT_SOURCE_DIR}/src/render/*.cpp" "${CMAKE_CURRENT_SOURCE_DIR}/include/render/*.hpp" "${CMAKE_CURRENT_SOURCE_DIR}/include/render/*.inl")
FILE(GLOB ALLOC "${CMAKE_CURRENT_SOURCE_DIR}/src/alloc/*.cpp" "${CMAKE_CURRENT_SOURCE_DIR}/include/alloc/*.hpp")

SOURCE_GROUP("alloc" FILES ${ALLOC})
SOURCE_GROUP("util" FILES ${UTIL})
SOURCE_GROUP("common" FILES ${COMMON})
SOURCE_GROUP("command" FILES ${COMMAND_FILES})
SOURCE_GROUP("core" FILES ${CORE})
SOURCE_GROUP("resource" FILES ${RESOURCES})
SOURCE_GROUP("render" FILES ${RENDER})
SOURCE_GROUP("shaders" FILES ${SHADERS})
SOURCE_GROUP("imgui" FILES ${IMGUI})

IF(BUILD_DYNAMIC_LIBRARY) 
ADD_LIBRARY(VulpesRender SHARED "${CMAKE_CURRENT_SOURCE_DIR}/include/vpr_stdafx.h"
    "${CMAKE_CURRENT_SOURCE_DIR}/include/ForwardDecl.hpp" ${UTIL} ${COMMON} ${COMMAND_FILES} ${IMGUI}
    ${CORE} ${RESOURCES} ${RENDER} ${SHADERS} ${ALLOC})
ELSE()
ADD_LIBRARY(VulpesRender STATIC "${CMAKE_CURRENT_SOURCE_DIR}/include/vpr_stdafx.h"
    "${CMAKE_CURRENT_SOURCE_DIR}/include/ForwardDecl.hpp" ${UTIL} ${COMMON} ${COMMAND_FILES} ${IMGUI}
    ${CORE} ${RESOURCES} ${RENDER} ${SHADERS} ${ALLOC})
ENDIF()

#Enable minimal rebuild, and manually set c++17 standard since it doesn't get set right otherwise.
IF(MSVC)
    TARGET_COMPILE_OPTIONS(VulpesRender PUBLIC "/std:c++17" "/Gm")
ENDIF()

IF (BUILD_DYNAMIC_LIBRARY) 
  TARGET_COMPILE_DEFINITIONS(VulpesRender PRIVATE -DVPR_BUILD_DLL)
ENDIF()

IF(APPLE)
  TARGET_LINK_LIBRARIES(VulpesRender INTERFACE glfw "${MoltenVK}")
ELSEIF(UNIX)
  TARGET_LINK_LIBRARIES(VulpesRender INTERFACE glfw "$ENV{VULKAN_SDK}/lib/libvulkan.so" "dl" "pthread" "X11" "Xi" "Xrandr") 
  TARGET_LINK_LIBRARIES(VulpesRender INTERFACE "-lstdc++fs")
ELSEIF(WIN32)
    IF(BUILD_DYNAMIC_LIBRARY)
        TARGET_LINK_LIBRARIES(VulpesRender PUBLIC "${PROJECT_SOURCE_DIR}/ext/lib/glfw3dll.lib")
        TARGET_LINK_LIBRARIES(VulpesRender PUBLIC "${PROJECT_SOURCE_DIR}/ext/lib/vulkan-1.lib")
    ELSE()
        TARGET_LINK_LIBRARIES(VulpesRender INTERFACE "${CMAKE_INSTALL_PREFIX}/lib/glfw3.lib")
        TARGET_LINK_LIBRARIES(VulpesRender INTERFACE "$ENV{VULKAN_SDK}/Lib/vulkan-1.lib")
    ENDIF()
ENDIF()

TARGET_INCLUDE_DIRECTORIES(VulpesRender PUBLIC 
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
    $<INSTALL_INTERFACE:VulpesRender>)
TARGET_INCLUDE_DIRECTORIES(VulpesRender PUBLIC 
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/easyloggingpp>
    $<INSTALL_INTERFACE:easyloggingpp>)
TARGET_INCLUDE_DIRECTORIES(VulpesRender PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/glfw/include")
TARGET_INCLUDE_DIRECTORIES(VulpesRender PUBLIC
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/imgui>
    $<INSTALL_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/imgui>)

IF(APPLE)
  TARGET_INCLUDE_DIRECTORIES(VulpesRender PUBLIC 
      $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/ext/MoltenVK/include>)
ELSE()
  TARGET_INCLUDE_DIRECTORIES(VulpesRender PUBLIC 
      $<BUILD_INTERFACE:$ENV{VULKAN_SDK}/include>
      $<INSTALL_INTERFACE:$ENV{VULKAN_SDK}/include>)
ENDIF()

# Easier to gather headers this way, so we can more cleanly set where they end up.
INSTALL(DIRECTORY "include/" DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/VulpesRender/")
INSTALL(DIRECTORY "easyloggingpp/" DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/easyloggingpp/")
INSTALL(TARGETS VulpesRender LIBRARY DESTINATION "lib" ARCHIVE DESTINATION "lib")
INSTALL(FILES "include/vpr_stdafx.h" "include/ForwardDecl.hpp" 
        DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/VulpesRender")

