<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classvpr_1_1_instance" kind="class" language="C++" prot="public">
    <compoundname>vpr::Instance</compoundname>
    <includes refid="_instance_8hpp" local="no">Instance.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classvpr_1_1_instance_1ac131eec23cc4eba7cd68bc67de9d8c09" prot="public" static="no" strong="yes">
        <type>uint32_t</type>
        <name>instance_layers</name>
        <enumvalue id="classvpr_1_1_instance_1ac131eec23cc4eba7cd68bc67de9d8c09ab9f5c797ebbf55adccdd8539a65a0241" prot="public">
          <name>Disabled</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classvpr_1_1_instance_1ac131eec23cc4eba7cd68bc67de9d8c09a30fc6bbba82125243ecf4ddb27fee645" prot="public">
          <name>Minimal</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classvpr_1_1_instance_1ac131eec23cc4eba7cd68bc67de9d8c09abbd47109890259c0127154db1af26c75" prot="public">
          <name>Full</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Currently both minimal and full layers are the same: need some time to better decide what the &quot;minimal&quot; layer setup could look like. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/Instance.hpp" line="46" column="1" bodyfile="core/include/Instance.hpp" bodystart="46" bodyend="50"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classvpr_1_1_instance_1a0992653af0dbc106f0bec63cdc5925cb" prot="private" static="no" mutable="no">
        <type><ref refid="structvpr_1_1_instance_extension_handler" kindref="compound">InstanceExtensionHandler</ref> *</type>
        <definition>InstanceExtensionHandler* vpr::Instance::extensionHandler</definition>
        <argsstring></argsstring>
        <name>extensionHandler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/Instance.hpp" line="68" column="1" bodyfile="core/include/Instance.hpp" bodystart="68" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_instance_1a6b61b801c27856790ab59513f66ce11c" compoundref="_instance_8cpp" startline="91" endline="102">GetEnabledExtensions</referencedby>
        <referencedby refid="classvpr_1_1_instance_1a8e32fee4f0a877997ee6e75ea3d3c3a1" compoundref="_instance_8cpp" startline="119" endline="139">prepareValidation</referencedby>
        <referencedby refid="classvpr_1_1_instance_1a34466d6fcc286ef1281b7bdb091ea754" compoundref="_instance_8cpp" startline="74" endline="76">ValidationEnabled</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classvpr_1_1_instance_1aa5c56c4b911020e65be6f77c51c3f2eb" prot="private" static="no" mutable="no">
        <type>VkInstance</type>
        <definition>VkInstance vpr::Instance::handle</definition>
        <argsstring></argsstring>
        <name>handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/Instance.hpp" line="69" column="1" bodyfile="core/include/Instance.hpp" bodystart="69" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_instance_1a6082a006a3f2ab9688d4a14c123cb04a" compoundref="_instance_8cpp" startline="104" endline="106">vkHandle</referencedby>
        <referencedby refid="classvpr_1_1_instance_1a2d0e68a86ecbbceb024dee48885c28d1" compoundref="_instance_8cpp" startline="70" endline="72">~Instance</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classvpr_1_1_instance_1ace35d71f74954c4fadbd42e249935501" prot="private" static="no" mutable="no">
        <type>VkInstanceCreateInfo</type>
        <definition>VkInstanceCreateInfo vpr::Instance::createInfo</definition>
        <argsstring></argsstring>
        <name>createInfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/Instance.hpp" line="70" column="1" bodyfile="core/include/Instance.hpp" bodystart="70" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_instance_1a8e32fee4f0a877997ee6e75ea3d3c3a1" compoundref="_instance_8cpp" startline="119" endline="139">prepareValidation</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classvpr_1_1_instance_1ad84c0d2b814c5a7e578df1c33c228cf2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::Instance::Instance</definition>
        <argsstring>(const Instance &amp;)=delete</argsstring>
        <name>Instance</name>
        <param>
          <type>const <ref refid="classvpr_1_1_instance" kindref="compound">Instance</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/Instance.hpp" line="39" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_instance_1aca395bdc50c5191872bcdffcd223ccb9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classvpr_1_1_instance" kindref="compound">Instance</ref> &amp;</type>
        <definition>Instance&amp; vpr::Instance::operator=</definition>
        <argsstring>(const Instance &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classvpr_1_1_instance" kindref="compound">Instance</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/Instance.hpp" line="40" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_instance_1a8e32fee4f0a877997ee6e75ea3d3c3a1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Instance::prepareValidation</definition>
        <argsstring>(const char *const *layers, const uint32_t layer_count)</argsstring>
        <name>prepareValidation</name>
        <param>
          <type>const char *const *</type>
          <declname>layers</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>layer_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/Instance.hpp" line="64" column="1" bodyfile="core/src/Instance.cpp" bodystart="119" bodyend="139"/>
        <references refid="classvpr_1_1_instance_1ad6d5590582b6b4487544954c9d10be5f" compoundref="_instance_8cpp" startline="141" endline="163">checkValidationSupport</references>
        <references refid="classvpr_1_1_instance_1ace35d71f74954c4fadbd42e249935501" compoundref="_instance_8hpp" startline="70">createInfo</references>
        <references refid="classvpr_1_1_instance_1ac131eec23cc4eba7cd68bc67de9d8c09ab9f5c797ebbf55adccdd8539a65a0241">Disabled</references>
        <references refid="classvpr_1_1_instance_1a0992653af0dbc106f0bec63cdc5925cb" compoundref="_instance_8hpp" startline="68">extensionHandler</references>
        <references refid="structvpr_1_1_instance_extension_handler_1ace86eb273138382d28e7ad42b7e48558" compoundref="_instance_8cpp" startline="34">vpr::InstanceExtensionHandler::validationLayers</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_instance_1ad6d5590582b6b4487544954c9d10be5f" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vpr::Instance::checkValidationSupport</definition>
        <argsstring>(const char *const *layer_names, const uint32_t layer_count) const</argsstring>
        <name>checkValidationSupport</name>
        <param>
          <type>const char *const *</type>
          <declname>layer_names</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>layer_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/Instance.hpp" line="65" column="1" bodyfile="core/src/Instance.cpp" bodystart="141" bodyend="163"/>
        <referencedby refid="classvpr_1_1_instance_1a8e32fee4f0a877997ee6e75ea3d3c3a1" compoundref="_instance_8cpp" startline="119" endline="139">prepareValidation</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_instance_1a6f41bf0cdb803f57e3f2e97c8e9884c5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Instance::checkApiVersionSupport</definition>
        <argsstring>(VkApplicationInfo *info)</argsstring>
        <name>checkApiVersionSupport</name>
        <param>
          <type>VkApplicationInfo *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/Instance.hpp" line="66" column="1" bodyfile="core/src/Instance.cpp" bodystart="108" bodyend="117"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classvpr_1_1_instance_1a89fd4838948bb8ab8eea8337ce1e3cbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::Instance::Instance</definition>
        <argsstring>(instance_layers layers, const VkApplicationInfo *info)</argsstring>
        <name>Instance</name>
        <param>
          <type><ref refid="classvpr_1_1_instance_1ac131eec23cc4eba7cd68bc67de9d8c09" kindref="member">instance_layers</ref></type>
          <declname>layers</declname>
        </param>
        <param>
          <type>const VkApplicationInfo *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/Instance.hpp" line="52" column="1" bodyfile="core/src/Instance.cpp" bodystart="44" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_instance_1a1b8c98d92b5f5ad0a607b5e80db2c30d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::Instance::Instance</definition>
        <argsstring>(instance_layers layers_flags, const VkApplicationInfo *info, const VprExtensionPack *extensions, const char *const *layers=nullptr, const uint32_t layer_count=0)</argsstring>
        <name>Instance</name>
        <param>
          <type><ref refid="classvpr_1_1_instance_1ac131eec23cc4eba7cd68bc67de9d8c09" kindref="member">instance_layers</ref></type>
          <declname>layers_flags</declname>
        </param>
        <param>
          <type>const VkApplicationInfo *</type>
          <declname>info</declname>
        </param>
        <param>
          <type>const <ref refid="structvpr_1_1_vpr_extension_pack" kindref="compound">VprExtensionPack</ref> *</type>
          <declname>extensions</declname>
        </param>
        <param>
          <type>const char *const *</type>
          <declname>layers</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>layer_count</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/Instance.hpp" line="53" column="1" bodyfile="core/src/Instance.cpp" bodystart="46" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_instance_1a2d0e68a86ecbbceb024dee48885c28d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::Instance::~Instance</definition>
        <argsstring>()</argsstring>
        <name>~Instance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/Instance.hpp" line="55" column="1" bodyfile="core/src/Instance.cpp" bodystart="70" bodyend="72"/>
        <references refid="classvpr_1_1_instance_1aa5c56c4b911020e65be6f77c51c3f2eb" compoundref="_instance_8hpp" startline="69">handle</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_instance_1a6082a006a3f2ab9688d4a14c123cb04a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const VkInstance &amp;</type>
        <definition>const VkInstance &amp; vpr::Instance::vkHandle</definition>
        <argsstring>() const noexcept</argsstring>
        <name>vkHandle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/Instance.hpp" line="57" column="1" bodyfile="core/src/Instance.cpp" bodystart="104" bodyend="106"/>
        <references refid="classvpr_1_1_instance_1aa5c56c4b911020e65be6f77c51c3f2eb" compoundref="_instance_8hpp" startline="69">handle</references>
        <referencedby refid="classvpr_1_1_surface_k_h_r_1a2c27a5198682d3069e0936dbeb0f24b4" compoundref="_surface_k_h_r_8cpp" startline="49" endline="55">vpr::SurfaceKHR::create</referencedby>
        <referencedby refid="classvpr_1_1_surface_k_h_r_1a1083d46de78e533a1cabba07b62e1950" compoundref="_surface_k_h_r_8cpp" startline="72" endline="77">vpr::SurfaceKHR::destroy</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_instance_1a34466d6fcc286ef1281b7bdb091ea754" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vpr::Instance::ValidationEnabled</definition>
        <argsstring>() const noexcept</argsstring>
        <name>ValidationEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/Instance.hpp" line="58" column="1" bodyfile="core/src/Instance.cpp" bodystart="74" bodyend="76"/>
        <references refid="classvpr_1_1_instance_1ac131eec23cc4eba7cd68bc67de9d8c09ab9f5c797ebbf55adccdd8539a65a0241">Disabled</references>
        <references refid="classvpr_1_1_instance_1a0992653af0dbc106f0bec63cdc5925cb" compoundref="_instance_8hpp" startline="68">extensionHandler</references>
        <references refid="structvpr_1_1_instance_extension_handler_1ace86eb273138382d28e7ad42b7e48558" compoundref="_instance_8cpp" startline="34">vpr::InstanceExtensionHandler::validationLayers</references>
        <referencedby refid="classvpr_1_1_device_1aca69dbf04470b2119a9960047035dc57" compoundref="_logical_device_8cpp" startline="512" endline="557">vpr::Device::setupDebugUtilsHandler</referencedby>
        <referencedby refid="classvpr_1_1_device_1a158d56e75fab365778e07a84d090b3f7" compoundref="_logical_device_8cpp" startline="308" endline="322">vpr::Device::setupValidation</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_instance_1ab9f92d523b1cc59715c6d1b237be3cea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vpr::Instance::HasExtension</definition>
        <argsstring>(const char *extension_name) const noexcept</argsstring>
        <name>HasExtension</name>
        <param>
          <type>const char *</type>
          <declname>extension_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/Instance.hpp" line="59" column="1" bodyfile="core/src/Instance.cpp" bodystart="78" bodyend="89"/>
        <referencedby refid="classvpr_1_1_device_1aca69dbf04470b2119a9960047035dc57" compoundref="_logical_device_8cpp" startline="512" endline="557">vpr::Device::setupDebugUtilsHandler</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_instance_1a6b61b801c27856790ab59513f66ce11c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Instance::GetEnabledExtensions</definition>
        <argsstring>(size_t *num_extensions, char **extensions) const</argsstring>
        <name>GetEnabledExtensions</name>
        <param>
          <type>size_t *</type>
          <declname>num_extensions</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>extensions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/Instance.hpp" line="60" column="1" bodyfile="core/src/Instance.cpp" bodystart="91" bodyend="102"/>
        <references refid="classvpr_1_1_instance_1a0992653af0dbc106f0bec63cdc5925cb" compoundref="_instance_8hpp" startline="68">extensionHandler</references>
        <references refid="structvpr_1_1_instance_extension_handler_1a8d32e1d9c0746bd09330bbb6555d31b3" compoundref="_instance_8cpp" startline="32">vpr::InstanceExtensionHandler::extensionStrings</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classvpr_1_1_instance" kindref="compound">Instance</ref> is a wrapper around the base Vulkan object that must be initialized first. </para>    </briefdescription>
    <detaileddescription>
<para>The VkInstanceCreateInfo struct passed to the constructor contains information about the current layers enabled, and which Vulkan <ref refid="classvpr_1_1_instance" kindref="compound">Instance</ref> extensions to enable. By default, this should/will contain extensions required to support the creation of a window surface (VkSurfaceKHR).</para><para>This class also contains a Window object, which it is responsible for creating and destroying as necessary, along with a <ref refid="classvpr_1_1_physical_device" kindref="compound">PhysicalDevice</ref> object. These can both be retrieved through the relevant methods. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="244">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="240">
        <label>vpr::InstanceExtensionHandler</label>
        <link refid="structvpr_1_1_instance_extension_handler"/>
        <childnode refid="241" relation="usage">
          <edgelabel>extensionStrings</edgelabel>
        </childnode>
        <childnode refid="242" relation="usage">
          <edgelabel>copiedExtensionStrings</edgelabel>
        </childnode>
      </node>
      <node id="242">
        <label>std::vector&lt; std::string &gt;</label>
        <childnode refid="243" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="239">
        <label>vpr::Instance</label>
        <link refid="classvpr_1_1_instance"/>
        <childnode refid="240" relation="usage">
          <edgelabel>extensionHandler</edgelabel>
        </childnode>
      </node>
      <node id="241">
        <label>std::vector&lt; const char *&gt;</label>
      </node>
      <node id="243">
        <label>std::string</label>
        <childnode refid="244" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="core/include/Instance.hpp" line="38" column="1" bodyfile="core/include/Instance.hpp" bodystart="38" bodyend="72"/>
    <listofallmembers>
      <member refid="classvpr_1_1_instance_1a6f41bf0cdb803f57e3f2e97c8e9884c5" prot="private" virt="non-virtual"><scope>vpr::Instance</scope><name>checkApiVersionSupport</name></member>
      <member refid="classvpr_1_1_instance_1ad6d5590582b6b4487544954c9d10be5f" prot="private" virt="non-virtual"><scope>vpr::Instance</scope><name>checkValidationSupport</name></member>
      <member refid="classvpr_1_1_instance_1ace35d71f74954c4fadbd42e249935501" prot="private" virt="non-virtual"><scope>vpr::Instance</scope><name>createInfo</name></member>
      <member refid="classvpr_1_1_instance_1a0992653af0dbc106f0bec63cdc5925cb" prot="private" virt="non-virtual"><scope>vpr::Instance</scope><name>extensionHandler</name></member>
      <member refid="classvpr_1_1_instance_1a6b61b801c27856790ab59513f66ce11c" prot="public" virt="non-virtual"><scope>vpr::Instance</scope><name>GetEnabledExtensions</name></member>
      <member refid="classvpr_1_1_instance_1aa5c56c4b911020e65be6f77c51c3f2eb" prot="private" virt="non-virtual"><scope>vpr::Instance</scope><name>handle</name></member>
      <member refid="classvpr_1_1_instance_1ab9f92d523b1cc59715c6d1b237be3cea" prot="public" virt="non-virtual"><scope>vpr::Instance</scope><name>HasExtension</name></member>
      <member refid="classvpr_1_1_instance_1ad84c0d2b814c5a7e578df1c33c228cf2" prot="private" virt="non-virtual"><scope>vpr::Instance</scope><name>Instance</name></member>
      <member refid="classvpr_1_1_instance_1a89fd4838948bb8ab8eea8337ce1e3cbd" prot="public" virt="non-virtual"><scope>vpr::Instance</scope><name>Instance</name></member>
      <member refid="classvpr_1_1_instance_1a1b8c98d92b5f5ad0a607b5e80db2c30d" prot="public" virt="non-virtual"><scope>vpr::Instance</scope><name>Instance</name></member>
      <member refid="classvpr_1_1_instance_1ac131eec23cc4eba7cd68bc67de9d8c09" prot="public" virt="non-virtual"><scope>vpr::Instance</scope><name>instance_layers</name></member>
      <member refid="classvpr_1_1_instance_1aca395bdc50c5191872bcdffcd223ccb9" prot="private" virt="non-virtual"><scope>vpr::Instance</scope><name>operator=</name></member>
      <member refid="classvpr_1_1_instance_1a8e32fee4f0a877997ee6e75ea3d3c3a1" prot="private" virt="non-virtual"><scope>vpr::Instance</scope><name>prepareValidation</name></member>
      <member refid="classvpr_1_1_instance_1a34466d6fcc286ef1281b7bdb091ea754" prot="public" virt="non-virtual"><scope>vpr::Instance</scope><name>ValidationEnabled</name></member>
      <member refid="classvpr_1_1_instance_1a6082a006a3f2ab9688d4a14c123cb04a" prot="public" virt="non-virtual"><scope>vpr::Instance</scope><name>vkHandle</name></member>
      <member refid="classvpr_1_1_instance_1a2d0e68a86ecbbceb024dee48885c28d1" prot="public" virt="non-virtual"><scope>vpr::Instance</scope><name>~Instance</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
