<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classvpr_1_1_allocator" kind="class" language="C++" prot="public">
    <compoundname>vpr::Allocator</compoundname>
    <includes refid="_allocator_8hpp" local="no">Allocator.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classvpr_1_1_allocator_1aeb93666035b8e36aa8f2119deb1b4ba1" prot="public" static="no" strong="yes">
        <type></type>
        <name>allocation_extensions</name>
        <enumvalue id="classvpr_1_1_allocator_1aeb93666035b8e36aa8f2119deb1b4ba1a6adf97f83acf6453d4a6a4b1070f3754" prot="public">
          <name>None</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classvpr_1_1_allocator_1aeb93666035b8e36aa8f2119deb1b4ba1a777aca518cfbfec08624a77a23b5b163" prot="public">
          <name>DedicatedAllocations</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/include/Allocator.hpp" line="55" column="1" bodyfile="alloc/include/Allocator.hpp" bodystart="55" bodyend="58"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classvpr_1_1_allocator_1a619ce3b614015e030bea8a3239d60fe2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class DebugVisualization</definition>
        <argsstring></argsstring>
        <name>DebugVisualization</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/include/Allocator.hpp" line="78" column="1" bodyfile="alloc/include/Allocator.hpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classvpr_1_1_allocator_1aa54730353079686243fbe5f8545267d0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct DebugVisualizationImpl</definition>
        <argsstring></argsstring>
        <name>DebugVisualizationImpl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/include/Allocator.hpp" line="79" column="1" bodyfile="alloc/include/Allocator.hpp" bodystart="79" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classvpr_1_1_allocator_1aa125427dc233b7a116ae75f58bd56431" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="structvpr_1_1_allocator_impl" kindref="compound">AllocatorImpl</ref> &gt;</type>
        <definition>std::unique_ptr&lt;AllocatorImpl&gt; vpr::Allocator::impl</definition>
        <argsstring></argsstring>
        <name>impl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/include/Allocator.hpp" line="80" column="1" bodyfile="alloc/include/Allocator.hpp" bodystart="80" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_allocator_1ae8c982057f90fad764d25d8b081e5603" compoundref="_allocator_8cpp" startline="123" endline="131">AllocateForBuffer</referencedby>
        <referencedby refid="classvpr_1_1_allocator_1a74d845e760e100129d83bc40cd4fb12e" compoundref="_allocator_8cpp" startline="113" endline="121">AllocateForImage</referencedby>
        <referencedby refid="classvpr_1_1_allocator_1ab5457af65cbb081b295f323c13a7843a" compoundref="_allocator_8cpp" startline="49" endline="60">AllocateMemory</referencedby>
        <referencedby refid="classvpr_1_1_allocator_1a1be30aa02991f0323def73b9be9a3c44" compoundref="_allocator_8cpp" startline="45" endline="47">DeviceHandle</referencedby>
        <referencedby refid="classvpr_1_1_allocator_1a438bbd88a3f18c741f7de90f528300b1" compoundref="_allocator_8cpp" startline="62" endline="111">FreeMemory</referencedby>
        <referencedby refid="classvpr_1_1_allocator_1a4fb24600d3edbff034389a4ea111513f" compoundref="_allocator_8cpp" startline="40" endline="43">Recreate</referencedby>
        <referencedby refid="classvpr_1_1_allocator_1a9db2082e4275074f63a5e1257a89825f" compoundref="_allocator_8cpp" startline="36" endline="38">~Allocator</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classvpr_1_1_allocator_1a17a1897a3de8cd25b9a2d3fc89620352" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::Allocator::Allocator</definition>
        <argsstring>(const Allocator &amp;)=delete</argsstring>
        <name>Allocator</name>
        <param>
          <type>const <ref refid="classvpr_1_1_allocator" kindref="compound">Allocator</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/include/Allocator.hpp" line="49" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocator_1a7e0d9381325848d4ae8721d503c53d9b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::Allocator::Allocator</definition>
        <argsstring>(Allocator &amp;&amp;)=delete</argsstring>
        <name>Allocator</name>
        <param>
          <type><ref refid="classvpr_1_1_allocator" kindref="compound">Allocator</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/include/Allocator.hpp" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocator_1a816077a4ee71487a3c7a45eddfb46644" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classvpr_1_1_allocator" kindref="compound">Allocator</ref> &amp;</type>
        <definition>Allocator&amp; vpr::Allocator::operator=</definition>
        <argsstring>(const Allocator &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classvpr_1_1_allocator" kindref="compound">Allocator</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/include/Allocator.hpp" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocator_1a769efe2787e5153c716f7334cdd85d45" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classvpr_1_1_allocator" kindref="compound">Allocator</ref> &amp;</type>
        <definition>Allocator&amp; vpr::Allocator::operator=</definition>
        <argsstring>(Allocator &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classvpr_1_1_allocator" kindref="compound">Allocator</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/include/Allocator.hpp" line="52" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classvpr_1_1_allocator_1a8bc1ce37f0b4ef95a00d534a6542dd1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::Allocator::Allocator</definition>
        <argsstring>(const VkDevice &amp;parent_device, const VkPhysicalDevice &amp;physical_device, allocation_extensions dedicated_alloc_enabled)</argsstring>
        <name>Allocator</name>
        <param>
          <type>const VkDevice &amp;</type>
          <declname>parent_device</declname>
        </param>
        <param>
          <type>const VkPhysicalDevice &amp;</type>
          <declname>physical_device</declname>
        </param>
        <param>
          <type><ref refid="classvpr_1_1_allocator_1aeb93666035b8e36aa8f2119deb1b4ba1" kindref="member">allocation_extensions</ref></type>
          <declname>dedicated_alloc_enabled</declname>
        </param>
        <briefdescription>
<para><ref refid="classvpr_1_1_allocator" kindref="compound">Allocator</ref> is attached to a single logical device and physical device. </para>        </briefdescription>
        <detaileddescription>
<para>Extensions for improved dedicated allocations are set based on parameter. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/include/Allocator.hpp" line="61" column="1" bodyfile="alloc/src/Allocator.cpp" bodystart="34" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocator_1a9db2082e4275074f63a5e1257a89825f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::Allocator::~Allocator</definition>
        <argsstring>()</argsstring>
        <name>~Allocator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/include/Allocator.hpp" line="62" column="1" bodyfile="alloc/src/Allocator.cpp" bodystart="36" bodyend="38"/>
        <references refid="classvpr_1_1_allocator_1aa125427dc233b7a116ae75f58bd56431" compoundref="_allocator_8hpp" startline="80">impl</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocator_1a4fb24600d3edbff034389a4ea111513f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Allocator::Recreate</definition>
        <argsstring>()</argsstring>
        <name>Recreate</name>
        <briefdescription>
<para>Destroys and re-creates the allocator subsystem. </para>        </briefdescription>
        <detaileddescription>
<para>Pre-existing allocations are destroyed and not rebuilt - the allocator is effectively &quot;zeroed out&quot;. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/include/Allocator.hpp" line="65" column="1" bodyfile="alloc/src/Allocator.cpp" bodystart="40" bodyend="43"/>
        <references refid="classvpr_1_1_allocator_1aa125427dc233b7a116ae75f58bd56431" compoundref="_allocator_8hpp" startline="80">impl</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocator_1a1be30aa02991f0323def73b9be9a3c44" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const VkDevice &amp;</type>
        <definition>const VkDevice &amp; vpr::Allocator::DeviceHandle</definition>
        <argsstring>() const noexcept</argsstring>
        <name>DeviceHandle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/include/Allocator.hpp" line="66" column="1" bodyfile="alloc/src/Allocator.cpp" bodystart="45" bodyend="47"/>
        <references refid="classvpr_1_1_allocator_1aa125427dc233b7a116ae75f58bd56431" compoundref="_allocator_8hpp" startline="80">impl</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocator_1ab5457af65cbb081b295f323c13a7843a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkResult</type>
        <definition>VkResult vpr::Allocator::AllocateMemory</definition>
        <argsstring>(const VkMemoryRequirements &amp;memory_reqs, const AllocationRequirements &amp;alloc_details, const AllocationType &amp;suballoc_type, Allocation &amp;dest_allocation)</argsstring>
        <name>AllocateMemory</name>
        <param>
          <type>const VkMemoryRequirements &amp;</type>
          <declname>memory_reqs</declname>
        </param>
        <param>
          <type>const <ref refid="structvpr_1_1_allocation_requirements" kindref="compound">AllocationRequirements</ref> &amp;</type>
          <declname>alloc_details</declname>
        </param>
        <param>
          <type>const <ref refid="namespacevpr_1a494552c6fdda99313008c4a5e61a79fc" kindref="member">AllocationType</ref> &amp;</type>
          <declname>suballoc_type</declname>
        </param>
        <param>
          <type><ref refid="classvpr_1_1_allocation" kindref="compound">Allocation</ref> &amp;</type>
          <declname>dest_allocation</declname>
        </param>
        <briefdescription>
<para>Called by clients to allocate memory into the passed <ref refid="classvpr_1_1_allocation" kindref="compound">Allocation</ref> reference. </para>        </briefdescription>
        <detaileddescription>
<para>Usually wiser to just use AllocateForBuffer or AllocateForImage. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/include/Allocator.hpp" line="68" column="1" bodyfile="alloc/src/Allocator.cpp" bodystart="49" bodyend="60"/>
        <references refid="classvpr_1_1_allocator_1aa125427dc233b7a116ae75f58bd56431" compoundref="_allocator_8hpp" startline="80">impl</references>
        <references refid="namespacevpr_1afb6cf1dbd1d7b9e7d5dfa97f3d5bd205" compoundref="_allocator_8cpp" startline="19" endline="32">vpr::suballocTypeFromAllocType</references>
        <referencedby refid="classvpr_1_1_allocator_1ae8c982057f90fad764d25d8b081e5603" compoundref="_allocator_8cpp" startline="123" endline="131">AllocateForBuffer</referencedby>
        <referencedby refid="classvpr_1_1_allocator_1a74d845e760e100129d83bc40cd4fb12e" compoundref="_allocator_8cpp" startline="113" endline="121">AllocateForImage</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocator_1a438bbd88a3f18c741f7de90f528300b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Allocator::FreeMemory</definition>
        <argsstring>(const Allocation *memory_to_free)</argsstring>
        <name>FreeMemory</name>
        <param>
          <type>const <ref refid="classvpr_1_1_allocation" kindref="compound">Allocation</ref> *</type>
          <declname>memory_to_free</declname>
        </param>
        <briefdescription>
<para>Releases the memory used by the given <ref refid="classvpr_1_1_allocation" kindref="compound">Allocation</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/include/Allocator.hpp" line="70" column="1" bodyfile="alloc/src/Allocator.cpp" bodystart="62" bodyend="111"/>
        <references refid="classvpr_1_1_allocator_1aa125427dc233b7a116ae75f58bd56431" compoundref="_allocator_8hpp" startline="80">impl</references>
        <references refid="classvpr_1_1_allocation_1ad23615cd9f84e8e2354cf1f1e7e8f162" compoundref="_allocation_8cpp" startline="207" endline="220">vpr::Allocation::IsPrivateAllocation</references>
        <references refid="classvpr_1_1_allocation_1ab07876bad87d1c3e085ab02c1c608179" compoundref="_allocation_8cpp" startline="184" endline="205">vpr::Allocation::MemoryTypeIdx</references>
        <references refid="classvpr_1_1_allocation_1aa1c4b67be8e0f44155dcd26ca93f6ec2" compoundref="_allocation_8hpp" startline="51">vpr::Allocation::Size</references>
        <references refid="namespacevpr_1adb4fbe461c1ece0fd2c3f56bbb3f55e7" compoundref="_alloc_common_8hpp" startline="24">vpr::VALIDATE_MEMORY</references>
        <references refid="group___allocation_1ggaba421ef06b1d6b910602d0180c9eff78a76c3ec4c3969badcdd02e0c88b07077f">vpr::VALIDATION_PASSED</references>
        <references refid="namespacevpr_1a85a5d8c5ba83b162eda5df835a7e6e4d" compoundref="vpr__stdafx_8h" startline="31">vpr::VERBOSE_LOGGING</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocator_1a74d845e760e100129d83bc40cd4fb12e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkResult</type>
        <definition>VkResult vpr::Allocator::AllocateForImage</definition>
        <argsstring>(VkImage &amp;image_handle, const AllocationRequirements &amp;details, const AllocationType &amp;alloc_type, Allocation &amp;dest_allocation)</argsstring>
        <name>AllocateForImage</name>
        <param>
          <type>VkImage &amp;</type>
          <declname>image_handle</declname>
        </param>
        <param>
          <type>const <ref refid="structvpr_1_1_allocation_requirements" kindref="compound">AllocationRequirements</ref> &amp;</type>
          <declname>details</declname>
        </param>
        <param>
          <type>const <ref refid="namespacevpr_1a494552c6fdda99313008c4a5e61a79fc" kindref="member">AllocationType</ref> &amp;</type>
          <declname>alloc_type</declname>
        </param>
        <param>
          <type><ref refid="classvpr_1_1_allocation" kindref="compound">Allocation</ref> &amp;</type>
          <declname>dest_allocation</declname>
        </param>
        <briefdescription>
<para>Allocates memory for an image, using given handle to get requirements. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="classvpr_1_1_allocation" kindref="compound">Allocation</ref> information is written to dest_memory_range, so it can then be used to bind the resources together. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/include/Allocator.hpp" line="73" column="1" bodyfile="alloc/src/Allocator.cpp" bodystart="113" bodyend="121"/>
        <references refid="classvpr_1_1_allocator_1ab5457af65cbb081b295f323c13a7843a" compoundref="_allocator_8cpp" startline="49" endline="60">AllocateMemory</references>
        <references refid="classvpr_1_1_allocator_1aa125427dc233b7a116ae75f58bd56431" compoundref="_allocator_8hpp" startline="80">impl</references>
        <references refid="classvpr_1_1_allocation_1a1a223e41ca865271544ece71d18edce2" compoundref="_allocation_8cpp" startline="141" endline="162">vpr::Allocation::Memory</references>
        <references refid="classvpr_1_1_allocation_1acb642a53c185ac6530ed60959b0e4397" compoundref="_allocation_8cpp" startline="164" endline="182">vpr::Allocation::Offset</references>
        <references refid="structvpr_1_1_allocation_requirements_1a164674fd0507f8982e6ec272d1f46ea7" compoundref="_allocation_requirements_8hpp" startline="23">vpr::AllocationRequirements::prefersDedicatedKHR</references>
        <references refid="structvpr_1_1_allocation_requirements_1a84e600ef433ac8a3c3964bdc579cd0ee" compoundref="_allocation_requirements_8hpp" startline="25">vpr::AllocationRequirements::requiresDedicatedKHR</references>
        <references refid="vk_assert_8hpp_1a92c2e07b0d021fc331be70a65c61dacc" compoundref="vk_assert_8hpp" startline="9">VkAssert</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocator_1ae8c982057f90fad764d25d8b081e5603" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkResult</type>
        <definition>VkResult vpr::Allocator::AllocateForBuffer</definition>
        <argsstring>(VkBuffer &amp;buffer_handle, const AllocationRequirements &amp;details, const AllocationType &amp;alloc_type, Allocation &amp;dest_allocation)</argsstring>
        <name>AllocateForBuffer</name>
        <param>
          <type>VkBuffer &amp;</type>
          <declname>buffer_handle</declname>
        </param>
        <param>
          <type>const <ref refid="structvpr_1_1_allocation_requirements" kindref="compound">AllocationRequirements</ref> &amp;</type>
          <declname>details</declname>
        </param>
        <param>
          <type>const <ref refid="namespacevpr_1a494552c6fdda99313008c4a5e61a79fc" kindref="member">AllocationType</ref> &amp;</type>
          <declname>alloc_type</declname>
        </param>
        <param>
          <type><ref refid="classvpr_1_1_allocation" kindref="compound">Allocation</ref> &amp;</type>
          <declname>dest_allocation</declname>
        </param>
        <briefdescription>
<para>Much like AllocateForImage: uses given handle to get requirements, writes details of allocation ot given range, making memory valid for binding. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/include/Allocator.hpp" line="75" column="1" bodyfile="alloc/src/Allocator.cpp" bodystart="123" bodyend="131"/>
        <references refid="classvpr_1_1_allocator_1ab5457af65cbb081b295f323c13a7843a" compoundref="_allocator_8cpp" startline="49" endline="60">AllocateMemory</references>
        <references refid="classvpr_1_1_allocator_1aa125427dc233b7a116ae75f58bd56431" compoundref="_allocator_8hpp" startline="80">impl</references>
        <references refid="classvpr_1_1_allocation_1a1a223e41ca865271544ece71d18edce2" compoundref="_allocation_8cpp" startline="141" endline="162">vpr::Allocation::Memory</references>
        <references refid="classvpr_1_1_allocation_1acb642a53c185ac6530ed60959b0e4397" compoundref="_allocation_8cpp" startline="164" endline="182">vpr::Allocation::Offset</references>
        <references refid="structvpr_1_1_allocation_requirements_1a164674fd0507f8982e6ec272d1f46ea7" compoundref="_allocation_requirements_8hpp" startline="23">vpr::AllocationRequirements::prefersDedicatedKHR</references>
        <references refid="structvpr_1_1_allocation_requirements_1a84e600ef433ac8a3c3964bdc579cd0ee" compoundref="_allocation_requirements_8hpp" startline="25">vpr::AllocationRequirements::requiresDedicatedKHR</references>
        <references refid="vk_assert_8hpp_1a92c2e07b0d021fc331be70a65c61dacc" compoundref="vk_assert_8hpp" startline="9">VkAssert</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The primary interface and class of this subsystem. </para>    </briefdescription>
    <detaileddescription>
<para>This object is responsible for creating resources when requested, managing memory, checking integrity of memory, and cleaning up after itself and when deallocation has been requested. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="45">
        <label>std::list&lt; T &gt;::iterator</label>
      </node>
      <node id="44">
        <label>std::vector&lt; suballocationList::iterator &gt;</label>
        <childnode refid="45" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="39">
        <label>std::vector&lt; std::unique_ptr&lt; vpr::MemoryBlock &gt; &gt;</label>
        <childnode refid="40" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="49">
        <label>vpr::Allocation</label>
        <link refid="classvpr_1_1_allocation"/>
        <childnode refid="50" relation="usage">
          <edgelabel>impl</edgelabel>
        </childnode>
      </node>
      <node id="51">
        <label>vpr::AllocationImpl</label>
        <link refid="structvpr_1_1_allocation_impl"/>
      </node>
      <node id="50">
        <label>std::unique_ptr&lt; vpr::AllocationImpl &gt;</label>
        <childnode refid="51" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="34">
        <label>vpr::AllocatorImpl</label>
        <link refid="structvpr_1_1_allocator_impl"/>
        <childnode refid="35" relation="usage">
          <edgelabel>allocations</edgelabel>
        </childnode>
        <childnode refid="46" relation="usage">
          <edgelabel>emptyAllocations</edgelabel>
        </childnode>
        <childnode refid="48" relation="usage">
          <edgelabel>privateAllocations</edgelabel>
        </childnode>
      </node>
      <node id="48">
        <label>std::unordered_set&lt; vpr::Allocation, vpr::AllocationHash &gt;</label>
        <childnode refid="49" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="42">
        <label>std::list&lt; Suballocation &gt;</label>
        <childnode refid="43" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="46">
        <label>std::map&lt; AllocationSize, std::vector&lt; bool &gt; &gt;</label>
        <childnode refid="47" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="35">
        <label>std::map&lt; AllocationSize, std::vector&lt; std::unique_ptr&lt; vpr::AllocationCollection &gt; &gt; &gt;</label>
        <childnode refid="36" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="38">
        <label>vpr::AllocationCollection</label>
        <link refid="classvpr_1_1_allocation_collection"/>
        <childnode refid="32" relation="usage">
          <edgelabel>allocator</edgelabel>
        </childnode>
        <childnode refid="39" relation="usage">
          <edgelabel>allocations</edgelabel>
        </childnode>
      </node>
      <node id="33">
        <label>std::unique_ptr&lt; vpr::AllocatorImpl &gt;</label>
        <childnode refid="34" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="41">
        <label>vpr::MemoryBlock</label>
        <link refid="classvpr_1_1_memory_block"/>
        <childnode refid="42" relation="usage">
          <edgelabel>Suballocations</edgelabel>
        </childnode>
        <childnode refid="44" relation="usage">
          <edgelabel>availSuballocations</edgelabel>
        </childnode>
      </node>
      <node id="43">
        <label>vpr::Suballocation</label>
        <link refid="structvpr_1_1_suballocation"/>
      </node>
      <node id="40">
        <label>std::unique_ptr&lt; vpr::MemoryBlock &gt;</label>
        <childnode refid="41" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="37">
        <label>std::unique_ptr&lt; vpr::AllocationCollection &gt;</label>
        <childnode refid="38" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="47">
        <label>std::vector&lt; bool &gt;</label>
      </node>
      <node id="32">
        <label>vpr::Allocator</label>
        <link refid="classvpr_1_1_allocator"/>
        <childnode refid="33" relation="usage">
          <edgelabel>impl</edgelabel>
        </childnode>
      </node>
      <node id="36">
        <label>std::vector&lt; std::unique_ptr&lt; vpr::AllocationCollection &gt; &gt;</label>
        <childnode refid="37" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="alloc/include/Allocator.hpp" line="48" column="1" bodyfile="alloc/include/Allocator.hpp" bodystart="48" bodyend="81"/>
    <listofallmembers>
      <member refid="classvpr_1_1_allocator_1ae8c982057f90fad764d25d8b081e5603" prot="public" virt="non-virtual"><scope>vpr::Allocator</scope><name>AllocateForBuffer</name></member>
      <member refid="classvpr_1_1_allocator_1a74d845e760e100129d83bc40cd4fb12e" prot="public" virt="non-virtual"><scope>vpr::Allocator</scope><name>AllocateForImage</name></member>
      <member refid="classvpr_1_1_allocator_1ab5457af65cbb081b295f323c13a7843a" prot="public" virt="non-virtual"><scope>vpr::Allocator</scope><name>AllocateMemory</name></member>
      <member refid="classvpr_1_1_allocator_1aeb93666035b8e36aa8f2119deb1b4ba1" prot="public" virt="non-virtual"><scope>vpr::Allocator</scope><name>allocation_extensions</name></member>
      <member refid="classvpr_1_1_allocator_1a17a1897a3de8cd25b9a2d3fc89620352" prot="private" virt="non-virtual"><scope>vpr::Allocator</scope><name>Allocator</name></member>
      <member refid="classvpr_1_1_allocator_1a7e0d9381325848d4ae8721d503c53d9b" prot="private" virt="non-virtual"><scope>vpr::Allocator</scope><name>Allocator</name></member>
      <member refid="classvpr_1_1_allocator_1a8bc1ce37f0b4ef95a00d534a6542dd1c" prot="public" virt="non-virtual"><scope>vpr::Allocator</scope><name>Allocator</name></member>
      <member refid="classvpr_1_1_allocator_1a619ce3b614015e030bea8a3239d60fe2" prot="private" virt="non-virtual"><scope>vpr::Allocator</scope><name>DebugVisualization</name></member>
      <member refid="classvpr_1_1_allocator_1aa54730353079686243fbe5f8545267d0" prot="private" virt="non-virtual"><scope>vpr::Allocator</scope><name>DebugVisualizationImpl</name></member>
      <member refid="classvpr_1_1_allocator_1a1be30aa02991f0323def73b9be9a3c44" prot="public" virt="non-virtual"><scope>vpr::Allocator</scope><name>DeviceHandle</name></member>
      <member refid="classvpr_1_1_allocator_1a438bbd88a3f18c741f7de90f528300b1" prot="public" virt="non-virtual"><scope>vpr::Allocator</scope><name>FreeMemory</name></member>
      <member refid="classvpr_1_1_allocator_1aa125427dc233b7a116ae75f58bd56431" prot="private" virt="non-virtual"><scope>vpr::Allocator</scope><name>impl</name></member>
      <member refid="classvpr_1_1_allocator_1a816077a4ee71487a3c7a45eddfb46644" prot="private" virt="non-virtual"><scope>vpr::Allocator</scope><name>operator=</name></member>
      <member refid="classvpr_1_1_allocator_1a769efe2787e5153c716f7334cdd85d45" prot="private" virt="non-virtual"><scope>vpr::Allocator</scope><name>operator=</name></member>
      <member refid="classvpr_1_1_allocator_1a4fb24600d3edbff034389a4ea111513f" prot="public" virt="non-virtual"><scope>vpr::Allocator</scope><name>Recreate</name></member>
      <member refid="classvpr_1_1_allocator_1a9db2082e4275074f63a5e1257a89825f" prot="public" virt="non-virtual"><scope>vpr::Allocator</scope><name>~Allocator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
