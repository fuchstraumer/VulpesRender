<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classvpr_1_1_device" kind="class" language="C++" prot="public">
    <compoundname>vpr::Device</compoundname>
    <includes refid="_logical_device_8hpp" local="no">LogicalDevice.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classvpr_1_1_device_1a1395be5571d5d2961aacb0c3727ef8b0" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t vpr::Device::numGraphicsQueues</definition>
        <argsstring></argsstring>
        <name>numGraphicsQueues</name>
        <initializer>{ 0 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="127" column="1" bodyfile="core/include/LogicalDevice.hpp" bodystart="127" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_device_1ab4de02f4fcdb84f487c8e8f598cc3a77" compoundref="_logical_device_8cpp" startline="125" endline="130">GraphicsQueue</referencedby>
        <referencedby refid="classvpr_1_1_device_1a0462441316d1ac019b586331ee938f79" compoundref="_logical_device_8cpp" startline="251" endline="253">NumGraphicsQueues</referencedby>
        <referencedby refid="classvpr_1_1_device_1abdb29331fbcc15a242b3f0e82b02beef" compoundref="_logical_device_8cpp" startline="354" endline="373">setupComputeQueues</referencedby>
        <referencedby refid="classvpr_1_1_device_1adbe15d529a11af4d7034a2135255e773" compoundref="_logical_device_8cpp" startline="343" endline="352">setupGraphicsQueues</referencedby>
        <referencedby refid="classvpr_1_1_device_1a22ee8e6517d4898282d9d6385545100a" compoundref="_logical_device_8cpp" startline="394" endline="411">setupSparseBindingQueues</referencedby>
        <referencedby refid="classvpr_1_1_device_1aa64b2412561fa0950722c2dc4997da9f" compoundref="_logical_device_8cpp" startline="375" endline="392">setupTransferQueues</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classvpr_1_1_device_1a894511aa70498ce4c6d4f90234fdbeb1" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t vpr::Device::numComputeQueues</definition>
        <argsstring></argsstring>
        <name>numComputeQueues</name>
        <initializer>{ 0 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="128" column="1" bodyfile="core/include/LogicalDevice.hpp" bodystart="128" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_device_1abfe0f840688612001a13fe92f6e753da" compoundref="_logical_device_8cpp" startline="255" endline="257">NumComputeQueues</referencedby>
        <referencedby refid="classvpr_1_1_device_1abdb29331fbcc15a242b3f0e82b02beef" compoundref="_logical_device_8cpp" startline="354" endline="373">setupComputeQueues</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classvpr_1_1_device_1a71fb8d05fa54f5b46e2a93d69b4a9e1f" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t vpr::Device::numTransferQueues</definition>
        <argsstring></argsstring>
        <name>numTransferQueues</name>
        <initializer>{ 0 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="129" column="1" bodyfile="core/include/LogicalDevice.hpp" bodystart="129" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_device_1a4bdc3126a75abdcd3f1085cf8ebb83d3" compoundref="_logical_device_8cpp" startline="259" endline="261">NumTransferQueues</referencedby>
        <referencedby refid="classvpr_1_1_device_1aa64b2412561fa0950722c2dc4997da9f" compoundref="_logical_device_8cpp" startline="375" endline="392">setupTransferQueues</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classvpr_1_1_device_1a84c3631b86e77b5a52e9933a8309b7c7" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t vpr::Device::numSparseBindingQueues</definition>
        <argsstring></argsstring>
        <name>numSparseBindingQueues</name>
        <initializer>{ 0 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="130" column="1" bodyfile="core/include/LogicalDevice.hpp" bodystart="130" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_device_1ab3d41a32bae7a7f8cf3f7bce630f9a41" compoundref="_logical_device_8cpp" startline="263" endline="265">NumSparseBindingQueues</referencedby>
        <referencedby refid="classvpr_1_1_device_1a22ee8e6517d4898282d9d6385545100a" compoundref="_logical_device_8cpp" startline="394" endline="411">setupSparseBindingQueues</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classvpr_1_1_device_1ae90f098f10ef560b93fb54e29e9578c2" prot="private" static="no" mutable="no">
        <type><ref refid="structvpr_1_1vk_queue_family_indices" kindref="compound">vkQueueFamilyIndices</ref></type>
        <definition>vkQueueFamilyIndices vpr::Device::queueFamilyIndices</definition>
        <argsstring></argsstring>
        <name>queueFamilyIndices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="131" column="1" bodyfile="core/include/LogicalDevice.hpp" bodystart="131" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_device_1a97c806a212758d83ed537fbf25cf9fe6" compoundref="_logical_device_8cpp" startline="119" endline="123">checkSurfaceSupport</referencedby>
        <referencedby refid="classvpr_1_1_device_1a6a2bdc1c9de2b94e330ba75cb4a0a87b" compoundref="_logical_device_8cpp" startline="144" endline="154">ComputeQueue</referencedby>
        <referencedby refid="classvpr_1_1_device_1a6914a8dd1054f00fbdc3454e55b3c14b" compoundref="_logical_device_8cpp" startline="233" endline="249">GeneralQueue</referencedby>
        <referencedby refid="classvpr_1_1_device_1ab4de02f4fcdb84f487c8e8f598cc3a77" compoundref="_logical_device_8cpp" startline="125" endline="130">GraphicsQueue</referencedby>
        <referencedby refid="classvpr_1_1_device_1af97db14ae016b678dcb2be6061cac5bd" compoundref="_logical_device_8cpp" startline="78" endline="83">HasDedicatedComputeQueues</referencedby>
        <referencedby refid="classvpr_1_1_device_1ac4cf746c60392ff8164c32868f252f23" compoundref="_logical_device_8cpp" startline="267" endline="269">QueueFamilyIndices</referencedby>
        <referencedby refid="classvpr_1_1_device_1abdb29331fbcc15a242b3f0e82b02beef" compoundref="_logical_device_8cpp" startline="354" endline="373">setupComputeQueues</referencedby>
        <referencedby refid="classvpr_1_1_device_1adbe15d529a11af4d7034a2135255e773" compoundref="_logical_device_8cpp" startline="343" endline="352">setupGraphicsQueues</referencedby>
        <referencedby refid="classvpr_1_1_device_1a22ee8e6517d4898282d9d6385545100a" compoundref="_logical_device_8cpp" startline="394" endline="411">setupSparseBindingQueues</referencedby>
        <referencedby refid="classvpr_1_1_device_1aa64b2412561fa0950722c2dc4997da9f" compoundref="_logical_device_8cpp" startline="375" endline="392">setupTransferQueues</referencedby>
        <referencedby refid="classvpr_1_1_device_1a33f34c1c36dc71aa2905bce9e48b3c3f" compoundref="_logical_device_8cpp" startline="156" endline="168">SparseBindingQueue</referencedby>
        <referencedby refid="classvpr_1_1_device_1af7b303fd1d3a080aa4d160f7c3f10ad5" compoundref="_logical_device_8cpp" startline="132" endline="142">TransferQueue</referencedby>
        <referencedby refid="classvpr_1_1_device_1ac71413f7f9988d9479e27f51fc6de197" compoundref="_logical_device_8cpp" startline="413" endline="430">verifyPresentationSupport</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classvpr_1_1_device_1a5e6c89cf59912690370c11d4c7c2648a" prot="private" static="no" mutable="no">
        <type>VkDevice</type>
        <definition>VkDevice vpr::Device::handle</definition>
        <argsstring></argsstring>
        <name>handle</name>
        <initializer>{ VK_NULL_HANDLE }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="132" column="1" bodyfile="core/include/LogicalDevice.hpp" bodystart="132" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_device_1a3b0734cd598d9a64f3c459e9dc4e84ce" compoundref="_logical_device_8cpp" startline="271" endline="297">create</referencedby>
        <referencedby refid="classvpr_1_1_device_1aca69dbf04470b2119a9960047035dc57" compoundref="_logical_device_8cpp" startline="512" endline="557">setupDebugUtilsHandler</referencedby>
        <referencedby refid="classvpr_1_1_device_1a33f34c1c36dc71aa2905bce9e48b3c3f" compoundref="_logical_device_8cpp" startline="156" endline="168">SparseBindingQueue</referencedby>
        <referencedby refid="classvpr_1_1_device_1a59882855173bef0b13a17b376ea01d45" compoundref="_logical_device_8cpp" startline="74" endline="76">vkHandle</referencedby>
        <referencedby refid="classvpr_1_1_device_1a1e717b4e39da77afd6658b9df6393ee2" compoundref="_logical_device_8cpp" startline="64" endline="72">~Device</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classvpr_1_1_device_1a3767828e10f7ebb7eb0e3fff60732c96" prot="private" static="no" mutable="no">
        <type>VkDeviceCreateInfo</type>
        <definition>VkDeviceCreateInfo vpr::Device::createInfo</definition>
        <argsstring></argsstring>
        <name>createInfo</name>
        <initializer>{ }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="133" column="1" bodyfile="core/include/LogicalDevice.hpp" bodystart="133" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_device_1a3b0734cd598d9a64f3c459e9dc4e84ce" compoundref="_logical_device_8cpp" startline="271" endline="297">create</referencedby>
        <referencedby refid="classvpr_1_1_device_1a165976c19ab59de329855485a9dab5aa" compoundref="_logical_device_8cpp" startline="324" endline="341">setupExtensions</referencedby>
        <referencedby refid="classvpr_1_1_device_1a158d56e75fab365778e07a84d090b3f7" compoundref="_logical_device_8cpp" startline="308" endline="322">setupValidation</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classvpr_1_1_device_1a8545ca31dfd6a35a0370c7de5b0cc64c" prot="private" static="no" mutable="no">
        <type><ref refid="structvpr_1_1_vk_debug_utils_functions" kindref="compound">VkDebugUtilsFunctions</ref> *</type>
        <definition>VkDebugUtilsFunctions* vpr::Device::debugUtilsHandler</definition>
        <argsstring></argsstring>
        <name>debugUtilsHandler</name>
        <initializer>{ nullptr }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="134" column="1" bodyfile="core/include/LogicalDevice.hpp" bodystart="134" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_device_1a37104872c409608aac9b91363ce71fc7" compoundref="_logical_device_8cpp" startline="222" endline="231">DebugUtilsHandler</referencedby>
        <referencedby refid="classvpr_1_1_device_1aca69dbf04470b2119a9960047035dc57" compoundref="_logical_device_8cpp" startline="512" endline="557">setupDebugUtilsHandler</referencedby>
        <referencedby refid="classvpr_1_1_device_1a1e717b4e39da77afd6658b9df6393ee2" compoundref="_logical_device_8cpp" startline="64" endline="72">~Device</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classvpr_1_1_device_1a39687d150080576e3b0c66873f808d37" prot="private" static="no" mutable="no">
        <type>const <ref refid="classvpr_1_1_physical_device" kindref="compound">PhysicalDevice</ref> *</type>
        <definition>const PhysicalDevice* vpr::Device::parent</definition>
        <argsstring></argsstring>
        <name>parent</name>
        <initializer>{ nullptr }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="135" column="1" bodyfile="core/include/LogicalDevice.hpp" bodystart="135" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_device_1a97c806a212758d83ed537fbf25cf9fe6" compoundref="_logical_device_8cpp" startline="119" endline="123">checkSurfaceSupport</referencedby>
        <referencedby refid="classvpr_1_1_device_1a3b0734cd598d9a64f3c459e9dc4e84ce" compoundref="_logical_device_8cpp" startline="271" endline="297">create</referencedby>
        <referencedby refid="classvpr_1_1_device_1a2a58028f056c580337c9454195683eae" compoundref="_logical_device_8cpp" startline="186" endline="199">FindSupportedFormat</referencedby>
        <referencedby refid="classvpr_1_1_device_1a6914a8dd1054f00fbdc3454e55b3c14b" compoundref="_logical_device_8cpp" startline="233" endline="249">GeneralQueue</referencedby>
        <referencedby refid="classvpr_1_1_device_1ad9c1f7de10b5e4b0816bbd8233fa4987" compoundref="_logical_device_8cpp" startline="170" endline="184">GetFormatTiling</referencedby>
        <referencedby refid="classvpr_1_1_device_1a3c72a3cb6c48025c77a2e5029ff3718c" compoundref="_logical_device_8cpp" startline="206" endline="208">GetMemoryTypeIdx</referencedby>
        <referencedby refid="classvpr_1_1_device_1a25e0b05bb662b335ec214295c46654cc" compoundref="_logical_device_8cpp" startline="210" endline="212">GetPhysicalDevice</referencedby>
        <referencedby refid="classvpr_1_1_device_1a3298bf1002853c3cd5b17fba4abc721d" compoundref="_logical_device_8cpp" startline="218" endline="220">GetPhysicalDeviceMemoryProperties</referencedby>
        <referencedby refid="classvpr_1_1_device_1a75b50a9b7b72d42932981ad2c8c9318c" compoundref="_logical_device_8cpp" startline="214" endline="216">GetPhysicalDeviceProperties</referencedby>
        <referencedby refid="classvpr_1_1_device_1abdb29331fbcc15a242b3f0e82b02beef" compoundref="_logical_device_8cpp" startline="354" endline="373">setupComputeQueues</referencedby>
        <referencedby refid="classvpr_1_1_device_1adbe15d529a11af4d7034a2135255e773" compoundref="_logical_device_8cpp" startline="343" endline="352">setupGraphicsQueues</referencedby>
        <referencedby refid="classvpr_1_1_device_1a22ee8e6517d4898282d9d6385545100a" compoundref="_logical_device_8cpp" startline="394" endline="411">setupSparseBindingQueues</referencedby>
        <referencedby refid="classvpr_1_1_device_1aa64b2412561fa0950722c2dc4997da9f" compoundref="_logical_device_8cpp" startline="375" endline="392">setupTransferQueues</referencedby>
        <referencedby refid="classvpr_1_1_device_1ac71413f7f9988d9479e27f51fc6de197" compoundref="_logical_device_8cpp" startline="413" endline="430">verifyPresentationSupport</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classvpr_1_1_device_1afbd33fc31f5c5e1859faf0130e551ed6" prot="private" static="no" mutable="no">
        <type>const <ref refid="classvpr_1_1_instance" kindref="compound">Instance</ref> *</type>
        <definition>const Instance* vpr::Device::parentInstance</definition>
        <argsstring></argsstring>
        <name>parentInstance</name>
        <initializer>{ nullptr }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="136" column="1" bodyfile="core/include/LogicalDevice.hpp" bodystart="136" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_device_1aca69dbf04470b2119a9960047035dc57" compoundref="_logical_device_8cpp" startline="512" endline="557">setupDebugUtilsHandler</referencedby>
        <referencedby refid="classvpr_1_1_device_1a158d56e75fab365778e07a84d090b3f7" compoundref="_logical_device_8cpp" startline="308" endline="322">setupValidation</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classvpr_1_1_device_1a7447e429a7fbed43cf2d7ff8df0c2d1a" prot="private" static="no" mutable="no">
        <type>VkSurfaceKHR</type>
        <definition>VkSurfaceKHR vpr::Device::surface</definition>
        <argsstring></argsstring>
        <name>surface</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="137" column="1" bodyfile="core/include/LogicalDevice.hpp" bodystart="137" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_device_1a3b0734cd598d9a64f3c459e9dc4e84ce" compoundref="_logical_device_8cpp" startline="271" endline="297">create</referencedby>
        <referencedby refid="classvpr_1_1_device_1a69ff6decaf1928df17db723214786ec4" compoundref="_logical_device_8cpp" startline="114" endline="117">UpdateSurface</referencedby>
        <referencedby refid="classvpr_1_1_device_1ac71413f7f9988d9479e27f51fc6de197" compoundref="_logical_device_8cpp" startline="413" endline="430">verifyPresentationSupport</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classvpr_1_1_device_1a18421f8e6be40e60ffb5e436b6693658" prot="private" static="no" mutable="yes">
        <type><ref refid="structvpr_1_1_device_data_members" kindref="compound">DeviceDataMembers</ref> *</type>
        <definition>DeviceDataMembers* vpr::Device::dataMembers</definition>
        <argsstring></argsstring>
        <name>dataMembers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="138" column="1" bodyfile="core/include/LogicalDevice.hpp" bodystart="138" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_device_1a3b0734cd598d9a64f3c459e9dc4e84ce" compoundref="_logical_device_8cpp" startline="271" endline="297">create</referencedby>
        <referencedby refid="classvpr_1_1_device_1a8aa0caf9975fd8eb2948156ee1418044" compoundref="_logical_device_8cpp" startline="85" endline="87">DedicatedAllocationExtensionsEnabled</referencedby>
        <referencedby refid="classvpr_1_1_device_1a2c0889e41254c4778c73ab2a6ff6f1ce" compoundref="_logical_device_8cpp" startline="101" endline="112">GetEnabledExtensions</referencedby>
        <referencedby refid="classvpr_1_1_device_1abdb29331fbcc15a242b3f0e82b02beef" compoundref="_logical_device_8cpp" startline="354" endline="373">setupComputeQueues</referencedby>
        <referencedby refid="classvpr_1_1_device_1a165976c19ab59de329855485a9dab5aa" compoundref="_logical_device_8cpp" startline="324" endline="341">setupExtensions</referencedby>
        <referencedby refid="classvpr_1_1_device_1adbe15d529a11af4d7034a2135255e773" compoundref="_logical_device_8cpp" startline="343" endline="352">setupGraphicsQueues</referencedby>
        <referencedby refid="classvpr_1_1_device_1a22ee8e6517d4898282d9d6385545100a" compoundref="_logical_device_8cpp" startline="394" endline="411">setupSparseBindingQueues</referencedby>
        <referencedby refid="classvpr_1_1_device_1aa64b2412561fa0950722c2dc4997da9f" compoundref="_logical_device_8cpp" startline="375" endline="392">setupTransferQueues</referencedby>
        <referencedby refid="classvpr_1_1_device_1a33f34c1c36dc71aa2905bce9e48b3c3f" compoundref="_logical_device_8cpp" startline="156" endline="168">SparseBindingQueue</referencedby>
        <referencedby refid="classvpr_1_1_device_1a1e717b4e39da77afd6658b9df6393ee2" compoundref="_logical_device_8cpp" startline="64" endline="72">~Device</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classvpr_1_1_device_1a9b90a786a5125f158805de055930e36f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::Device::Device</definition>
        <argsstring>(const Device &amp;)=delete</argsstring>
        <name>Device</name>
        <param>
          <type>const <ref refid="classvpr_1_1_device" kindref="compound">Device</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="35" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_device_1a63860a751568f5dbd5c31ec4b26792d9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::Device::Device</definition>
        <argsstring>(Device &amp;&amp;)=delete</argsstring>
        <name>Device</name>
        <param>
          <type><ref refid="classvpr_1_1_device" kindref="compound">Device</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="36" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_device_1aebfab03ee3950f6e85579d0988c659c3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classvpr_1_1_device" kindref="compound">Device</ref> &amp;</type>
        <definition>Device&amp; vpr::Device::operator=</definition>
        <argsstring>(const Device &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classvpr_1_1_device" kindref="compound">Device</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="37" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_device_1a057db1be958feed9799066b2dca2b357" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classvpr_1_1_device" kindref="compound">Device</ref> &amp;</type>
        <definition>Device&amp; vpr::Device::operator=</definition>
        <argsstring>(Device &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classvpr_1_1_device" kindref="compound">Device</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="38" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_device_1ac71413f7f9988d9479e27f51fc6de197" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Device::verifyPresentationSupport</definition>
        <argsstring>()</argsstring>
        <name>verifyPresentationSupport</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="114" column="1" bodyfile="core/src/LogicalDevice.cpp" bodystart="413" bodyend="430"/>
        <references refid="classvpr_1_1_device_1a39687d150080576e3b0c66873f808d37" compoundref="_logical_device_8hpp" startline="135">parent</references>
        <references refid="structvpr_1_1vk_queue_family_indices_1a418003ff72c5aa57cbec198ca1edee4f" compoundref="_logical_device_8hpp" startline="22">vpr::vkQueueFamilyIndices::Present</references>
        <references refid="classvpr_1_1_device_1ae90f098f10ef560b93fb54e29e9578c2" compoundref="_logical_device_8hpp" startline="131">queueFamilyIndices</references>
        <references refid="classvpr_1_1_device_1a7447e429a7fbed43cf2d7ff8df0c2d1a" compoundref="_logical_device_8hpp" startline="137">surface</references>
        <references refid="classvpr_1_1_physical_device_1a00de7d3556d98b1cfda28d1f769f8fa8" compoundref="_physical_device_8cpp" startline="270" endline="272">vpr::PhysicalDevice::vkHandle</references>
        <referencedby refid="classvpr_1_1_device_1a3b0734cd598d9a64f3c459e9dc4e84ce" compoundref="_logical_device_8cpp" startline="271" endline="297">create</referencedby>
        <referencedby refid="classvpr_1_1_device_1a69ff6decaf1928df17db723214786ec4" compoundref="_logical_device_8cpp" startline="114" endline="117">UpdateSurface</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_device_1a97c806a212758d83ed537fbf25cf9fe6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Device::checkSurfaceSupport</definition>
        <argsstring>(const VkSurfaceKHR &amp;surf)</argsstring>
        <name>checkSurfaceSupport</name>
        <param>
          <type>const VkSurfaceKHR &amp;</type>
          <declname>surf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="115" column="1" bodyfile="core/src/LogicalDevice.cpp" bodystart="119" bodyend="123"/>
        <references refid="classvpr_1_1_device_1a39687d150080576e3b0c66873f808d37" compoundref="_logical_device_8hpp" startline="135">parent</references>
        <references refid="structvpr_1_1vk_queue_family_indices_1a418003ff72c5aa57cbec198ca1edee4f" compoundref="_logical_device_8hpp" startline="22">vpr::vkQueueFamilyIndices::Present</references>
        <references refid="classvpr_1_1_device_1ae90f098f10ef560b93fb54e29e9578c2" compoundref="_logical_device_8hpp" startline="131">queueFamilyIndices</references>
        <references refid="classvpr_1_1_physical_device_1a00de7d3556d98b1cfda28d1f769f8fa8" compoundref="_physical_device_8cpp" startline="270" endline="272">vpr::PhysicalDevice::vkHandle</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_device_1a4884447888b9c8aacc288591056db19d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkDeviceQueueCreateInfo</type>
        <definition>VkDeviceQueueCreateInfo vpr::Device::setupQueueFamily</definition>
        <argsstring>(const VkQueueFamilyProperties &amp;family_properties)</argsstring>
        <name>setupQueueFamily</name>
        <param>
          <type>const VkQueueFamilyProperties &amp;</type>
          <declname>family_properties</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="116" column="1" bodyfile="core/src/LogicalDevice.cpp" bodystart="432" bodyend="436"/>
        <references refid="namespacevpr_1a263af5b003f0153684813cd1f0647516" compoundref="_create_info_base_8hpp" startline="53">vpr::vk_device_queue_create_info_base</references>
        <referencedby refid="classvpr_1_1_device_1abdb29331fbcc15a242b3f0e82b02beef" compoundref="_logical_device_8cpp" startline="354" endline="373">setupComputeQueues</referencedby>
        <referencedby refid="classvpr_1_1_device_1adbe15d529a11af4d7034a2135255e773" compoundref="_logical_device_8cpp" startline="343" endline="352">setupGraphicsQueues</referencedby>
        <referencedby refid="classvpr_1_1_device_1a22ee8e6517d4898282d9d6385545100a" compoundref="_logical_device_8cpp" startline="394" endline="411">setupSparseBindingQueues</referencedby>
        <referencedby refid="classvpr_1_1_device_1aa64b2412561fa0950722c2dc4997da9f" compoundref="_logical_device_8cpp" startline="375" endline="392">setupTransferQueues</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_device_1a3b0734cd598d9a64f3c459e9dc4e84ce" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Device::create</definition>
        <argsstring>(const VprExtensionPack *extensions, const char *const *layers, const uint32_t layer_count)</argsstring>
        <name>create</name>
        <param>
          <type>const <ref refid="structvpr_1_1_vpr_extension_pack" kindref="compound">VprExtensionPack</ref> *</type>
          <declname>extensions</declname>
        </param>
        <param>
          <type>const char *const *</type>
          <declname>layers</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>layer_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="117" column="1" bodyfile="core/src/LogicalDevice.cpp" bodystart="271" bodyend="297"/>
        <references refid="classvpr_1_1_device_1a3767828e10f7ebb7eb0e3fff60732c96" compoundref="_logical_device_8hpp" startline="133">createInfo</references>
        <references refid="classvpr_1_1_device_1a18421f8e6be40e60ffb5e436b6693658" compoundref="_logical_device_8hpp" startline="138">dataMembers</references>
        <references refid="classvpr_1_1_physical_device_1addc7471aceef1ca343cc1b6e5c242278" compoundref="_physical_device_8cpp" startline="258" endline="260">vpr::PhysicalDevice::GetFeatures</references>
        <references refid="classvpr_1_1_device_1a5e6c89cf59912690370c11d4c7c2648a" compoundref="_logical_device_8hpp" startline="132">handle</references>
        <references refid="classvpr_1_1_device_1a39687d150080576e3b0c66873f808d37" compoundref="_logical_device_8hpp" startline="135">parent</references>
        <references refid="structvpr_1_1_device_data_members_1a2749c85ee4120b3d2c68bb746db6035a" compoundref="_logical_device_8cpp" startline="21">vpr::DeviceDataMembers::queueInfos</references>
        <references refid="classvpr_1_1_device_1aca69dbf04470b2119a9960047035dc57" compoundref="_logical_device_8cpp" startline="512" endline="557">setupDebugUtilsHandler</references>
        <references refid="classvpr_1_1_device_1a165976c19ab59de329855485a9dab5aa" compoundref="_logical_device_8cpp" startline="324" endline="341">setupExtensions</references>
        <references refid="classvpr_1_1_device_1af52c3b24f6bca1308a5170eb3acfeb11" compoundref="_logical_device_8cpp" startline="299" endline="306">setupQueues</references>
        <references refid="classvpr_1_1_device_1a158d56e75fab365778e07a84d090b3f7" compoundref="_logical_device_8cpp" startline="308" endline="322">setupValidation</references>
        <references refid="classvpr_1_1_device_1a7447e429a7fbed43cf2d7ff8df0c2d1a" compoundref="_logical_device_8hpp" startline="137">surface</references>
        <references refid="classvpr_1_1_device_1ac71413f7f9988d9479e27f51fc6de197" compoundref="_logical_device_8cpp" startline="413" endline="430">verifyPresentationSupport</references>
        <references refid="namespacevpr_1a34a10f7084a96a1b3c6862a3e1146ec6" compoundref="_create_info_base_8hpp" startline="63">vpr::vk_device_create_info_base</references>
        <references refid="vk_assert_8hpp_1a92c2e07b0d021fc331be70a65c61dacc" compoundref="vk_assert_8hpp" startline="9">VkAssert</references>
        <references refid="classvpr_1_1_physical_device_1a00de7d3556d98b1cfda28d1f769f8fa8" compoundref="_physical_device_8cpp" startline="270" endline="272">vpr::PhysicalDevice::vkHandle</references>
        <referencedby refid="classvpr_1_1_device_1ad1a8ebd06d5d8b3de5ce0c8d1ce93277" compoundref="_logical_device_8cpp" startline="54" endline="62">Device</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_device_1af52c3b24f6bca1308a5170eb3acfeb11" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Device::setupQueues</definition>
        <argsstring>()</argsstring>
        <name>setupQueues</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="118" column="1" bodyfile="core/src/LogicalDevice.cpp" bodystart="299" bodyend="306"/>
        <references refid="classvpr_1_1_device_1abdb29331fbcc15a242b3f0e82b02beef" compoundref="_logical_device_8cpp" startline="354" endline="373">setupComputeQueues</references>
        <references refid="classvpr_1_1_device_1adbe15d529a11af4d7034a2135255e773" compoundref="_logical_device_8cpp" startline="343" endline="352">setupGraphicsQueues</references>
        <references refid="classvpr_1_1_device_1a22ee8e6517d4898282d9d6385545100a" compoundref="_logical_device_8cpp" startline="394" endline="411">setupSparseBindingQueues</references>
        <references refid="classvpr_1_1_device_1aa64b2412561fa0950722c2dc4997da9f" compoundref="_logical_device_8cpp" startline="375" endline="392">setupTransferQueues</references>
        <referencedby refid="classvpr_1_1_device_1a3b0734cd598d9a64f3c459e9dc4e84ce" compoundref="_logical_device_8cpp" startline="271" endline="297">create</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_device_1a158d56e75fab365778e07a84d090b3f7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Device::setupValidation</definition>
        <argsstring>(const char *const *layers, const uint32_t layer_count)</argsstring>
        <name>setupValidation</name>
        <param>
          <type>const char *const *</type>
          <declname>layers</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>layer_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="119" column="1" bodyfile="core/src/LogicalDevice.cpp" bodystart="308" bodyend="322"/>
        <references refid="classvpr_1_1_device_1a3767828e10f7ebb7eb0e3fff60732c96" compoundref="_logical_device_8hpp" startline="133">createInfo</references>
        <references refid="classvpr_1_1_device_1afbd33fc31f5c5e1859faf0130e551ed6" compoundref="_logical_device_8hpp" startline="136">parentInstance</references>
        <references refid="classvpr_1_1_instance_1a34466d6fcc286ef1281b7bdb091ea754" compoundref="_instance_8cpp" startline="74" endline="76">vpr::Instance::ValidationEnabled</references>
        <referencedby refid="classvpr_1_1_device_1a3b0734cd598d9a64f3c459e9dc4e84ce" compoundref="_logical_device_8cpp" startline="271" endline="297">create</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_device_1a165976c19ab59de329855485a9dab5aa" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Device::setupExtensions</definition>
        <argsstring>(const VprExtensionPack *extensions)</argsstring>
        <name>setupExtensions</name>
        <param>
          <type>const <ref refid="structvpr_1_1_vpr_extension_pack" kindref="compound">VprExtensionPack</ref> *</type>
          <declname>extensions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="120" column="1" bodyfile="core/src/LogicalDevice.cpp" bodystart="324" bodyend="341"/>
        <references refid="structvpr_1_1_device_data_members_1a74aa0fff140d4e0d31d913975a186f31" compoundref="_logical_device_8cpp" startline="493" endline="510">vpr::DeviceDataMembers::checkDedicatedAllocExtensions</references>
        <references refid="classvpr_1_1_device_1a3767828e10f7ebb7eb0e3fff60732c96" compoundref="_logical_device_8hpp" startline="133">createInfo</references>
        <references refid="classvpr_1_1_device_1a18421f8e6be40e60ffb5e436b6693658" compoundref="_logical_device_8hpp" startline="138">dataMembers</references>
        <references refid="structvpr_1_1_device_data_members_1afdb20df24cdc3a4d75ba41f3677e4f3f" compoundref="_logical_device_8cpp" startline="22">vpr::DeviceDataMembers::enableDedicatedAllocations</references>
        <references refid="structvpr_1_1_device_data_members_1a449cf695be146d6e160a8976221fc58a" compoundref="_logical_device_8cpp" startline="17">vpr::DeviceDataMembers::enabledExtensions</references>
        <references refid="structvpr_1_1_device_data_members_1a9e4b2ed2f540350ec9642dbf2e24b1d4" compoundref="_logical_device_8cpp" startline="449" endline="459">vpr::DeviceDataMembers::prepareOptionalExtensions</references>
        <references refid="structvpr_1_1_device_data_members_1a3d083fd1add161c9cc785e0a57aa6583" compoundref="_logical_device_8cpp" startline="438" endline="447">vpr::DeviceDataMembers::prepareRequiredExtensions</references>
        <referencedby refid="classvpr_1_1_device_1a3b0734cd598d9a64f3c459e9dc4e84ce" compoundref="_logical_device_8cpp" startline="271" endline="297">create</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_device_1adbe15d529a11af4d7034a2135255e773" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Device::setupGraphicsQueues</definition>
        <argsstring>()</argsstring>
        <name>setupGraphicsQueues</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="121" column="1" bodyfile="core/src/LogicalDevice.cpp" bodystart="343" bodyend="352"/>
        <references refid="classvpr_1_1_device_1a18421f8e6be40e60ffb5e436b6693658" compoundref="_logical_device_8hpp" startline="138">dataMembers</references>
        <references refid="classvpr_1_1_physical_device_1af443c2a585d182166c464f252782a57b" compoundref="_physical_device_8cpp" startline="237" endline="239">vpr::PhysicalDevice::GetQueueFamilyIndex</references>
        <references refid="classvpr_1_1_physical_device_1a2ee4f96b16a9762953ecad3b658d84e6" compoundref="_physical_device_8cpp" startline="241" endline="252">vpr::PhysicalDevice::GetQueueFamilyProperties</references>
        <references refid="structvpr_1_1vk_queue_family_indices_1ad7def5d08c30d9fcb6992455de1c868a" compoundref="_logical_device_8hpp" startline="17">vpr::vkQueueFamilyIndices::Graphics</references>
        <references refid="structvpr_1_1queue__priorities__t_1ad917c2184f8cdeef1b9b298aee35090a" compoundref="_logical_device_8cpp" startline="44">vpr::queue_priorities_t::graphics</references>
        <references refid="classvpr_1_1_device_1a1395be5571d5d2961aacb0c3727ef8b0" compoundref="_logical_device_8hpp" startline="127">numGraphicsQueues</references>
        <references refid="classvpr_1_1_device_1a39687d150080576e3b0c66873f808d37" compoundref="_logical_device_8hpp" startline="135">parent</references>
        <references refid="namespacevpr_1a41f4e9004d0d504471306d39072c24e0">vpr::queue_priorities</references>
        <references refid="classvpr_1_1_device_1ae90f098f10ef560b93fb54e29e9578c2" compoundref="_logical_device_8hpp" startline="131">queueFamilyIndices</references>
        <references refid="structvpr_1_1_device_data_members_1a2749c85ee4120b3d2c68bb746db6035a" compoundref="_logical_device_8cpp" startline="21">vpr::DeviceDataMembers::queueInfos</references>
        <references refid="classvpr_1_1_device_1a4884447888b9c8aacc288591056db19d" compoundref="_logical_device_8cpp" startline="432" endline="436">setupQueueFamily</references>
        <referencedby refid="classvpr_1_1_device_1af52c3b24f6bca1308a5170eb3acfeb11" compoundref="_logical_device_8cpp" startline="299" endline="306">setupQueues</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_device_1abdb29331fbcc15a242b3f0e82b02beef" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Device::setupComputeQueues</definition>
        <argsstring>()</argsstring>
        <name>setupComputeQueues</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="122" column="1" bodyfile="core/src/LogicalDevice.cpp" bodystart="354" bodyend="373"/>
        <references refid="structvpr_1_1vk_queue_family_indices_1a8b891aa09d67ff61deb750637d3f06ca" compoundref="_logical_device_8hpp" startline="18">vpr::vkQueueFamilyIndices::Compute</references>
        <references refid="structvpr_1_1queue__priorities__t_1a76694cbd8084cf8b028d756b78977704" compoundref="_logical_device_8cpp" startline="46">vpr::queue_priorities_t::compute</references>
        <references refid="classvpr_1_1_device_1a18421f8e6be40e60ffb5e436b6693658" compoundref="_logical_device_8hpp" startline="138">dataMembers</references>
        <references refid="classvpr_1_1_physical_device_1af443c2a585d182166c464f252782a57b" compoundref="_physical_device_8cpp" startline="237" endline="239">vpr::PhysicalDevice::GetQueueFamilyIndex</references>
        <references refid="classvpr_1_1_physical_device_1a2ee4f96b16a9762953ecad3b658d84e6" compoundref="_physical_device_8cpp" startline="241" endline="252">vpr::PhysicalDevice::GetQueueFamilyProperties</references>
        <references refid="structvpr_1_1vk_queue_family_indices_1ad7def5d08c30d9fcb6992455de1c868a" compoundref="_logical_device_8hpp" startline="17">vpr::vkQueueFamilyIndices::Graphics</references>
        <references refid="classvpr_1_1_device_1a894511aa70498ce4c6d4f90234fdbeb1" compoundref="_logical_device_8hpp" startline="128">numComputeQueues</references>
        <references refid="classvpr_1_1_device_1a1395be5571d5d2961aacb0c3727ef8b0" compoundref="_logical_device_8hpp" startline="127">numGraphicsQueues</references>
        <references refid="classvpr_1_1_device_1a39687d150080576e3b0c66873f808d37" compoundref="_logical_device_8hpp" startline="135">parent</references>
        <references refid="namespacevpr_1a41f4e9004d0d504471306d39072c24e0">vpr::queue_priorities</references>
        <references refid="classvpr_1_1_device_1ae90f098f10ef560b93fb54e29e9578c2" compoundref="_logical_device_8hpp" startline="131">queueFamilyIndices</references>
        <references refid="structvpr_1_1_device_data_members_1a2749c85ee4120b3d2c68bb746db6035a" compoundref="_logical_device_8cpp" startline="21">vpr::DeviceDataMembers::queueInfos</references>
        <references refid="classvpr_1_1_device_1a4884447888b9c8aacc288591056db19d" compoundref="_logical_device_8cpp" startline="432" endline="436">setupQueueFamily</references>
        <referencedby refid="classvpr_1_1_device_1af52c3b24f6bca1308a5170eb3acfeb11" compoundref="_logical_device_8cpp" startline="299" endline="306">setupQueues</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_device_1aa64b2412561fa0950722c2dc4997da9f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Device::setupTransferQueues</definition>
        <argsstring>()</argsstring>
        <name>setupTransferQueues</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="123" column="1" bodyfile="core/src/LogicalDevice.cpp" bodystart="375" bodyend="392"/>
        <references refid="classvpr_1_1_device_1a18421f8e6be40e60ffb5e436b6693658" compoundref="_logical_device_8hpp" startline="138">dataMembers</references>
        <references refid="classvpr_1_1_physical_device_1af443c2a585d182166c464f252782a57b" compoundref="_physical_device_8cpp" startline="237" endline="239">vpr::PhysicalDevice::GetQueueFamilyIndex</references>
        <references refid="classvpr_1_1_physical_device_1a2ee4f96b16a9762953ecad3b658d84e6" compoundref="_physical_device_8cpp" startline="241" endline="252">vpr::PhysicalDevice::GetQueueFamilyProperties</references>
        <references refid="structvpr_1_1vk_queue_family_indices_1ad7def5d08c30d9fcb6992455de1c868a" compoundref="_logical_device_8hpp" startline="17">vpr::vkQueueFamilyIndices::Graphics</references>
        <references refid="classvpr_1_1_device_1a1395be5571d5d2961aacb0c3727ef8b0" compoundref="_logical_device_8hpp" startline="127">numGraphicsQueues</references>
        <references refid="classvpr_1_1_device_1a71fb8d05fa54f5b46e2a93d69b4a9e1f" compoundref="_logical_device_8hpp" startline="129">numTransferQueues</references>
        <references refid="classvpr_1_1_device_1a39687d150080576e3b0c66873f808d37" compoundref="_logical_device_8hpp" startline="135">parent</references>
        <references refid="namespacevpr_1a41f4e9004d0d504471306d39072c24e0">vpr::queue_priorities</references>
        <references refid="classvpr_1_1_device_1ae90f098f10ef560b93fb54e29e9578c2" compoundref="_logical_device_8hpp" startline="131">queueFamilyIndices</references>
        <references refid="structvpr_1_1_device_data_members_1a2749c85ee4120b3d2c68bb746db6035a" compoundref="_logical_device_8cpp" startline="21">vpr::DeviceDataMembers::queueInfos</references>
        <references refid="classvpr_1_1_device_1a4884447888b9c8aacc288591056db19d" compoundref="_logical_device_8cpp" startline="432" endline="436">setupQueueFamily</references>
        <references refid="structvpr_1_1vk_queue_family_indices_1a28ae358035391181d9eaa145a9eed738" compoundref="_logical_device_8hpp" startline="19">vpr::vkQueueFamilyIndices::Transfer</references>
        <references refid="structvpr_1_1queue__priorities__t_1a771c074b241d2c2e84c2ba55735d23a9" compoundref="_logical_device_8cpp" startline="45">vpr::queue_priorities_t::transfer</references>
        <referencedby refid="classvpr_1_1_device_1af52c3b24f6bca1308a5170eb3acfeb11" compoundref="_logical_device_8cpp" startline="299" endline="306">setupQueues</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_device_1a22ee8e6517d4898282d9d6385545100a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Device::setupSparseBindingQueues</definition>
        <argsstring>()</argsstring>
        <name>setupSparseBindingQueues</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="124" column="1" bodyfile="core/src/LogicalDevice.cpp" bodystart="394" bodyend="411"/>
        <references refid="classvpr_1_1_device_1a18421f8e6be40e60ffb5e436b6693658" compoundref="_logical_device_8hpp" startline="138">dataMembers</references>
        <references refid="classvpr_1_1_physical_device_1af443c2a585d182166c464f252782a57b" compoundref="_physical_device_8cpp" startline="237" endline="239">vpr::PhysicalDevice::GetQueueFamilyIndex</references>
        <references refid="classvpr_1_1_physical_device_1a2ee4f96b16a9762953ecad3b658d84e6" compoundref="_physical_device_8cpp" startline="241" endline="252">vpr::PhysicalDevice::GetQueueFamilyProperties</references>
        <references refid="structvpr_1_1vk_queue_family_indices_1ad7def5d08c30d9fcb6992455de1c868a" compoundref="_logical_device_8hpp" startline="17">vpr::vkQueueFamilyIndices::Graphics</references>
        <references refid="classvpr_1_1_device_1a1395be5571d5d2961aacb0c3727ef8b0" compoundref="_logical_device_8hpp" startline="127">numGraphicsQueues</references>
        <references refid="classvpr_1_1_device_1a84c3631b86e77b5a52e9933a8309b7c7" compoundref="_logical_device_8hpp" startline="130">numSparseBindingQueues</references>
        <references refid="classvpr_1_1_device_1a39687d150080576e3b0c66873f808d37" compoundref="_logical_device_8hpp" startline="135">parent</references>
        <references refid="namespacevpr_1a41f4e9004d0d504471306d39072c24e0">vpr::queue_priorities</references>
        <references refid="classvpr_1_1_device_1ae90f098f10ef560b93fb54e29e9578c2" compoundref="_logical_device_8hpp" startline="131">queueFamilyIndices</references>
        <references refid="structvpr_1_1_device_data_members_1a2749c85ee4120b3d2c68bb746db6035a" compoundref="_logical_device_8cpp" startline="21">vpr::DeviceDataMembers::queueInfos</references>
        <references refid="classvpr_1_1_device_1a4884447888b9c8aacc288591056db19d" compoundref="_logical_device_8cpp" startline="432" endline="436">setupQueueFamily</references>
        <references refid="structvpr_1_1queue__priorities__t_1a821fc74d08d8df5bec19d8e85496a797" compoundref="_logical_device_8cpp" startline="47">vpr::queue_priorities_t::sparse_binding</references>
        <references refid="structvpr_1_1vk_queue_family_indices_1ae0e29d580f2551312fdfcc2f1c1f104b" compoundref="_logical_device_8hpp" startline="20">vpr::vkQueueFamilyIndices::SparseBinding</references>
        <referencedby refid="classvpr_1_1_device_1af52c3b24f6bca1308a5170eb3acfeb11" compoundref="_logical_device_8cpp" startline="299" endline="306">setupQueues</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_device_1aca69dbf04470b2119a9960047035dc57" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Device::setupDebugUtilsHandler</definition>
        <argsstring>()</argsstring>
        <name>setupDebugUtilsHandler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="125" column="1" bodyfile="core/src/LogicalDevice.cpp" bodystart="512" bodyend="557"/>
        <references refid="classvpr_1_1_device_1a8545ca31dfd6a35a0370c7de5b0cc64c" compoundref="_logical_device_8hpp" startline="134">debugUtilsHandler</references>
        <references refid="classvpr_1_1_device_1a5e6c89cf59912690370c11d4c7c2648a" compoundref="_logical_device_8hpp" startline="132">handle</references>
        <references refid="classvpr_1_1_instance_1ab9f92d523b1cc59715c6d1b237be3cea" compoundref="_instance_8cpp" startline="78" endline="89">vpr::Instance::HasExtension</references>
        <references refid="classvpr_1_1_device_1afbd33fc31f5c5e1859faf0130e551ed6" compoundref="_logical_device_8hpp" startline="136">parentInstance</references>
        <references refid="classvpr_1_1_instance_1a34466d6fcc286ef1281b7bdb091ea754" compoundref="_instance_8cpp" startline="74" endline="76">vpr::Instance::ValidationEnabled</references>
        <references refid="structvpr_1_1_vk_debug_utils_functions_1a750cf21adea7c5cff99f58e372a3b111" compoundref="_vk_debug_utils_8hpp" startline="18">vpr::VkDebugUtilsFunctions::vkCmdBeginDebugUtilsLabel</references>
        <references refid="structvpr_1_1_vk_debug_utils_functions_1a8de2e9db851ea7651b92a34547c08f7d" compoundref="_vk_debug_utils_8hpp" startline="19">vpr::VkDebugUtilsFunctions::vkCmdEndDebugUtilsLabel</references>
        <references refid="structvpr_1_1_vk_debug_utils_functions_1a4efd3a3ee8d2451da800ca5665dc27f2" compoundref="_vk_debug_utils_8hpp" startline="20">vpr::VkDebugUtilsFunctions::vkCmdInsertDebugUtilsLabel</references>
        <references refid="structvpr_1_1_vk_debug_utils_functions_1ad6ededf9664626a2e54ad81088d74b0e" compoundref="_vk_debug_utils_8hpp" startline="21">vpr::VkDebugUtilsFunctions::vkCreateDebugUtilsMessenger</references>
        <references refid="structvpr_1_1_vk_debug_utils_functions_1a0db6a9f2bfb7fa348c895adc5d6e929b" compoundref="_vk_debug_utils_8hpp" startline="22">vpr::VkDebugUtilsFunctions::vkDestroyDebugUtilsMessenger</references>
        <references refid="structvpr_1_1_vk_debug_utils_functions_1a9e6a7e8813980198747d5336c8bb5bae" compoundref="_vk_debug_utils_8hpp" startline="16">vpr::VkDebugUtilsFunctions::vkQueueBeginDebugUtilsLabel</references>
        <references refid="structvpr_1_1_vk_debug_utils_functions_1a476791e8ab0d26774dec3ff8bb2db36e" compoundref="_vk_debug_utils_8hpp" startline="17">vpr::VkDebugUtilsFunctions::vkQueueEndDebugUtilsLabel</references>
        <references refid="structvpr_1_1_vk_debug_utils_functions_1a5b6d7096f776b8666bbfedfacb45eeac" compoundref="_vk_debug_utils_8hpp" startline="14">vpr::VkDebugUtilsFunctions::vkSetDebugUtilsObjectName</references>
        <references refid="structvpr_1_1_vk_debug_utils_functions_1ac46e3a6b7520cc394f858c7e4929a587" compoundref="_vk_debug_utils_8hpp" startline="15">vpr::VkDebugUtilsFunctions::vkSetDebugUtilsObjectTag</references>
        <references refid="structvpr_1_1_vk_debug_utils_functions_1a318aa2ff1139e618c89725fa17664737" compoundref="_vk_debug_utils_8hpp" startline="23">vpr::VkDebugUtilsFunctions::vkSubmitDebugUtilsMessage</references>
        <referencedby refid="classvpr_1_1_device_1a3b0734cd598d9a64f3c459e9dc4e84ce" compoundref="_logical_device_8cpp" startline="271" endline="297">create</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classvpr_1_1_device_1ad1a8ebd06d5d8b3de5ce0c8d1ce93277" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::Device::Device</definition>
        <argsstring>(const Instance *instance, const PhysicalDevice *p_device, VkSurfaceKHR surface=VK_NULL_HANDLE, const VprExtensionPack *extensions=nullptr, const char *const *layer_names=nullptr, const uint32_t layer_count=0)</argsstring>
        <name>Device</name>
        <param>
          <type>const <ref refid="classvpr_1_1_instance" kindref="compound">Instance</ref> *</type>
          <declname>instance</declname>
        </param>
        <param>
          <type>const <ref refid="classvpr_1_1_physical_device" kindref="compound">PhysicalDevice</ref> *</type>
          <declname>p_device</declname>
        </param>
        <param>
          <type>VkSurfaceKHR</type>
          <declname>surface</declname>
          <defval>VK_NULL_HANDLE</defval>
        </param>
        <param>
          <type>const <ref refid="structvpr_1_1_vpr_extension_pack" kindref="compound">VprExtensionPack</ref> *</type>
          <declname>extensions</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const char *const *</type>
          <declname>layer_names</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>layer_count</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Constructs a new VkDevice instance. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Parent instance this device belongs to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_device</parametername>
</parameternamelist>
<parameterdescription>
<para>Physical device that this device operators over and on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VkSurfaceKHR</parametername>
</parameternamelist>
<parameterdescription>
<para>Surface this device will be presenting to, if applicable. Used to verify presentation support for the current configuration. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extensions</parametername>
</parameternamelist>
<parameterdescription>
<para>Used to decide what device-level extensions should be loaded. Throws if unable to load a required extension. If left to null, will only load what is required for presentation and try to load allocation extensions to improve that system </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layer_names</parametername>
</parameternamelist>
<parameterdescription>
<para>Names of layers to load - If left to null and the parent instance has validation enabled, uses the VK_LAYER_LUNARG_standard_validation set </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="49" column="1" bodyfile="core/src/LogicalDevice.cpp" bodystart="54" bodyend="62"/>
        <references refid="classvpr_1_1_device_1a3b0734cd598d9a64f3c459e9dc4e84ce" compoundref="_logical_device_8cpp" startline="271" endline="297">create</references>
        <references refid="namespacevpr_1a4bf381588c8fc655f17c38e1fd78739e" compoundref="_logical_device_8cpp" startline="36">vpr::RECOMMENDED_EXTENSIONS</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_device_1a1e717b4e39da77afd6658b9df6393ee2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::Device::~Device</definition>
        <argsstring>()</argsstring>
        <name>~Device</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="50" column="1" bodyfile="core/src/LogicalDevice.cpp" bodystart="64" bodyend="72"/>
        <references refid="classvpr_1_1_device_1a18421f8e6be40e60ffb5e436b6693658" compoundref="_logical_device_8hpp" startline="138">dataMembers</references>
        <references refid="classvpr_1_1_device_1a8545ca31dfd6a35a0370c7de5b0cc64c" compoundref="_logical_device_8hpp" startline="134">debugUtilsHandler</references>
        <references refid="classvpr_1_1_device_1a5e6c89cf59912690370c11d4c7c2648a" compoundref="_logical_device_8hpp" startline="132">handle</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_device_1a59882855173bef0b13a17b376ea01d45" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const VkDevice &amp;</type>
        <definition>const VkDevice &amp; vpr::Device::vkHandle</definition>
        <argsstring>() const</argsstring>
        <name>vkHandle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="52" column="1" bodyfile="core/src/LogicalDevice.cpp" bodystart="74" bodyend="76"/>
        <references refid="classvpr_1_1_device_1a5e6c89cf59912690370c11d4c7c2648a" compoundref="_logical_device_8hpp" startline="132">handle</references>
        <referencedby refid="classvpr_1_1_device_1a6a2bdc1c9de2b94e330ba75cb4a0a87b" compoundref="_logical_device_8cpp" startline="144" endline="154">ComputeQueue</referencedby>
        <referencedby refid="structvpr_1_1_swapchain_impl_1a26979c4e9803da67ef61bf098377b341" compoundref="_swapchain_8cpp" startline="88" endline="97">vpr::SwapchainImpl::create</referencedby>
        <referencedby refid="classvpr_1_1_image_1a9f06292f9e5c640e706783f5dffdbb7d" compoundref="_image_deprecated_8cpp" startline="55" endline="58">vpr::Image::CreateView</referencedby>
        <referencedby refid="classvpr_1_1_image_1a873f753f67d45583eee998d59885d8c5" compoundref="_image_deprecated_8cpp" startline="36" endline="48">vpr::Image::Destroy</referencedby>
        <referencedby refid="structvpr_1_1_swapchain_impl_1a3c2995780e90567ea32d6b6f72c5d891" compoundref="_swapchain_8cpp" startline="207" endline="221">vpr::SwapchainImpl::destroy</referencedby>
        <referencedby refid="classvpr_1_1_device_1a6914a8dd1054f00fbdc3454e55b3c14b" compoundref="_logical_device_8cpp" startline="233" endline="249">GeneralQueue</referencedby>
        <referencedby refid="classvpr_1_1_device_1ab4de02f4fcdb84f487c8e8f598cc3a77" compoundref="_logical_device_8cpp" startline="125" endline="130">GraphicsQueue</referencedby>
        <referencedby refid="structvpr_1_1_swapchain_impl_1aaded5613928f1e39c1a61ac25be8bf88" compoundref="_swapchain_8cpp" startline="338" endline="357">vpr::SwapchainImpl::setupImageViews</referencedby>
        <referencedby refid="structvpr_1_1_swapchain_impl_1acc94e08e83ec3857bffdea08e9b4bf65" compoundref="_swapchain_8cpp" startline="331" endline="336">vpr::SwapchainImpl::setupSwapImages</referencedby>
        <referencedby refid="classvpr_1_1_device_1af7b303fd1d3a080aa4d160f7c3f10ad5" compoundref="_logical_device_8cpp" startline="132" endline="142">TransferQueue</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_device_1af97db14ae016b678dcb2be6061cac5bd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vpr::Device::HasDedicatedComputeQueues</definition>
        <argsstring>() const</argsstring>
        <name>HasDedicatedComputeQueues</name>
        <briefdescription>
<para>Returns whether or not the currently active physical device, along with the logical device, supports/has queues dedicated compute operations. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="54" column="1" bodyfile="core/src/LogicalDevice.cpp" bodystart="78" bodyend="83"/>
        <references refid="structvpr_1_1vk_queue_family_indices_1a8b891aa09d67ff61deb750637d3f06ca" compoundref="_logical_device_8hpp" startline="18">vpr::vkQueueFamilyIndices::Compute</references>
        <references refid="structvpr_1_1vk_queue_family_indices_1ad7def5d08c30d9fcb6992455de1c868a" compoundref="_logical_device_8hpp" startline="17">vpr::vkQueueFamilyIndices::Graphics</references>
        <references refid="classvpr_1_1_device_1ae90f098f10ef560b93fb54e29e9578c2" compoundref="_logical_device_8hpp" startline="131">queueFamilyIndices</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_device_1a8aa0caf9975fd8eb2948156ee1418044" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vpr::Device::DedicatedAllocationExtensionsEnabled</definition>
        <argsstring>() const noexcept</argsstring>
        <name>DedicatedAllocationExtensionsEnabled</name>
        <briefdescription>
<para>Returns true when the VK_KHR_dedicated_allocation extension and it&apos;s cohort has been loaded. </para>        </briefdescription>
        <detaileddescription>
<para>Used by memory allocation systems to improve fit and potential performance of certain memory allocations. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="56" column="1" bodyfile="core/src/LogicalDevice.cpp" bodystart="85" bodyend="87"/>
        <references refid="classvpr_1_1_device_1a18421f8e6be40e60ffb5e436b6693658" compoundref="_logical_device_8hpp" startline="138">dataMembers</references>
        <references refid="structvpr_1_1_device_data_members_1afdb20df24cdc3a4d75ba41f3677e4f3f" compoundref="_logical_device_8cpp" startline="22">vpr::DeviceDataMembers::enableDedicatedAllocations</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_device_1a2f4378c92e12f529df785293c3a3a40f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vpr::Device::HasExtension</definition>
        <argsstring>(const char *name) const noexcept</argsstring>
        <name>HasExtension</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="57" column="1" bodyfile="core/src/LogicalDevice.cpp" bodystart="89" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_device_1a2c0889e41254c4778c73ab2a6ff6f1ce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Device::GetEnabledExtensions</definition>
        <argsstring>(size_t *num_extensions, char **extensions) const</argsstring>
        <name>GetEnabledExtensions</name>
        <param>
          <type>size_t *</type>
          <declname>num_extensions</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>extensions</declname>
        </param>
        <briefdescription>
<para>Important note - uses strdup, so the data must be free&apos;d by the user once they are done reading the extensions array! </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="59" column="1" bodyfile="core/src/LogicalDevice.cpp" bodystart="101" bodyend="112"/>
        <references refid="classvpr_1_1_device_1a18421f8e6be40e60ffb5e436b6693658" compoundref="_logical_device_8hpp" startline="138">dataMembers</references>
        <references refid="structvpr_1_1_device_data_members_1a449cf695be146d6e160a8976221fc58a" compoundref="_logical_device_8cpp" startline="17">vpr::DeviceDataMembers::enabledExtensions</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_device_1a69ff6decaf1928df17db723214786ec4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Device::UpdateSurface</definition>
        <argsstring>(VkSurfaceKHR new_surface)</argsstring>
        <name>UpdateSurface</name>
        <param>
          <type>VkSurfaceKHR</type>
          <declname>new_surface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="60" column="1" bodyfile="core/src/LogicalDevice.cpp" bodystart="114" bodyend="117"/>
        <references refid="classvpr_1_1_device_1a7447e429a7fbed43cf2d7ff8df0c2d1a" compoundref="_logical_device_8hpp" startline="137">surface</references>
        <references refid="classvpr_1_1_device_1ac71413f7f9988d9479e27f51fc6de197" compoundref="_logical_device_8cpp" startline="413" endline="430">verifyPresentationSupport</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_device_1a6914a8dd1054f00fbdc3454e55b3c14b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>VkQueue</type>
        <definition>VkQueue vpr::Device::GeneralQueue</definition>
        <argsstring>(const uint32_t &amp;idx=0) const</argsstring>
        <name>GeneralQueue</name>
        <param>
          <type>const uint32_t &amp;</type>
          <declname>idx</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>! Returns queue that has support for most operation types. </para>        </briefdescription>
        <detaileddescription>
<para>First checks for graphics, compute, and transfer. Then proceeds to graphics and compute. Lastly, it will just return a graphics-only queue and log a warning. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>- in the case of a device with several &quot;generalized&quot; queues, selects which queue to return. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="66" column="1" bodyfile="core/src/LogicalDevice.cpp" bodystart="233" bodyend="249"/>
        <references refid="classvpr_1_1_physical_device_1af443c2a585d182166c464f252782a57b" compoundref="_physical_device_8cpp" startline="237" endline="239">vpr::PhysicalDevice::GetQueueFamilyIndex</references>
        <references refid="structvpr_1_1vk_queue_family_indices_1ad7def5d08c30d9fcb6992455de1c868a" compoundref="_logical_device_8hpp" startline="17">vpr::vkQueueFamilyIndices::Graphics</references>
        <references refid="classvpr_1_1_device_1a39687d150080576e3b0c66873f808d37" compoundref="_logical_device_8hpp" startline="135">parent</references>
        <references refid="classvpr_1_1_device_1ae90f098f10ef560b93fb54e29e9578c2" compoundref="_logical_device_8hpp" startline="131">queueFamilyIndices</references>
        <references refid="classvpr_1_1_device_1a59882855173bef0b13a17b376ea01d45" compoundref="_logical_device_8cpp" startline="74" endline="76">vkHandle</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_device_1ab4de02f4fcdb84f487c8e8f598cc3a77" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>VkQueue</type>
        <definition>VkQueue vpr::Device::GraphicsQueue</definition>
        <argsstring>(const uint32_t &amp;idx=0) const</argsstring>
        <name>GraphicsQueue</name>
        <param>
          <type>const uint32_t &amp;</type>
          <declname>idx</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="71" column="1" bodyfile="core/src/LogicalDevice.cpp" bodystart="125" bodyend="130"/>
        <references refid="structvpr_1_1vk_queue_family_indices_1ad7def5d08c30d9fcb6992455de1c868a" compoundref="_logical_device_8hpp" startline="17">vpr::vkQueueFamilyIndices::Graphics</references>
        <references refid="classvpr_1_1_device_1a1395be5571d5d2961aacb0c3727ef8b0" compoundref="_logical_device_8hpp" startline="127">numGraphicsQueues</references>
        <references refid="classvpr_1_1_device_1ae90f098f10ef560b93fb54e29e9578c2" compoundref="_logical_device_8hpp" startline="131">queueFamilyIndices</references>
        <references refid="classvpr_1_1_device_1a59882855173bef0b13a17b376ea01d45" compoundref="_logical_device_8cpp" startline="74" endline="76">vkHandle</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_device_1af7b303fd1d3a080aa4d160f7c3f10ad5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>VkQueue</type>
        <definition>VkQueue vpr::Device::TransferQueue</definition>
        <argsstring>(const uint32_t &amp;idx=0) const</argsstring>
        <name>TransferQueue</name>
        <param>
          <type>const uint32_t &amp;</type>
          <declname>idx</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="72" column="1" bodyfile="core/src/LogicalDevice.cpp" bodystart="132" bodyend="142"/>
        <references refid="structvpr_1_1vk_queue_family_indices_1ad7def5d08c30d9fcb6992455de1c868a" compoundref="_logical_device_8hpp" startline="17">vpr::vkQueueFamilyIndices::Graphics</references>
        <references refid="classvpr_1_1_device_1ae90f098f10ef560b93fb54e29e9578c2" compoundref="_logical_device_8hpp" startline="131">queueFamilyIndices</references>
        <references refid="structvpr_1_1vk_queue_family_indices_1a28ae358035391181d9eaa145a9eed738" compoundref="_logical_device_8hpp" startline="19">vpr::vkQueueFamilyIndices::Transfer</references>
        <references refid="classvpr_1_1_device_1a59882855173bef0b13a17b376ea01d45" compoundref="_logical_device_8cpp" startline="74" endline="76">vkHandle</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_device_1a6a2bdc1c9de2b94e330ba75cb4a0a87b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>VkQueue</type>
        <definition>VkQueue vpr::Device::ComputeQueue</definition>
        <argsstring>(const uint32_t &amp;idx=0) const</argsstring>
        <name>ComputeQueue</name>
        <param>
          <type>const uint32_t &amp;</type>
          <declname>idx</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="73" column="1" bodyfile="core/src/LogicalDevice.cpp" bodystart="144" bodyend="154"/>
        <references refid="structvpr_1_1vk_queue_family_indices_1a8b891aa09d67ff61deb750637d3f06ca" compoundref="_logical_device_8hpp" startline="18">vpr::vkQueueFamilyIndices::Compute</references>
        <references refid="structvpr_1_1vk_queue_family_indices_1ad7def5d08c30d9fcb6992455de1c868a" compoundref="_logical_device_8hpp" startline="17">vpr::vkQueueFamilyIndices::Graphics</references>
        <references refid="classvpr_1_1_device_1ae90f098f10ef560b93fb54e29e9578c2" compoundref="_logical_device_8hpp" startline="131">queueFamilyIndices</references>
        <references refid="classvpr_1_1_device_1a59882855173bef0b13a17b376ea01d45" compoundref="_logical_device_8cpp" startline="74" endline="76">vkHandle</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_device_1a33f34c1c36dc71aa2905bce9e48b3c3f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>VkQueue</type>
        <definition>VkQueue vpr::Device::SparseBindingQueue</definition>
        <argsstring>(const uint32_t &amp;idx=0) const</argsstring>
        <name>SparseBindingQueue</name>
        <param>
          <type>const uint32_t &amp;</type>
          <declname>idx</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="74" column="1" bodyfile="core/src/LogicalDevice.cpp" bodystart="156" bodyend="168"/>
        <references refid="structvpr_1_1vk_queue_family_indices_1a8b891aa09d67ff61deb750637d3f06ca" compoundref="_logical_device_8hpp" startline="18">vpr::vkQueueFamilyIndices::Compute</references>
        <references refid="classvpr_1_1_device_1a18421f8e6be40e60ffb5e436b6693658" compoundref="_logical_device_8hpp" startline="138">dataMembers</references>
        <references refid="structvpr_1_1vk_queue_family_indices_1ad7def5d08c30d9fcb6992455de1c868a" compoundref="_logical_device_8hpp" startline="17">vpr::vkQueueFamilyIndices::Graphics</references>
        <references refid="classvpr_1_1_device_1a5e6c89cf59912690370c11d4c7c2648a" compoundref="_logical_device_8hpp" startline="132">handle</references>
        <references refid="classvpr_1_1_device_1ae90f098f10ef560b93fb54e29e9578c2" compoundref="_logical_device_8hpp" startline="131">queueFamilyIndices</references>
        <references refid="structvpr_1_1_device_data_members_1a2749c85ee4120b3d2c68bb746db6035a" compoundref="_logical_device_8cpp" startline="21">vpr::DeviceDataMembers::queueInfos</references>
        <references refid="structvpr_1_1vk_queue_family_indices_1ae0e29d580f2551312fdfcc2f1c1f104b" compoundref="_logical_device_8hpp" startline="20">vpr::vkQueueFamilyIndices::SparseBinding</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_device_1ad9c1f7de10b5e4b0816bbd8233fa4987" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>VkImageTiling</type>
        <definition>VkImageTiling vpr::Device::GetFormatTiling</definition>
        <argsstring>(const VkFormat &amp;format, const VkFormatFeatureFlags &amp;flags) const</argsstring>
        <name>GetFormatTiling</name>
        <param>
          <type>const VkFormat &amp;</type>
          <declname>format</declname>
        </param>
        <param>
          <type>const VkFormatFeatureFlags &amp;</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>!Checks whether or not the given format along with the specified flags supports optimal or linear tiling. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>- Vulkan format enum specifying the type of image data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>- flags specifying features of format: commonly what it is being used for, e.g cube map, sampled image, storage image, etc </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="80" column="1" bodyfile="core/src/LogicalDevice.cpp" bodystart="170" bodyend="184"/>
        <references refid="classvpr_1_1_device_1a39687d150080576e3b0c66873f808d37" compoundref="_logical_device_8hpp" startline="135">parent</references>
        <references refid="classvpr_1_1_physical_device_1a00de7d3556d98b1cfda28d1f769f8fa8" compoundref="_physical_device_8cpp" startline="270" endline="272">vpr::PhysicalDevice::vkHandle</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_device_1a2a58028f056c580337c9454195683eae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>VkFormat</type>
        <definition>VkFormat vpr::Device::FindSupportedFormat</definition>
        <argsstring>(const VkFormat *formats, const size_t num_formats, const VkImageTiling &amp;tiling, const VkFormatFeatureFlags &amp;flags) const</argsstring>
        <name>FindSupportedFormat</name>
        <param>
          <type>const VkFormat *</type>
          <declname>formats</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>num_formats</declname>
        </param>
        <param>
          <type>const VkImageTiling &amp;</type>
          <declname>tiling</declname>
        </param>
        <param>
          <type>const VkFormatFeatureFlags &amp;</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>! Checks a collection of possible formats, returning the one that supports the given tiling and feature flags. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>- vector of formats that are usable for the desired task. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tiling</parametername>
</parameternamelist>
<parameterdescription>
<para>- required image tiling setting. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>- features required, commonly related to intended use for the image. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns found format if successful, otherwise returns VK_FORMAT_UNDEFINED and logs a detailed error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="88" column="1" bodyfile="core/src/LogicalDevice.cpp" bodystart="186" bodyend="199"/>
        <references refid="classvpr_1_1_device_1a39687d150080576e3b0c66873f808d37" compoundref="_logical_device_8hpp" startline="135">parent</references>
        <references refid="classvpr_1_1_physical_device_1a00de7d3556d98b1cfda28d1f769f8fa8" compoundref="_physical_device_8cpp" startline="270" endline="272">vpr::PhysicalDevice::vkHandle</references>
        <referencedby refid="classvpr_1_1_device_1a4820a276bf1258c8ad6a5718fc7cd6fb" compoundref="_logical_device_8cpp" startline="201" endline="204">FindDepthFormat</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_device_1a4820a276bf1258c8ad6a5718fc7cd6fb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>VkFormat</type>
        <definition>VkFormat vpr::Device::FindDepthFormat</definition>
        <argsstring>() const</argsstring>
        <name>FindDepthFormat</name>
        <briefdescription>
<para>Finds a Vulkan image format suitable for use in the depth buffer. </para>        </briefdescription>
        <detaileddescription>
<para>Currently could benefit from better quantification of what defines the &quot;best&quot; depth format, as this will depend on hardware and whether or not we are even using the stencil. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="91" column="1" bodyfile="core/src/LogicalDevice.cpp" bodystart="201" bodyend="204"/>
        <references refid="classvpr_1_1_device_1a2a58028f056c580337c9454195683eae" compoundref="_logical_device_8cpp" startline="186" endline="199">FindSupportedFormat</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_device_1a3c72a3cb6c48025c77a2e5029ff3718c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t vpr::Device::GetMemoryTypeIdx</definition>
        <argsstring>(const uint32_t &amp;type_bitfield, const VkMemoryPropertyFlags &amp;property_flags, VkBool32 *memory_type_found=nullptr) const</argsstring>
        <name>GetMemoryTypeIdx</name>
        <param>
          <type>const uint32_t &amp;</type>
          <declname>type_bitfield</declname>
        </param>
        <param>
          <type>const VkMemoryPropertyFlags &amp;</type>
          <declname>property_flags</declname>
        </param>
        <param>
          <type>VkBool32 *</type>
          <declname>memory_type_found</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Returns the index of a memory type satisfying the requirements specified by the given parameters. </para>        </briefdescription>
        <detaileddescription>
<para>Returns std::numeric_limits&lt;uint32_t&gt;::max() if the value cannot be found, and writes to memory_type_found <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type_bitfield</parametername>
</parameternamelist>
<parameterdescription>
<para>bitfield retrieved from VkMemoryRequirements </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>property_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>required properties that the memory type must support </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memory_type_found</parametername>
</parameternamelist>
<parameterdescription>
<para>written to, if non-null, based on search results </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="99" column="1" bodyfile="core/src/LogicalDevice.cpp" bodystart="206" bodyend="208"/>
        <references refid="classvpr_1_1_physical_device_1ac374493c59bb13f5300d1c96b87b8380" compoundref="_physical_device_8cpp" startline="206" endline="208">vpr::PhysicalDevice::GetMemoryTypeIdx</references>
        <references refid="classvpr_1_1_device_1a39687d150080576e3b0c66873f808d37" compoundref="_logical_device_8hpp" startline="135">parent</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_device_1a25e0b05bb662b335ec214295c46654cc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classvpr_1_1_physical_device" kindref="compound">PhysicalDevice</ref> &amp;</type>
        <definition>const PhysicalDevice &amp; vpr::Device::GetPhysicalDevice</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetPhysicalDevice</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="100" column="1" bodyfile="core/src/LogicalDevice.cpp" bodystart="210" bodyend="212"/>
        <references refid="classvpr_1_1_device_1a39687d150080576e3b0c66873f808d37" compoundref="_logical_device_8hpp" startline="135">parent</references>
        <referencedby refid="structvpr_1_1_device_data_members_1a5901117e963f71eaa85717faab3f796d" compoundref="_logical_device_8cpp" startline="461" endline="491">vpr::DeviceDataMembers::checkExtensions</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_device_1a75b50a9b7b72d42932981ad2c8c9318c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const VkPhysicalDeviceProperties &amp;</type>
        <definition>const VkPhysicalDeviceProperties &amp; vpr::Device::GetPhysicalDeviceProperties</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetPhysicalDeviceProperties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="101" column="1" bodyfile="core/src/LogicalDevice.cpp" bodystart="214" bodyend="216"/>
        <references refid="classvpr_1_1_physical_device_1a395785af128c95f3098203a0b32f99ed" compoundref="_physical_device_8cpp" startline="254" endline="256">vpr::PhysicalDevice::GetProperties</references>
        <references refid="classvpr_1_1_device_1a39687d150080576e3b0c66873f808d37" compoundref="_logical_device_8hpp" startline="135">parent</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_device_1a3298bf1002853c3cd5b17fba4abc721d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const VkPhysicalDeviceMemoryProperties &amp;</type>
        <definition>const VkPhysicalDeviceMemoryProperties &amp; vpr::Device::GetPhysicalDeviceMemoryProperties</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetPhysicalDeviceMemoryProperties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="102" column="1" bodyfile="core/src/LogicalDevice.cpp" bodystart="218" bodyend="220"/>
        <references refid="classvpr_1_1_physical_device_1a1d9827e465aa6c51331bec797d2318f3" compoundref="_physical_device_8cpp" startline="262" endline="264">vpr::PhysicalDevice::GetMemoryProperties</references>
        <references refid="classvpr_1_1_device_1a39687d150080576e3b0c66873f808d37" compoundref="_logical_device_8hpp" startline="135">parent</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_device_1a37104872c409608aac9b91363ce71fc7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structvpr_1_1_vk_debug_utils_functions" kindref="compound">VkDebugUtilsFunctions</ref> &amp;</type>
        <definition>const VkDebugUtilsFunctions &amp; vpr::Device::DebugUtilsHandler</definition>
        <argsstring>() const</argsstring>
        <name>DebugUtilsHandler</name>
        <briefdescription>
<para>Used to retrieve structure of debug utils function pointers. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="104" column="1" bodyfile="core/src/LogicalDevice.cpp" bodystart="222" bodyend="231"/>
        <references refid="classvpr_1_1_device_1a8545ca31dfd6a35a0370c7de5b0cc64c" compoundref="_logical_device_8hpp" startline="134">debugUtilsHandler</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_device_1a0462441316d1ac019b586331ee938f79" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const uint32_t &amp;</type>
        <definition>const uint32_t &amp; vpr::Device::NumGraphicsQueues</definition>
        <argsstring>() const noexcept</argsstring>
        <name>NumGraphicsQueues</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="107" column="1" bodyfile="core/src/LogicalDevice.cpp" bodystart="251" bodyend="253"/>
        <references refid="classvpr_1_1_device_1a1395be5571d5d2961aacb0c3727ef8b0" compoundref="_logical_device_8hpp" startline="127">numGraphicsQueues</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_device_1abfe0f840688612001a13fe92f6e753da" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const uint32_t &amp;</type>
        <definition>const uint32_t &amp; vpr::Device::NumComputeQueues</definition>
        <argsstring>() const noexcept</argsstring>
        <name>NumComputeQueues</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="108" column="1" bodyfile="core/src/LogicalDevice.cpp" bodystart="255" bodyend="257"/>
        <references refid="classvpr_1_1_device_1a894511aa70498ce4c6d4f90234fdbeb1" compoundref="_logical_device_8hpp" startline="128">numComputeQueues</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_device_1a4bdc3126a75abdcd3f1085cf8ebb83d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const uint32_t &amp;</type>
        <definition>const uint32_t &amp; vpr::Device::NumTransferQueues</definition>
        <argsstring>() const noexcept</argsstring>
        <name>NumTransferQueues</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="109" column="1" bodyfile="core/src/LogicalDevice.cpp" bodystart="259" bodyend="261"/>
        <references refid="classvpr_1_1_device_1a71fb8d05fa54f5b46e2a93d69b4a9e1f" compoundref="_logical_device_8hpp" startline="129">numTransferQueues</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_device_1ab3d41a32bae7a7f8cf3f7bce630f9a41" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const uint32_t &amp;</type>
        <definition>const uint32_t &amp; vpr::Device::NumSparseBindingQueues</definition>
        <argsstring>() const noexcept</argsstring>
        <name>NumSparseBindingQueues</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="110" column="1" bodyfile="core/src/LogicalDevice.cpp" bodystart="263" bodyend="265"/>
        <references refid="classvpr_1_1_device_1a84c3631b86e77b5a52e9933a8309b7c7" compoundref="_logical_device_8hpp" startline="130">numSparseBindingQueues</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_device_1ac4cf746c60392ff8164c32868f252f23" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structvpr_1_1vk_queue_family_indices" kindref="compound">vkQueueFamilyIndices</ref> &amp;</type>
        <definition>const vkQueueFamilyIndices &amp; vpr::Device::QueueFamilyIndices</definition>
        <argsstring>() const noexcept</argsstring>
        <name>QueueFamilyIndices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/LogicalDevice.hpp" line="111" column="1" bodyfile="core/src/LogicalDevice.cpp" bodystart="267" bodyend="269"/>
        <references refid="classvpr_1_1_device_1ae90f098f10ef560b93fb54e29e9578c2" compoundref="_logical_device_8hpp" startline="131">queueFamilyIndices</references>
        <referencedby refid="structvpr_1_1_swapchain_impl_1a455468d3084cd9503a64f02d3b53956d" compoundref="_swapchain_8cpp" startline="299" endline="329">vpr::SwapchainImpl::setupCreateInfo</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>!The <ref refid="classvpr_1_1_device" kindref="compound">Device</ref> class is a wrapper around the vkLogicalDevice object. </para>    </briefdescription>
    <detaileddescription>
<para>This object is what most Vulkan resources and objects are spawned from, and is then responsible for managing these resources. Most Vulkan functions relating to resource creation, binding, or updating will take a VkDevice reference as a parameter. This is considered to be a &quot;Logical device&quot; as it represents a non-physical device and each physical device can actually store and handle multiple logical devices.</para><para>The vast majority of classes in this codebase contain a private const <ref refid="classvpr_1_1_device" kindref="compound">Device</ref> pointer, for use in their internal functions requiring this object&apos;s handle. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="177">
        <label>vpr::Device</label>
        <link refid="classvpr_1_1_device"/>
        <childnode refid="178" relation="usage">
          <edgelabel>dataMembers</edgelabel>
        </childnode>
        <childnode refid="184" relation="usage">
          <edgelabel>queueFamilyIndices</edgelabel>
        </childnode>
        <childnode refid="185" relation="usage">
          <edgelabel>parent</edgelabel>
        </childnode>
        <childnode refid="189" relation="usage">
          <edgelabel>debugUtilsHandler</edgelabel>
        </childnode>
        <childnode refid="190" relation="usage">
          <edgelabel>parentInstance</edgelabel>
        </childnode>
      </node>
      <node id="187">
        <label>vpr::PhysicalDeviceImpl</label>
        <link refid="classvpr_1_1_physical_device_impl"/>
        <childnode refid="188" relation="usage">
          <edgelabel>queueFamilyProperties</edgelabel>
        </childnode>
      </node>
      <node id="186">
        <label>std::unique_ptr&lt; vpr::PhysicalDeviceImpl &gt;</label>
        <childnode refid="187" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="184">
        <label>vpr::vkQueueFamilyIndices</label>
        <link refid="structvpr_1_1vk_queue_family_indices"/>
      </node>
      <node id="178">
        <label>vpr::DeviceDataMembers</label>
        <link refid="structvpr_1_1_device_data_members"/>
        <childnode refid="177" relation="usage">
          <edgelabel>device</edgelabel>
        </childnode>
        <childnode refid="179" relation="usage">
          <edgelabel>queueInfos</edgelabel>
        </childnode>
        <childnode refid="180" relation="usage">
          <edgelabel>enabledExtensions</edgelabel>
        </childnode>
        <childnode refid="181" relation="usage">
          <edgelabel>copiedExtensionStrings</edgelabel>
        </childnode>
      </node>
      <node id="183">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="191">
        <label>vpr::InstanceExtensionHandler</label>
        <link refid="structvpr_1_1_instance_extension_handler"/>
        <childnode refid="180" relation="usage">
          <edgelabel>extensionStrings</edgelabel>
        </childnode>
        <childnode refid="181" relation="usage">
          <edgelabel>copiedExtensionStrings</edgelabel>
        </childnode>
      </node>
      <node id="181">
        <label>std::vector&lt; std::string &gt;</label>
        <childnode refid="182" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="189">
        <label>vpr::VkDebugUtilsFunctions</label>
        <link refid="structvpr_1_1_vk_debug_utils_functions"/>
      </node>
      <node id="188">
        <label>std::vector&lt; VkQueueFamilyProperties &gt;</label>
      </node>
      <node id="179">
        <label>std::map&lt; VkQueueFlags, VkDeviceQueueCreateInfo &gt;</label>
      </node>
      <node id="190">
        <label>vpr::Instance</label>
        <link refid="classvpr_1_1_instance"/>
        <childnode refid="191" relation="usage">
          <edgelabel>extensionHandler</edgelabel>
        </childnode>
      </node>
      <node id="185">
        <label>vpr::PhysicalDevice</label>
        <link refid="classvpr_1_1_physical_device"/>
        <childnode refid="186" relation="usage">
          <edgelabel>impl</edgelabel>
        </childnode>
      </node>
      <node id="180">
        <label>std::vector&lt; const char *&gt;</label>
      </node>
      <node id="182">
        <label>std::string</label>
        <childnode refid="183" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="core/include/LogicalDevice.hpp" line="34" column="1" bodyfile="core/include/LogicalDevice.hpp" bodystart="34" bodyend="139"/>
    <listofallmembers>
      <member refid="classvpr_1_1_device_1a97c806a212758d83ed537fbf25cf9fe6" prot="private" virt="non-virtual"><scope>vpr::Device</scope><name>checkSurfaceSupport</name></member>
      <member refid="classvpr_1_1_device_1a6a2bdc1c9de2b94e330ba75cb4a0a87b" prot="public" virt="non-virtual"><scope>vpr::Device</scope><name>ComputeQueue</name></member>
      <member refid="classvpr_1_1_device_1a3b0734cd598d9a64f3c459e9dc4e84ce" prot="private" virt="non-virtual"><scope>vpr::Device</scope><name>create</name></member>
      <member refid="classvpr_1_1_device_1a3767828e10f7ebb7eb0e3fff60732c96" prot="private" virt="non-virtual"><scope>vpr::Device</scope><name>createInfo</name></member>
      <member refid="classvpr_1_1_device_1a18421f8e6be40e60ffb5e436b6693658" prot="private" virt="non-virtual"><scope>vpr::Device</scope><name>dataMembers</name></member>
      <member refid="classvpr_1_1_device_1a37104872c409608aac9b91363ce71fc7" prot="public" virt="non-virtual"><scope>vpr::Device</scope><name>DebugUtilsHandler</name></member>
      <member refid="classvpr_1_1_device_1a8545ca31dfd6a35a0370c7de5b0cc64c" prot="private" virt="non-virtual"><scope>vpr::Device</scope><name>debugUtilsHandler</name></member>
      <member refid="classvpr_1_1_device_1a8aa0caf9975fd8eb2948156ee1418044" prot="public" virt="non-virtual"><scope>vpr::Device</scope><name>DedicatedAllocationExtensionsEnabled</name></member>
      <member refid="classvpr_1_1_device_1a9b90a786a5125f158805de055930e36f" prot="private" virt="non-virtual"><scope>vpr::Device</scope><name>Device</name></member>
      <member refid="classvpr_1_1_device_1a63860a751568f5dbd5c31ec4b26792d9" prot="private" virt="non-virtual"><scope>vpr::Device</scope><name>Device</name></member>
      <member refid="classvpr_1_1_device_1ad1a8ebd06d5d8b3de5ce0c8d1ce93277" prot="public" virt="non-virtual"><scope>vpr::Device</scope><name>Device</name></member>
      <member refid="classvpr_1_1_device_1a4820a276bf1258c8ad6a5718fc7cd6fb" prot="public" virt="non-virtual"><scope>vpr::Device</scope><name>FindDepthFormat</name></member>
      <member refid="classvpr_1_1_device_1a2a58028f056c580337c9454195683eae" prot="public" virt="non-virtual"><scope>vpr::Device</scope><name>FindSupportedFormat</name></member>
      <member refid="classvpr_1_1_device_1a6914a8dd1054f00fbdc3454e55b3c14b" prot="public" virt="non-virtual"><scope>vpr::Device</scope><name>GeneralQueue</name></member>
      <member refid="classvpr_1_1_device_1a2c0889e41254c4778c73ab2a6ff6f1ce" prot="public" virt="non-virtual"><scope>vpr::Device</scope><name>GetEnabledExtensions</name></member>
      <member refid="classvpr_1_1_device_1ad9c1f7de10b5e4b0816bbd8233fa4987" prot="public" virt="non-virtual"><scope>vpr::Device</scope><name>GetFormatTiling</name></member>
      <member refid="classvpr_1_1_device_1a3c72a3cb6c48025c77a2e5029ff3718c" prot="public" virt="non-virtual"><scope>vpr::Device</scope><name>GetMemoryTypeIdx</name></member>
      <member refid="classvpr_1_1_device_1a25e0b05bb662b335ec214295c46654cc" prot="public" virt="non-virtual"><scope>vpr::Device</scope><name>GetPhysicalDevice</name></member>
      <member refid="classvpr_1_1_device_1a3298bf1002853c3cd5b17fba4abc721d" prot="public" virt="non-virtual"><scope>vpr::Device</scope><name>GetPhysicalDeviceMemoryProperties</name></member>
      <member refid="classvpr_1_1_device_1a75b50a9b7b72d42932981ad2c8c9318c" prot="public" virt="non-virtual"><scope>vpr::Device</scope><name>GetPhysicalDeviceProperties</name></member>
      <member refid="classvpr_1_1_device_1ab4de02f4fcdb84f487c8e8f598cc3a77" prot="public" virt="non-virtual"><scope>vpr::Device</scope><name>GraphicsQueue</name></member>
      <member refid="classvpr_1_1_device_1a5e6c89cf59912690370c11d4c7c2648a" prot="private" virt="non-virtual"><scope>vpr::Device</scope><name>handle</name></member>
      <member refid="classvpr_1_1_device_1af97db14ae016b678dcb2be6061cac5bd" prot="public" virt="non-virtual"><scope>vpr::Device</scope><name>HasDedicatedComputeQueues</name></member>
      <member refid="classvpr_1_1_device_1a2f4378c92e12f529df785293c3a3a40f" prot="public" virt="non-virtual"><scope>vpr::Device</scope><name>HasExtension</name></member>
      <member refid="classvpr_1_1_device_1abfe0f840688612001a13fe92f6e753da" prot="public" virt="non-virtual"><scope>vpr::Device</scope><name>NumComputeQueues</name></member>
      <member refid="classvpr_1_1_device_1a894511aa70498ce4c6d4f90234fdbeb1" prot="private" virt="non-virtual"><scope>vpr::Device</scope><name>numComputeQueues</name></member>
      <member refid="classvpr_1_1_device_1a1395be5571d5d2961aacb0c3727ef8b0" prot="private" virt="non-virtual"><scope>vpr::Device</scope><name>numGraphicsQueues</name></member>
      <member refid="classvpr_1_1_device_1a0462441316d1ac019b586331ee938f79" prot="public" virt="non-virtual"><scope>vpr::Device</scope><name>NumGraphicsQueues</name></member>
      <member refid="classvpr_1_1_device_1a84c3631b86e77b5a52e9933a8309b7c7" prot="private" virt="non-virtual"><scope>vpr::Device</scope><name>numSparseBindingQueues</name></member>
      <member refid="classvpr_1_1_device_1ab3d41a32bae7a7f8cf3f7bce630f9a41" prot="public" virt="non-virtual"><scope>vpr::Device</scope><name>NumSparseBindingQueues</name></member>
      <member refid="classvpr_1_1_device_1a4bdc3126a75abdcd3f1085cf8ebb83d3" prot="public" virt="non-virtual"><scope>vpr::Device</scope><name>NumTransferQueues</name></member>
      <member refid="classvpr_1_1_device_1a71fb8d05fa54f5b46e2a93d69b4a9e1f" prot="private" virt="non-virtual"><scope>vpr::Device</scope><name>numTransferQueues</name></member>
      <member refid="classvpr_1_1_device_1aebfab03ee3950f6e85579d0988c659c3" prot="private" virt="non-virtual"><scope>vpr::Device</scope><name>operator=</name></member>
      <member refid="classvpr_1_1_device_1a057db1be958feed9799066b2dca2b357" prot="private" virt="non-virtual"><scope>vpr::Device</scope><name>operator=</name></member>
      <member refid="classvpr_1_1_device_1a39687d150080576e3b0c66873f808d37" prot="private" virt="non-virtual"><scope>vpr::Device</scope><name>parent</name></member>
      <member refid="classvpr_1_1_device_1afbd33fc31f5c5e1859faf0130e551ed6" prot="private" virt="non-virtual"><scope>vpr::Device</scope><name>parentInstance</name></member>
      <member refid="classvpr_1_1_device_1ae90f098f10ef560b93fb54e29e9578c2" prot="private" virt="non-virtual"><scope>vpr::Device</scope><name>queueFamilyIndices</name></member>
      <member refid="classvpr_1_1_device_1ac4cf746c60392ff8164c32868f252f23" prot="public" virt="non-virtual"><scope>vpr::Device</scope><name>QueueFamilyIndices</name></member>
      <member refid="classvpr_1_1_device_1abdb29331fbcc15a242b3f0e82b02beef" prot="private" virt="non-virtual"><scope>vpr::Device</scope><name>setupComputeQueues</name></member>
      <member refid="classvpr_1_1_device_1aca69dbf04470b2119a9960047035dc57" prot="private" virt="non-virtual"><scope>vpr::Device</scope><name>setupDebugUtilsHandler</name></member>
      <member refid="classvpr_1_1_device_1a165976c19ab59de329855485a9dab5aa" prot="private" virt="non-virtual"><scope>vpr::Device</scope><name>setupExtensions</name></member>
      <member refid="classvpr_1_1_device_1adbe15d529a11af4d7034a2135255e773" prot="private" virt="non-virtual"><scope>vpr::Device</scope><name>setupGraphicsQueues</name></member>
      <member refid="classvpr_1_1_device_1a4884447888b9c8aacc288591056db19d" prot="private" virt="non-virtual"><scope>vpr::Device</scope><name>setupQueueFamily</name></member>
      <member refid="classvpr_1_1_device_1af52c3b24f6bca1308a5170eb3acfeb11" prot="private" virt="non-virtual"><scope>vpr::Device</scope><name>setupQueues</name></member>
      <member refid="classvpr_1_1_device_1a22ee8e6517d4898282d9d6385545100a" prot="private" virt="non-virtual"><scope>vpr::Device</scope><name>setupSparseBindingQueues</name></member>
      <member refid="classvpr_1_1_device_1aa64b2412561fa0950722c2dc4997da9f" prot="private" virt="non-virtual"><scope>vpr::Device</scope><name>setupTransferQueues</name></member>
      <member refid="classvpr_1_1_device_1a158d56e75fab365778e07a84d090b3f7" prot="private" virt="non-virtual"><scope>vpr::Device</scope><name>setupValidation</name></member>
      <member refid="classvpr_1_1_device_1a33f34c1c36dc71aa2905bce9e48b3c3f" prot="public" virt="non-virtual"><scope>vpr::Device</scope><name>SparseBindingQueue</name></member>
      <member refid="classvpr_1_1_device_1a7447e429a7fbed43cf2d7ff8df0c2d1a" prot="private" virt="non-virtual"><scope>vpr::Device</scope><name>surface</name></member>
      <member refid="classvpr_1_1_device_1af7b303fd1d3a080aa4d160f7c3f10ad5" prot="public" virt="non-virtual"><scope>vpr::Device</scope><name>TransferQueue</name></member>
      <member refid="classvpr_1_1_device_1a69ff6decaf1928df17db723214786ec4" prot="public" virt="non-virtual"><scope>vpr::Device</scope><name>UpdateSurface</name></member>
      <member refid="classvpr_1_1_device_1ac71413f7f9988d9479e27f51fc6de197" prot="private" virt="non-virtual"><scope>vpr::Device</scope><name>verifyPresentationSupport</name></member>
      <member refid="classvpr_1_1_device_1a59882855173bef0b13a17b376ea01d45" prot="public" virt="non-virtual"><scope>vpr::Device</scope><name>vkHandle</name></member>
      <member refid="classvpr_1_1_device_1a1e717b4e39da77afd6658b9df6393ee2" prot="public" virt="non-virtual"><scope>vpr::Device</scope><name>~Device</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
