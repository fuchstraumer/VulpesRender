<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="structvpr_1_1_allocator_impl" kind="struct" language="C++" prot="public">
    <compoundname>vpr::AllocatorImpl</compoundname>
    <includes refid="_allocator_impl_8hpp" local="no">AllocatorImpl.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="structvpr_1_1_allocator_impl_1ac0e602f636913c7510718091629032f2" prot="public" static="no" strong="yes">
        <type></type>
        <name>AllocationSize</name>
        <enumvalue id="structvpr_1_1_allocator_impl_1ac0e602f636913c7510718091629032f2a9b9c17e13f0e3dc9860a26e08b59b2a7" prot="public">
          <name>SMALL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structvpr_1_1_allocator_impl_1ac0e602f636913c7510718091629032f2ac87f3be66ffc3c0d4249f1c2cc5f3cce" prot="public">
          <name>MEDIUM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structvpr_1_1_allocator_impl_1ac0e602f636913c7510718091629032f2a71726adf0ff60cd03eaf3c515883eeb8" prot="public">
          <name>LARGE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structvpr_1_1_allocator_impl_1ac0e602f636913c7510718091629032f2af15a17d42f52702abe251cd13067f199" prot="public">
          <name>EXTRA_LARGE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocatorImpl.hpp" line="51" column="1" bodyfile="alloc/src/AllocatorImpl.hpp" bodystart="51" bodyend="56"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structvpr_1_1_allocator_impl_1a1c23a6ef4795d24410b6af8736228717" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="structvpr_1_1_allocator_impl_1ac0e602f636913c7510718091629032f2" kindref="member">AllocationSize</ref>, std::vector&lt; std::unique_ptr&lt; <ref refid="classvpr_1_1_allocation_collection" kindref="compound">AllocationCollection</ref> &gt; &gt; &gt;</type>
        <definition>std::map&lt;AllocationSize, std::vector&lt;std::unique_ptr&lt;AllocationCollection&gt; &gt; &gt; vpr::AllocatorImpl::allocations</definition>
        <argsstring></argsstring>
        <name>allocations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocatorImpl.hpp" line="60" column="1" bodyfile="alloc/src/AllocatorImpl.hpp" bodystart="60" bodyend="-1"/>
        <referencedby refid="structvpr_1_1_allocator_impl_1a25d6e4d4fe1d7c4adf83e95915a0a810" compoundref="_allocator_impl_8cpp" startline="129" endline="266">allocateMemoryType</referencedby>
        <referencedby refid="structvpr_1_1_allocator_impl_1ac1c457665759826825cd1c0d2b5ad78d" compoundref="_allocator_impl_8cpp" startline="45" endline="52">clearAllocationMaps</referencedby>
        <referencedby refid="structvpr_1_1_allocator_impl_1a8ff9089978ad4cbc031d2fb067b6de54" compoundref="_allocator_impl_8cpp" startline="22" endline="43">createAllocationMaps</referencedby>
        <referencedby refid="structvpr_1_1_debug_visualization_impl_1a05eb815c5d4f3a68ca960e420566040a" compoundref="_debug_visualization_8cpp" startline="59" endline="66">vpr::DebugVisualizationImpl::update</referencedby>
      </memberdef>
      <memberdef kind="variable" id="structvpr_1_1_allocator_impl_1ae80941f43777e8872bb2feb19ebe82a0" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="structvpr_1_1_allocator_impl_1ac0e602f636913c7510718091629032f2" kindref="member">AllocationSize</ref>, std::vector&lt; bool &gt; &gt;</type>
        <definition>std::map&lt;AllocationSize, std::vector&lt;bool&gt; &gt; vpr::AllocatorImpl::emptyAllocations</definition>
        <argsstring></argsstring>
        <name>emptyAllocations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocatorImpl.hpp" line="61" column="1" bodyfile="alloc/src/AllocatorImpl.hpp" bodystart="61" bodyend="-1"/>
        <referencedby refid="structvpr_1_1_allocator_impl_1a25d6e4d4fe1d7c4adf83e95915a0a810" compoundref="_allocator_impl_8cpp" startline="129" endline="266">allocateMemoryType</referencedby>
        <referencedby refid="structvpr_1_1_allocator_impl_1ac1c457665759826825cd1c0d2b5ad78d" compoundref="_allocator_impl_8cpp" startline="45" endline="52">clearAllocationMaps</referencedby>
        <referencedby refid="structvpr_1_1_allocator_impl_1a8ff9089978ad4cbc031d2fb067b6de54" compoundref="_allocator_impl_8cpp" startline="22" endline="43">createAllocationMaps</referencedby>
      </memberdef>
      <memberdef kind="variable" id="structvpr_1_1_allocator_impl_1a40fc7285e8f4404facd6b9ece0679e78" prot="public" static="no" mutable="no">
        <type>std::unordered_set&lt; <ref refid="classvpr_1_1_allocation" kindref="compound">Allocation</ref>, <ref refid="structvpr_1_1_allocation_hash" kindref="compound">AllocationHash</ref> &gt;</type>
        <definition>std::unordered_set&lt;Allocation, AllocationHash&gt; vpr::AllocatorImpl::privateAllocations</definition>
        <argsstring></argsstring>
        <name>privateAllocations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocatorImpl.hpp" line="62" column="1" bodyfile="alloc/src/AllocatorImpl.hpp" bodystart="62" bodyend="-1"/>
        <referencedby refid="structvpr_1_1_allocator_impl_1a2ec18969e688b4cb472a16535482208d" compoundref="_allocator_impl_8cpp" startline="268" endline="289">allocatePrivateMemory</referencedby>
        <referencedby refid="structvpr_1_1_allocator_impl_1ac1c457665759826825cd1c0d2b5ad78d" compoundref="_allocator_impl_8cpp" startline="45" endline="52">clearAllocationMaps</referencedby>
        <referencedby refid="structvpr_1_1_allocator_impl_1a4d132f78ac784684f0384127ff5c8624" compoundref="_allocator_impl_8cpp" startline="291" endline="310">freePrivateMemory</referencedby>
      </memberdef>
      <memberdef kind="variable" id="structvpr_1_1_allocator_impl_1aef84c0c451b23346c729753fcb97a5aa" prot="public" static="no" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex vpr::AllocatorImpl::privateMutex</definition>
        <argsstring></argsstring>
        <name>privateMutex</name>
        <briefdescription>
<para>Guards the private allocations set, since it&apos;s a different object entirely than the main one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocatorImpl.hpp" line="66" column="1" bodyfile="alloc/src/AllocatorImpl.hpp" bodystart="66" bodyend="-1"/>
        <referencedby refid="structvpr_1_1_allocator_impl_1a2ec18969e688b4cb472a16535482208d" compoundref="_allocator_impl_8cpp" startline="268" endline="289">allocatePrivateMemory</referencedby>
        <referencedby refid="structvpr_1_1_allocator_impl_1a4d132f78ac784684f0384127ff5c8624" compoundref="_allocator_impl_8cpp" startline="291" endline="310">freePrivateMemory</referencedby>
      </memberdef>
      <memberdef kind="variable" id="structvpr_1_1_allocator_impl_1a7c6d7ed0127f8855626505597f52fbaa" prot="public" static="no" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex vpr::AllocatorImpl::allocMutex</definition>
        <argsstring></argsstring>
        <name>allocMutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocatorImpl.hpp" line="67" column="1" bodyfile="alloc/src/AllocatorImpl.hpp" bodystart="67" bodyend="-1"/>
        <referencedby refid="structvpr_1_1_allocator_impl_1a25d6e4d4fe1d7c4adf83e95915a0a810" compoundref="_allocator_impl_8cpp" startline="129" endline="266">allocateMemoryType</referencedby>
      </memberdef>
      <memberdef kind="variable" id="structvpr_1_1_allocator_impl_1af91bd8463e115344416716396c38a558" prot="public" static="no" mutable="no">
        <type>const VkDevice</type>
        <definition>const VkDevice vpr::AllocatorImpl::logicalDevice</definition>
        <argsstring></argsstring>
        <name>logicalDevice</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocatorImpl.hpp" line="68" column="1" bodyfile="alloc/src/AllocatorImpl.hpp" bodystart="68" bodyend="-1"/>
        <referencedby refid="structvpr_1_1_allocator_impl_1a25d6e4d4fe1d7c4adf83e95915a0a810" compoundref="_allocator_impl_8cpp" startline="129" endline="266">allocateMemoryType</referencedby>
        <referencedby refid="structvpr_1_1_allocator_impl_1a2ec18969e688b4cb472a16535482208d" compoundref="_allocator_impl_8cpp" startline="268" endline="289">allocatePrivateMemory</referencedby>
        <referencedby refid="structvpr_1_1_allocator_impl_1a86f11d286906668192d79d69bedda96b" compoundref="_allocator_impl_8cpp" startline="362" endline="386">fetchAllocFunctionPointersKHR</referencedby>
        <referencedby refid="structvpr_1_1_allocator_impl_1a4d132f78ac784684f0384127ff5c8624" compoundref="_allocator_impl_8cpp" startline="291" endline="310">freePrivateMemory</referencedby>
        <referencedby refid="structvpr_1_1_allocator_impl_1a28efd3faba024a98f8248ed47ccf16e0" compoundref="_allocator_impl_8cpp" startline="312" endline="334">getBufferMemReqs</referencedby>
        <referencedby refid="structvpr_1_1_allocator_impl_1a6c291f049e194c616fba17b070dacd0a" compoundref="_allocator_impl_8cpp" startline="336" endline="358">getImageMemReqs</referencedby>
      </memberdef>
      <memberdef kind="variable" id="structvpr_1_1_allocator_impl_1a3d877474ed5d36c1775b8b5f15c3e1fb" prot="public" static="no" mutable="no">
        <type>const VkPhysicalDevice</type>
        <definition>const VkPhysicalDevice vpr::AllocatorImpl::physicalDevice</definition>
        <argsstring></argsstring>
        <name>physicalDevice</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocatorImpl.hpp" line="69" column="1" bodyfile="alloc/src/AllocatorImpl.hpp" bodystart="69" bodyend="-1"/>
        <referencedby refid="structvpr_1_1_allocator_impl_1ac9ebcb725a5a9aa749108b4752eef0f3" compoundref="_allocator_impl_8cpp" startline="10" endline="20">AllocatorImpl</referencedby>
      </memberdef>
      <memberdef kind="variable" id="structvpr_1_1_allocator_impl_1a0e6f55fc74957e9fbb1eece6951b80ff" prot="public" static="no" mutable="no">
        <type>VkPhysicalDeviceProperties</type>
        <definition>VkPhysicalDeviceProperties vpr::AllocatorImpl::deviceProperties</definition>
        <argsstring></argsstring>
        <name>deviceProperties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocatorImpl.hpp" line="71" column="1" bodyfile="alloc/src/AllocatorImpl.hpp" bodystart="71" bodyend="-1"/>
        <referencedby refid="structvpr_1_1_allocator_impl_1ac9ebcb725a5a9aa749108b4752eef0f3" compoundref="_allocator_impl_8cpp" startline="10" endline="20">AllocatorImpl</referencedby>
        <referencedby refid="structvpr_1_1_allocator_impl_1af4cde12705894f4ac76aa4d1eeeec6e7" compoundref="_allocator_impl_8cpp" startline="75" endline="77">GetBufferImageGranularity</referencedby>
      </memberdef>
      <memberdef kind="variable" id="structvpr_1_1_allocator_impl_1a08588041240a23937c472696c50ca38e" prot="public" static="no" mutable="no">
        <type>VkPhysicalDeviceMemoryProperties</type>
        <definition>VkPhysicalDeviceMemoryProperties vpr::AllocatorImpl::deviceMemoryProperties</definition>
        <argsstring></argsstring>
        <name>deviceMemoryProperties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocatorImpl.hpp" line="72" column="1" bodyfile="alloc/src/AllocatorImpl.hpp" bodystart="72" bodyend="-1"/>
        <referencedby refid="structvpr_1_1_allocator_impl_1ac9ebcb725a5a9aa749108b4752eef0f3" compoundref="_allocator_impl_8cpp" startline="10" endline="20">AllocatorImpl</referencedby>
        <referencedby refid="structvpr_1_1_allocator_impl_1a90517febe6d9f3841cdb924d019d11b6" compoundref="_allocator_impl_8cpp" startline="79" endline="81">GetMemoryHeapCount</referencedby>
        <referencedby refid="structvpr_1_1_allocator_impl_1a7848aa696f40eef78c8e380dd578b8ef" compoundref="_allocator_impl_8cpp" startline="83" endline="85">GetMemoryTypeCount</referencedby>
      </memberdef>
      <memberdef kind="variable" id="structvpr_1_1_allocator_impl_1ab1cf702b6e6af76558127e563013bcf0" prot="public" static="no" mutable="no">
        <type>VkDeviceSize</type>
        <definition>VkDeviceSize vpr::AllocatorImpl::preferredLargeHeapBlockSize</definition>
        <argsstring></argsstring>
        <name>preferredLargeHeapBlockSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocatorImpl.hpp" line="74" column="1" bodyfile="alloc/src/AllocatorImpl.hpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvpr_1_1_allocator_impl_1a5cab97c58e55a21704d5ece6e356df4e" prot="public" static="no" mutable="no">
        <type>VkDeviceSize</type>
        <definition>VkDeviceSize vpr::AllocatorImpl::preferredSmallHeapBlockSize</definition>
        <argsstring></argsstring>
        <name>preferredSmallHeapBlockSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocatorImpl.hpp" line="75" column="1" bodyfile="alloc/src/AllocatorImpl.hpp" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvpr_1_1_allocator_impl_1adc8fb6b990aabbfa9900fb6c520eecaf" prot="public" static="no" mutable="no">
        <type>const VkAllocationCallbacks *</type>
        <definition>const VkAllocationCallbacks* vpr::AllocatorImpl::pAllocationCallbacks</definition>
        <argsstring></argsstring>
        <name>pAllocationCallbacks</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocatorImpl.hpp" line="76" column="1" bodyfile="alloc/src/AllocatorImpl.hpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvpr_1_1_allocator_impl_1a59efc16df23a49f32b55da6c735fbd0d" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool vpr::AllocatorImpl::usingMemoryExtensions</definition>
        <argsstring></argsstring>
        <name>usingMemoryExtensions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocatorImpl.hpp" line="77" column="1" bodyfile="alloc/src/AllocatorImpl.hpp" bodystart="77" bodyend="-1"/>
        <referencedby refid="structvpr_1_1_allocator_impl_1ac9ebcb725a5a9aa749108b4752eef0f3" compoundref="_allocator_impl_8cpp" startline="10" endline="20">AllocatorImpl</referencedby>
        <referencedby refid="structvpr_1_1_allocator_impl_1a86f11d286906668192d79d69bedda96b" compoundref="_allocator_impl_8cpp" startline="362" endline="386">fetchAllocFunctionPointersKHR</referencedby>
        <referencedby refid="structvpr_1_1_allocator_impl_1a28efd3faba024a98f8248ed47ccf16e0" compoundref="_allocator_impl_8cpp" startline="312" endline="334">getBufferMemReqs</referencedby>
        <referencedby refid="structvpr_1_1_allocator_impl_1a6c291f049e194c616fba17b070dacd0a" compoundref="_allocator_impl_8cpp" startline="336" endline="358">getImageMemReqs</referencedby>
      </memberdef>
      <memberdef kind="variable" id="structvpr_1_1_allocator_impl_1a8f9ab69ecc64171b01c1702e84840a3c" prot="public" static="no" mutable="no">
        <type>PFN_vkGetBufferMemoryRequirements2KHR</type>
        <definition>PFN_vkGetBufferMemoryRequirements2KHR vpr::AllocatorImpl::pVkGetBufferMemoryRequirements2KHR</definition>
        <argsstring></argsstring>
        <name>pVkGetBufferMemoryRequirements2KHR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocatorImpl.hpp" line="86" column="1" bodyfile="alloc/src/AllocatorImpl.hpp" bodystart="86" bodyend="-1"/>
        <referencedby refid="structvpr_1_1_allocator_impl_1a86f11d286906668192d79d69bedda96b" compoundref="_allocator_impl_8cpp" startline="362" endline="386">fetchAllocFunctionPointersKHR</referencedby>
        <referencedby refid="structvpr_1_1_allocator_impl_1a28efd3faba024a98f8248ed47ccf16e0" compoundref="_allocator_impl_8cpp" startline="312" endline="334">getBufferMemReqs</referencedby>
      </memberdef>
      <memberdef kind="variable" id="structvpr_1_1_allocator_impl_1aa9f5eea17e3de7583a63abf46d2eff5a" prot="public" static="no" mutable="no">
        <type>PFN_vkGetImageMemoryRequirements2KHR</type>
        <definition>PFN_vkGetImageMemoryRequirements2KHR vpr::AllocatorImpl::pVkGetImageMemoryRequirements2KHR</definition>
        <argsstring></argsstring>
        <name>pVkGetImageMemoryRequirements2KHR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocatorImpl.hpp" line="87" column="1" bodyfile="alloc/src/AllocatorImpl.hpp" bodystart="87" bodyend="-1"/>
        <referencedby refid="structvpr_1_1_allocator_impl_1a86f11d286906668192d79d69bedda96b" compoundref="_allocator_impl_8cpp" startline="362" endline="386">fetchAllocFunctionPointersKHR</referencedby>
        <referencedby refid="structvpr_1_1_allocator_impl_1a6c291f049e194c616fba17b070dacd0a" compoundref="_allocator_impl_8cpp" startline="336" endline="358">getImageMemReqs</referencedby>
      </memberdef>
      <memberdef kind="variable" id="structvpr_1_1_allocator_impl_1a243bf4394ebe9999a421a49e90c25f96" prot="public" static="no" mutable="no">
        <type>PFN_vkGetImageSparseMemoryRequirements2KHR</type>
        <definition>PFN_vkGetImageSparseMemoryRequirements2KHR vpr::AllocatorImpl::pVkGetImageSparseMemoryRequirements2KHR</definition>
        <argsstring></argsstring>
        <name>pVkGetImageSparseMemoryRequirements2KHR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocatorImpl.hpp" line="88" column="1" bodyfile="alloc/src/AllocatorImpl.hpp" bodystart="88" bodyend="-1"/>
        <referencedby refid="structvpr_1_1_allocator_impl_1a86f11d286906668192d79d69bedda96b" compoundref="_allocator_impl_8cpp" startline="362" endline="386">fetchAllocFunctionPointersKHR</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structvpr_1_1_allocator_impl_1a619ce3b614015e030bea8a3239d60fe2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class DebugVisualization</definition>
        <argsstring></argsstring>
        <name>DebugVisualization</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocatorImpl.hpp" line="90" column="1" bodyfile="alloc/src/AllocatorImpl.hpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="structvpr_1_1_allocator_impl_1aa54730353079686243fbe5f8545267d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct DebugVisualizationImpl</definition>
        <argsstring></argsstring>
        <name>DebugVisualizationImpl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocatorImpl.hpp" line="91" column="1" bodyfile="alloc/src/AllocatorImpl.hpp" bodystart="91" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvpr_1_1_allocator_impl_1ac9ebcb725a5a9aa749108b4752eef0f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::AllocatorImpl::AllocatorImpl</definition>
        <argsstring>(const VkDevice &amp;dvc, const VkPhysicalDevice &amp;physical_device, Allocator::allocation_extensions extensions)</argsstring>
        <name>AllocatorImpl</name>
        <param>
          <type>const VkDevice &amp;</type>
          <declname>dvc</declname>
        </param>
        <param>
          <type>const VkPhysicalDevice &amp;</type>
          <declname>physical_device</declname>
        </param>
        <param>
          <type><ref refid="classvpr_1_1_allocator_1aeb93666035b8e36aa8f2119deb1b4ba1" kindref="member">Allocator::allocation_extensions</ref></type>
          <declname>extensions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocatorImpl.hpp" line="27" column="1" bodyfile="alloc/src/AllocatorImpl.cpp" bodystart="10" bodyend="20"/>
        <references refid="structvpr_1_1_allocator_impl_1a8ff9089978ad4cbc031d2fb067b6de54" compoundref="_allocator_impl_8cpp" startline="22" endline="43">createAllocationMaps</references>
        <references refid="structvpr_1_1_allocator_impl_1a08588041240a23937c472696c50ca38e" compoundref="_allocator_impl_8hpp" startline="72">deviceMemoryProperties</references>
        <references refid="structvpr_1_1_allocator_impl_1a0e6f55fc74957e9fbb1eece6951b80ff" compoundref="_allocator_impl_8hpp" startline="71">deviceProperties</references>
        <references refid="structvpr_1_1_allocator_impl_1a86f11d286906668192d79d69bedda96b" compoundref="_allocator_impl_8cpp" startline="362" endline="386">fetchAllocFunctionPointersKHR</references>
        <references refid="structvpr_1_1_allocator_impl_1a3d877474ed5d36c1775b8b5f15c3e1fb" compoundref="_allocator_impl_8hpp" startline="69">physicalDevice</references>
        <references refid="structvpr_1_1_allocator_impl_1a59efc16df23a49f32b55da6c735fbd0d" compoundref="_allocator_impl_8hpp" startline="77">usingMemoryExtensions</references>
      </memberdef>
      <memberdef kind="function" id="structvpr_1_1_allocator_impl_1af42f00943ffa38d2f02d24886f549911" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>VkDeviceSize</type>
        <definition>VkDeviceSize vpr::AllocatorImpl::GetPreferredBlockSize</definition>
        <argsstring>(const uint32_t &amp;memory_type_idx) const noexcept</argsstring>
        <name>GetPreferredBlockSize</name>
        <param>
          <type>const uint32_t &amp;</type>
          <declname>memory_type_idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocatorImpl.hpp" line="29" column="1" bodyfile="alloc/src/AllocatorImpl.cpp" bodystart="54" bodyend="57"/>
        <references refid="namespacevpr_1a8ca1df7d6fffb8c6c1730dfd4b7780bf" compoundref="_alloc_common_8hpp" startline="20">vpr::DefaultSmallHeapBlockSize</references>
        <referencedby refid="structvpr_1_1_allocator_impl_1a25d6e4d4fe1d7c4adf83e95915a0a810" compoundref="_allocator_impl_8cpp" startline="129" endline="266">allocateMemoryType</referencedby>
      </memberdef>
      <memberdef kind="function" id="structvpr_1_1_allocator_impl_1af4cde12705894f4ac76aa4d1eeeec6e7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>VkDeviceSize</type>
        <definition>VkDeviceSize vpr::AllocatorImpl::GetBufferImageGranularity</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetBufferImageGranularity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocatorImpl.hpp" line="30" column="1" bodyfile="alloc/src/AllocatorImpl.cpp" bodystart="75" bodyend="77"/>
        <references refid="structvpr_1_1_allocator_impl_1a0e6f55fc74957e9fbb1eece6951b80ff" compoundref="_allocator_impl_8hpp" startline="71">deviceProperties</references>
        <referencedby refid="structvpr_1_1_allocator_impl_1a25d6e4d4fe1d7c4adf83e95915a0a810" compoundref="_allocator_impl_8cpp" startline="129" endline="266">allocateMemoryType</referencedby>
      </memberdef>
      <memberdef kind="function" id="structvpr_1_1_allocator_impl_1a90517febe6d9f3841cdb924d019d11b6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t vpr::AllocatorImpl::GetMemoryHeapCount</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetMemoryHeapCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocatorImpl.hpp" line="32" column="1" bodyfile="alloc/src/AllocatorImpl.cpp" bodystart="79" bodyend="81"/>
        <references refid="structvpr_1_1_allocator_impl_1a08588041240a23937c472696c50ca38e" compoundref="_allocator_impl_8hpp" startline="72">deviceMemoryProperties</references>
      </memberdef>
      <memberdef kind="function" id="structvpr_1_1_allocator_impl_1a7848aa696f40eef78c8e380dd578b8ef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t vpr::AllocatorImpl::GetMemoryTypeCount</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetMemoryTypeCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocatorImpl.hpp" line="33" column="1" bodyfile="alloc/src/AllocatorImpl.cpp" bodystart="83" bodyend="85"/>
        <references refid="structvpr_1_1_allocator_impl_1a08588041240a23937c472696c50ca38e" compoundref="_allocator_impl_8hpp" startline="72">deviceMemoryProperties</references>
        <referencedby refid="structvpr_1_1_allocator_impl_1a8ff9089978ad4cbc031d2fb067b6de54" compoundref="_allocator_impl_8cpp" startline="22" endline="43">createAllocationMaps</referencedby>
      </memberdef>
      <memberdef kind="function" id="structvpr_1_1_allocator_impl_1a8ff9089978ad4cbc031d2fb067b6de54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::AllocatorImpl::createAllocationMaps</definition>
        <argsstring>()</argsstring>
        <name>createAllocationMaps</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocatorImpl.hpp" line="35" column="1" bodyfile="alloc/src/AllocatorImpl.cpp" bodystart="22" bodyend="43"/>
        <references refid="structvpr_1_1_allocator_impl_1a1c23a6ef4795d24410b6af8736228717" compoundref="_allocator_impl_8hpp" startline="60">allocations</references>
        <references refid="structvpr_1_1_allocator_impl_1ae80941f43777e8872bb2feb19ebe82a0" compoundref="_allocator_impl_8hpp" startline="61">emptyAllocations</references>
        <references refid="structvpr_1_1_allocator_impl_1a7848aa696f40eef78c8e380dd578b8ef" compoundref="_allocator_impl_8cpp" startline="83" endline="85">GetMemoryTypeCount</references>
        <references refid="structvpr_1_1_allocator_impl_1ac0e602f636913c7510718091629032f2a71726adf0ff60cd03eaf3c515883eeb8">LARGE</references>
        <references refid="structvpr_1_1_allocator_impl_1ac0e602f636913c7510718091629032f2ac87f3be66ffc3c0d4249f1c2cc5f3cce">MEDIUM</references>
        <references refid="structvpr_1_1_allocator_impl_1ac0e602f636913c7510718091629032f2a9b9c17e13f0e3dc9860a26e08b59b2a7">SMALL</references>
        <referencedby refid="structvpr_1_1_allocator_impl_1ac9ebcb725a5a9aa749108b4752eef0f3" compoundref="_allocator_impl_8cpp" startline="10" endline="20">AllocatorImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="structvpr_1_1_allocator_impl_1ac1c457665759826825cd1c0d2b5ad78d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::AllocatorImpl::clearAllocationMaps</definition>
        <argsstring>()</argsstring>
        <name>clearAllocationMaps</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocatorImpl.hpp" line="36" column="1" bodyfile="alloc/src/AllocatorImpl.cpp" bodystart="45" bodyend="52"/>
        <references refid="structvpr_1_1_allocator_impl_1a1c23a6ef4795d24410b6af8736228717" compoundref="_allocator_impl_8hpp" startline="60">allocations</references>
        <references refid="structvpr_1_1_allocator_impl_1ae80941f43777e8872bb2feb19ebe82a0" compoundref="_allocator_impl_8hpp" startline="61">emptyAllocations</references>
        <references refid="structvpr_1_1_allocator_impl_1a40fc7285e8f4404facd6b9ece0679e78" compoundref="_allocator_impl_8hpp" startline="62">privateAllocations</references>
      </memberdef>
      <memberdef kind="function" id="structvpr_1_1_allocator_impl_1a5990c518d05b0fad50f65d11df659a39" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t vpr::AllocatorImpl::findMemoryTypeIdx</definition>
        <argsstring>(const VkMemoryRequirements &amp;mem_reqs, const AllocationRequirements &amp;details) const noexcept</argsstring>
        <name>findMemoryTypeIdx</name>
        <param>
          <type>const VkMemoryRequirements &amp;</type>
          <declname>mem_reqs</declname>
        </param>
        <param>
          <type>const <ref refid="structvpr_1_1_allocation_requirements" kindref="compound">AllocationRequirements</ref> &amp;</type>
          <declname>details</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocatorImpl.hpp" line="39" column="1" bodyfile="alloc/src/AllocatorImpl.cpp" bodystart="87" bodyend="127"/>
        <references refid="namespacevpr_1a4670febea81bc9a6a25fb8b1cf1afaaa" compoundref="_alloc_common_8hpp" startline="82" endline="89">vpr::countBitsSet</references>
      </memberdef>
      <memberdef kind="function" id="structvpr_1_1_allocator_impl_1a25d6e4d4fe1d7c4adf83e95915a0a810" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkResult</type>
        <definition>VkResult vpr::AllocatorImpl::allocateMemoryType</definition>
        <argsstring>(const VkMemoryRequirements &amp;memory_reqs, const AllocationRequirements &amp;alloc_details, const uint32_t &amp;memory_type_idx, const SuballocationType &amp;type, Allocation &amp;dest_allocation)</argsstring>
        <name>allocateMemoryType</name>
        <param>
          <type>const VkMemoryRequirements &amp;</type>
          <declname>memory_reqs</declname>
        </param>
        <param>
          <type>const <ref refid="structvpr_1_1_allocation_requirements" kindref="compound">AllocationRequirements</ref> &amp;</type>
          <declname>alloc_details</declname>
        </param>
        <param>
          <type>const uint32_t &amp;</type>
          <declname>memory_type_idx</declname>
        </param>
        <param>
          <type>const <ref refid="namespacevpr_1a729c04888e8a0b67bdb473c36221615e" kindref="member">SuballocationType</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="classvpr_1_1_allocation" kindref="compound">Allocation</ref> &amp;</type>
          <declname>dest_allocation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocatorImpl.hpp" line="42" column="1" bodyfile="alloc/src/AllocatorImpl.cpp" bodystart="129" bodyend="266"/>
        <references refid="structvpr_1_1_allocator_impl_1a2ec18969e688b4cb472a16535482208d" compoundref="_allocator_impl_8cpp" startline="268" endline="289">allocatePrivateMemory</references>
        <references refid="structvpr_1_1_allocator_impl_1a1c23a6ef4795d24410b6af8736228717" compoundref="_allocator_impl_8hpp" startline="60">allocations</references>
        <references refid="structvpr_1_1_allocator_impl_1a7c6d7ed0127f8855626505597f52fbaa" compoundref="_allocator_impl_8hpp" startline="67">allocMutex</references>
        <references refid="namespacevpr_1a252c3121a6d349509e2184d4d4641152" compoundref="_alloc_common_8hpp" startline="16">vpr::DefaultLargeHeapBlockSize</references>
        <references refid="namespacevpr_1a5bba3da651d451dc432584c42b9e4ef2" compoundref="_alloc_common_8hpp" startline="18">vpr::DefaultMediumHeapBlockSize</references>
        <references refid="namespacevpr_1a8ca1df7d6fffb8c6c1730dfd4b7780bf" compoundref="_alloc_common_8hpp" startline="20">vpr::DefaultSmallHeapBlockSize</references>
        <references refid="structvpr_1_1_allocator_impl_1ae80941f43777e8872bb2feb19ebe82a0" compoundref="_allocator_impl_8hpp" startline="61">emptyAllocations</references>
        <references refid="structvpr_1_1_allocator_impl_1af2ca13cb9b36bb5dd5d937d1ecd8aa78" compoundref="_allocator_impl_8cpp" startline="59" endline="73">GetAllocSize</references>
        <references refid="structvpr_1_1_allocator_impl_1af4cde12705894f4ac76aa4d1eeeec6e7" compoundref="_allocator_impl_8cpp" startline="75" endline="77">GetBufferImageGranularity</references>
        <references refid="structvpr_1_1_allocator_impl_1af42f00943ffa38d2f02d24886f549911" compoundref="_allocator_impl_8cpp" startline="54" endline="57">GetPreferredBlockSize</references>
        <references refid="classvpr_1_1_allocation_1ad5d461398f23e593c58f70a8cac78922" compoundref="_allocation_8cpp" startline="62" endline="67">vpr::Allocation::Init</references>
        <references refid="structvpr_1_1_allocator_impl_1ac0e602f636913c7510718091629032f2a71726adf0ff60cd03eaf3c515883eeb8">LARGE</references>
        <references refid="structvpr_1_1_allocator_impl_1af91bd8463e115344416716396c38a558" compoundref="_allocator_impl_8hpp" startline="68">logicalDevice</references>
        <references refid="structvpr_1_1_allocator_impl_1ac0e602f636913c7510718091629032f2ac87f3be66ffc3c0d4249f1c2cc5f3cce">MEDIUM</references>
        <references refid="structvpr_1_1_allocation_requirements_1a728999a7c098d84b06ab2ba4373472d0" compoundref="_allocation_requirements_8hpp" startline="14">vpr::AllocationRequirements::noNewAllocations</references>
        <references refid="structvpr_1_1_suballocation_request_1aa0b7cc608718008b543cea33aab059c3" compoundref="_suballocation_8hpp" startline="47">vpr::SuballocationRequest::Offset</references>
        <references refid="structvpr_1_1_allocation_requirements_1a164674fd0507f8982e6ec272d1f46ea7" compoundref="_allocation_requirements_8hpp" startline="23">vpr::AllocationRequirements::prefersDedicatedKHR</references>
        <references refid="structvpr_1_1_allocation_requirements_1ac090af25414224c2fcb36baae16f3265" compoundref="_allocation_requirements_8hpp" startline="18">vpr::AllocationRequirements::requiredFlags</references>
        <references refid="structvpr_1_1_allocation_requirements_1a84e600ef433ac8a3c3964bdc579cd0ee" compoundref="_allocation_requirements_8hpp" startline="25">vpr::AllocationRequirements::requiresDedicatedKHR</references>
        <references refid="structvpr_1_1_allocator_impl_1ac0e602f636913c7510718091629032f2a9b9c17e13f0e3dc9860a26e08b59b2a7">SMALL</references>
        <references refid="namespacevpr_1adb4fbe461c1ece0fd2c3f56bbb3f55e7" compoundref="_alloc_common_8hpp" startline="24">vpr::VALIDATE_MEMORY</references>
        <references refid="group___allocation_1ggaba421ef06b1d6b910602d0180c9eff78a76c3ec4c3969badcdd02e0c88b07077f">vpr::VALIDATION_PASSED</references>
        <references refid="namespacevpr_1a85a5d8c5ba83b162eda5df835a7e6e4d" compoundref="vpr__stdafx_8h" startline="31">vpr::VERBOSE_LOGGING</references>
      </memberdef>
      <memberdef kind="function" id="structvpr_1_1_allocator_impl_1a2ec18969e688b4cb472a16535482208d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkResult</type>
        <definition>VkResult vpr::AllocatorImpl::allocatePrivateMemory</definition>
        <argsstring>(const VkDeviceSize &amp;size, const uint32_t &amp;memory_type_idx, Allocation &amp;dest_allocation, const VkMemoryPropertyFlags memory_flags)</argsstring>
        <name>allocatePrivateMemory</name>
        <param>
          <type>const VkDeviceSize &amp;</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const uint32_t &amp;</type>
          <declname>memory_type_idx</declname>
        </param>
        <param>
          <type><ref refid="classvpr_1_1_allocation" kindref="compound">Allocation</ref> &amp;</type>
          <declname>dest_allocation</declname>
        </param>
        <param>
          <type>const VkMemoryPropertyFlags</type>
          <declname>memory_flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocatorImpl.hpp" line="43" column="1" bodyfile="alloc/src/AllocatorImpl.cpp" bodystart="268" bodyend="289"/>
        <references refid="classvpr_1_1_allocation_1ad680abfd77facfe5efcc222b154b595d" compoundref="_allocation_8cpp" startline="79" endline="88">vpr::Allocation::InitPrivate</references>
        <references refid="structvpr_1_1_allocator_impl_1af91bd8463e115344416716396c38a558" compoundref="_allocator_impl_8hpp" startline="68">logicalDevice</references>
        <references refid="structvpr_1_1_allocator_impl_1a40fc7285e8f4404facd6b9ece0679e78" compoundref="_allocator_impl_8hpp" startline="62">privateAllocations</references>
        <references refid="structvpr_1_1_allocator_impl_1aef84c0c451b23346c729753fcb97a5aa" compoundref="_allocator_impl_8hpp" startline="66">privateMutex</references>
        <references refid="vk_assert_8hpp_1a92c2e07b0d021fc331be70a65c61dacc" compoundref="vk_assert_8hpp" startline="9">VkAssert</references>
        <referencedby refid="structvpr_1_1_allocator_impl_1a25d6e4d4fe1d7c4adf83e95915a0a810" compoundref="_allocator_impl_8cpp" startline="129" endline="266">allocateMemoryType</referencedby>
      </memberdef>
      <memberdef kind="function" id="structvpr_1_1_allocator_impl_1a4d132f78ac784684f0384127ff5c8624" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vpr::AllocatorImpl::freePrivateMemory</definition>
        <argsstring>(const Allocation &amp;memory_to_free)</argsstring>
        <name>freePrivateMemory</name>
        <param>
          <type>const <ref refid="classvpr_1_1_allocation" kindref="compound">Allocation</ref> &amp;</type>
          <declname>memory_to_free</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocatorImpl.hpp" line="46" column="1" bodyfile="alloc/src/AllocatorImpl.cpp" bodystart="291" bodyend="310"/>
        <references refid="classvpr_1_1_allocation_1ad23615cd9f84e8e2354cf1f1e7e8f162" compoundref="_allocation_8cpp" startline="207" endline="220">vpr::Allocation::IsPrivateAllocation</references>
        <references refid="structvpr_1_1_allocator_impl_1af91bd8463e115344416716396c38a558" compoundref="_allocator_impl_8hpp" startline="68">logicalDevice</references>
        <references refid="structvpr_1_1_allocator_impl_1a40fc7285e8f4404facd6b9ece0679e78" compoundref="_allocator_impl_8hpp" startline="62">privateAllocations</references>
        <references refid="structvpr_1_1_allocator_impl_1aef84c0c451b23346c729753fcb97a5aa" compoundref="_allocator_impl_8hpp" startline="66">privateMutex</references>
        <references refid="namespacevpr_1a85a5d8c5ba83b162eda5df835a7e6e4d" compoundref="vpr__stdafx_8h" startline="31">vpr::VERBOSE_LOGGING</references>
      </memberdef>
      <memberdef kind="function" id="structvpr_1_1_allocator_impl_1a28efd3faba024a98f8248ed47ccf16e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::AllocatorImpl::getBufferMemReqs</definition>
        <argsstring>(VkBuffer &amp;handle, VkMemoryRequirements &amp;reqs, bool &amp;requires_dedicated, bool &amp;prefers_dedicated)</argsstring>
        <name>getBufferMemReqs</name>
        <param>
          <type>VkBuffer &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>VkMemoryRequirements &amp;</type>
          <declname>reqs</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>requires_dedicated</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>prefers_dedicated</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocatorImpl.hpp" line="48" column="1" bodyfile="alloc/src/AllocatorImpl.cpp" bodystart="312" bodyend="334"/>
        <references refid="structvpr_1_1_allocator_impl_1af91bd8463e115344416716396c38a558" compoundref="_allocator_impl_8hpp" startline="68">logicalDevice</references>
        <references refid="structvpr_1_1_allocator_impl_1a8f9ab69ecc64171b01c1702e84840a3c" compoundref="_allocator_impl_8hpp" startline="86">pVkGetBufferMemoryRequirements2KHR</references>
        <references refid="structvpr_1_1_allocator_impl_1a59efc16df23a49f32b55da6c735fbd0d" compoundref="_allocator_impl_8hpp" startline="77">usingMemoryExtensions</references>
        <references refid="namespacevpr_1ad538fcb0f871555b51406d7e80686287" compoundref="_create_info_base_8hpp" startline="594">vpr::vk_buffer_memory_requirements_info_khr_base</references>
        <references refid="namespacevpr_1a2bc55ee52a1acae337862efbe04c80db" compoundref="_create_info_base_8hpp" startline="580">vpr::vk_dedicated_memory_requirements_khr_base</references>
        <references refid="namespacevpr_1ac766a293c48713df69cb70b0be896faa" compoundref="_create_info_base_8hpp" startline="612">vpr::vk_memory_requirements_2_khr_base</references>
      </memberdef>
      <memberdef kind="function" id="structvpr_1_1_allocator_impl_1a6c291f049e194c616fba17b070dacd0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::AllocatorImpl::getImageMemReqs</definition>
        <argsstring>(VkImage &amp;handle, VkMemoryRequirements &amp;reqs, bool &amp;requires_dedicated, bool &amp;prefers_dedicated)</argsstring>
        <name>getImageMemReqs</name>
        <param>
          <type>VkImage &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>VkMemoryRequirements &amp;</type>
          <declname>reqs</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>requires_dedicated</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>prefers_dedicated</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocatorImpl.hpp" line="49" column="1" bodyfile="alloc/src/AllocatorImpl.cpp" bodystart="336" bodyend="358"/>
        <references refid="structvpr_1_1_allocator_impl_1af91bd8463e115344416716396c38a558" compoundref="_allocator_impl_8hpp" startline="68">logicalDevice</references>
        <references refid="structvpr_1_1_allocator_impl_1aa9f5eea17e3de7583a63abf46d2eff5a" compoundref="_allocator_impl_8hpp" startline="87">pVkGetImageMemoryRequirements2KHR</references>
        <references refid="structvpr_1_1_allocator_impl_1a59efc16df23a49f32b55da6c735fbd0d" compoundref="_allocator_impl_8hpp" startline="77">usingMemoryExtensions</references>
        <references refid="namespacevpr_1a2bc55ee52a1acae337862efbe04c80db" compoundref="_create_info_base_8hpp" startline="580">vpr::vk_dedicated_memory_requirements_khr_base</references>
        <references refid="namespacevpr_1a8d7d04f5ccd5b03b8ef03bc10f463cb1" compoundref="_create_info_base_8hpp" startline="600">vpr::vk_image_memory_requirements_info_khr_base</references>
        <references refid="namespacevpr_1ac766a293c48713df69cb70b0be896faa" compoundref="_create_info_base_8hpp" startline="612">vpr::vk_memory_requirements_2_khr_base</references>
      </memberdef>
      <memberdef kind="function" id="structvpr_1_1_allocator_impl_1af2ca13cb9b36bb5dd5d937d1ecd8aa78" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvpr_1_1_allocator_impl_1ac0e602f636913c7510718091629032f2" kindref="member">AllocationSize</ref></type>
        <definition>AllocatorImpl::AllocationSize vpr::AllocatorImpl::GetAllocSize</definition>
        <argsstring>(const VkDeviceSize &amp;size) const</argsstring>
        <name>GetAllocSize</name>
        <param>
          <type>const VkDeviceSize &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocatorImpl.hpp" line="58" column="1" bodyfile="alloc/src/AllocatorImpl.cpp" bodystart="59" bodyend="73"/>
        <references refid="structvpr_1_1_allocator_impl_1ac0e602f636913c7510718091629032f2a71726adf0ff60cd03eaf3c515883eeb8">LARGE</references>
        <references refid="namespacevpr_1ab07aac59268ca38105a0594265b8b930" compoundref="_alloc_common_8hpp" startline="17">vpr::LargeBlockSingleAllocSize</references>
        <references refid="structvpr_1_1_allocator_impl_1ac0e602f636913c7510718091629032f2ac87f3be66ffc3c0d4249f1c2cc5f3cce">MEDIUM</references>
        <references refid="namespacevpr_1a77400da4edea43dcef9869495bf7357c" compoundref="_alloc_common_8hpp" startline="19">vpr::MediumBlockSingleAllocSize</references>
        <references refid="structvpr_1_1_allocator_impl_1ac0e602f636913c7510718091629032f2a9b9c17e13f0e3dc9860a26e08b59b2a7">SMALL</references>
        <references refid="namespacevpr_1a484021b88b79f2fc9b5bf590f5241cd2" compoundref="_alloc_common_8hpp" startline="21">vpr::SmallBlockSingleAllocSize</references>
        <referencedby refid="structvpr_1_1_allocator_impl_1a25d6e4d4fe1d7c4adf83e95915a0a810" compoundref="_allocator_impl_8cpp" startline="129" endline="266">allocateMemoryType</referencedby>
      </memberdef>
      <memberdef kind="function" id="structvpr_1_1_allocator_impl_1a86f11d286906668192d79d69bedda96b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::AllocatorImpl::fetchAllocFunctionPointersKHR</definition>
        <argsstring>()</argsstring>
        <name>fetchAllocFunctionPointersKHR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocatorImpl.hpp" line="84" column="1" bodyfile="alloc/src/AllocatorImpl.cpp" bodystart="362" bodyend="386"/>
        <references refid="structvpr_1_1_allocator_impl_1af91bd8463e115344416716396c38a558" compoundref="_allocator_impl_8hpp" startline="68">logicalDevice</references>
        <references refid="structvpr_1_1_allocator_impl_1a8f9ab69ecc64171b01c1702e84840a3c" compoundref="_allocator_impl_8hpp" startline="86">pVkGetBufferMemoryRequirements2KHR</references>
        <references refid="structvpr_1_1_allocator_impl_1aa9f5eea17e3de7583a63abf46d2eff5a" compoundref="_allocator_impl_8hpp" startline="87">pVkGetImageMemoryRequirements2KHR</references>
        <references refid="structvpr_1_1_allocator_impl_1a243bf4394ebe9999a421a49e90c25f96" compoundref="_allocator_impl_8hpp" startline="88">pVkGetImageSparseMemoryRequirements2KHR</references>
        <references refid="structvpr_1_1_allocator_impl_1a59efc16df23a49f32b55da6c735fbd0d" compoundref="_allocator_impl_8hpp" startline="77">usingMemoryExtensions</references>
        <referencedby refid="structvpr_1_1_allocator_impl_1ac9ebcb725a5a9aa749108b4752eef0f3" compoundref="_allocator_impl_8cpp" startline="10" endline="20">AllocatorImpl</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="66">
        <label>std::list&lt; T &gt;::iterator</label>
      </node>
      <node id="65">
        <label>std::vector&lt; suballocationList::iterator &gt;</label>
        <childnode refid="66" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="60">
        <label>std::vector&lt; std::unique_ptr&lt; vpr::MemoryBlock &gt; &gt;</label>
        <childnode refid="61" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="70">
        <label>vpr::Allocation</label>
        <link refid="classvpr_1_1_allocation"/>
        <childnode refid="71" relation="usage">
          <edgelabel>impl</edgelabel>
        </childnode>
      </node>
      <node id="72">
        <label>vpr::AllocationImpl</label>
        <link refid="structvpr_1_1_allocation_impl"/>
      </node>
      <node id="71">
        <label>std::unique_ptr&lt; vpr::AllocationImpl &gt;</label>
        <childnode refid="72" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="53">
        <label>vpr::AllocatorImpl</label>
        <link refid="structvpr_1_1_allocator_impl"/>
        <childnode refid="54" relation="usage">
          <edgelabel>allocations</edgelabel>
        </childnode>
        <childnode refid="67" relation="usage">
          <edgelabel>emptyAllocations</edgelabel>
        </childnode>
        <childnode refid="69" relation="usage">
          <edgelabel>privateAllocations</edgelabel>
        </childnode>
      </node>
      <node id="69">
        <label>std::unordered_set&lt; vpr::Allocation, vpr::AllocationHash &gt;</label>
        <childnode refid="70" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="63">
        <label>std::list&lt; Suballocation &gt;</label>
        <childnode refid="64" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="67">
        <label>std::map&lt; AllocationSize, std::vector&lt; bool &gt; &gt;</label>
        <childnode refid="68" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="54">
        <label>std::map&lt; AllocationSize, std::vector&lt; std::unique_ptr&lt; vpr::AllocationCollection &gt; &gt; &gt;</label>
        <childnode refid="55" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="57">
        <label>vpr::AllocationCollection</label>
        <link refid="classvpr_1_1_allocation_collection"/>
        <childnode refid="58" relation="usage">
          <edgelabel>allocator</edgelabel>
        </childnode>
        <childnode refid="60" relation="usage">
          <edgelabel>allocations</edgelabel>
        </childnode>
      </node>
      <node id="59">
        <label>std::unique_ptr&lt; vpr::AllocatorImpl &gt;</label>
        <childnode refid="53" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="62">
        <label>vpr::MemoryBlock</label>
        <link refid="classvpr_1_1_memory_block"/>
        <childnode refid="63" relation="usage">
          <edgelabel>Suballocations</edgelabel>
        </childnode>
        <childnode refid="65" relation="usage">
          <edgelabel>availSuballocations</edgelabel>
        </childnode>
      </node>
      <node id="64">
        <label>vpr::Suballocation</label>
        <link refid="structvpr_1_1_suballocation"/>
      </node>
      <node id="61">
        <label>std::unique_ptr&lt; vpr::MemoryBlock &gt;</label>
        <childnode refid="62" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="56">
        <label>std::unique_ptr&lt; vpr::AllocationCollection &gt;</label>
        <childnode refid="57" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="68">
        <label>std::vector&lt; bool &gt;</label>
      </node>
      <node id="58">
        <label>vpr::Allocator</label>
        <link refid="classvpr_1_1_allocator"/>
        <childnode refid="59" relation="usage">
          <edgelabel>impl</edgelabel>
        </childnode>
      </node>
      <node id="55">
        <label>std::vector&lt; std::unique_ptr&lt; vpr::AllocationCollection &gt; &gt;</label>
        <childnode refid="56" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="alloc/src/AllocatorImpl.hpp" line="25" column="1" bodyfile="alloc/src/AllocatorImpl.hpp" bodystart="25" bodyend="92"/>
    <listofallmembers>
      <member refid="structvpr_1_1_allocator_impl_1a25d6e4d4fe1d7c4adf83e95915a0a810" prot="public" virt="non-virtual"><scope>vpr::AllocatorImpl</scope><name>allocateMemoryType</name></member>
      <member refid="structvpr_1_1_allocator_impl_1a2ec18969e688b4cb472a16535482208d" prot="public" virt="non-virtual"><scope>vpr::AllocatorImpl</scope><name>allocatePrivateMemory</name></member>
      <member refid="structvpr_1_1_allocator_impl_1a1c23a6ef4795d24410b6af8736228717" prot="public" virt="non-virtual"><scope>vpr::AllocatorImpl</scope><name>allocations</name></member>
      <member refid="structvpr_1_1_allocator_impl_1ac0e602f636913c7510718091629032f2" prot="public" virt="non-virtual"><scope>vpr::AllocatorImpl</scope><name>AllocationSize</name></member>
      <member refid="structvpr_1_1_allocator_impl_1ac9ebcb725a5a9aa749108b4752eef0f3" prot="public" virt="non-virtual"><scope>vpr::AllocatorImpl</scope><name>AllocatorImpl</name></member>
      <member refid="structvpr_1_1_allocator_impl_1a7c6d7ed0127f8855626505597f52fbaa" prot="public" virt="non-virtual"><scope>vpr::AllocatorImpl</scope><name>allocMutex</name></member>
      <member refid="structvpr_1_1_allocator_impl_1ac1c457665759826825cd1c0d2b5ad78d" prot="public" virt="non-virtual"><scope>vpr::AllocatorImpl</scope><name>clearAllocationMaps</name></member>
      <member refid="structvpr_1_1_allocator_impl_1a8ff9089978ad4cbc031d2fb067b6de54" prot="public" virt="non-virtual"><scope>vpr::AllocatorImpl</scope><name>createAllocationMaps</name></member>
      <member refid="structvpr_1_1_allocator_impl_1a619ce3b614015e030bea8a3239d60fe2" prot="public" virt="non-virtual"><scope>vpr::AllocatorImpl</scope><name>DebugVisualization</name></member>
      <member refid="structvpr_1_1_allocator_impl_1aa54730353079686243fbe5f8545267d0" prot="public" virt="non-virtual"><scope>vpr::AllocatorImpl</scope><name>DebugVisualizationImpl</name></member>
      <member refid="structvpr_1_1_allocator_impl_1a08588041240a23937c472696c50ca38e" prot="public" virt="non-virtual"><scope>vpr::AllocatorImpl</scope><name>deviceMemoryProperties</name></member>
      <member refid="structvpr_1_1_allocator_impl_1a0e6f55fc74957e9fbb1eece6951b80ff" prot="public" virt="non-virtual"><scope>vpr::AllocatorImpl</scope><name>deviceProperties</name></member>
      <member refid="structvpr_1_1_allocator_impl_1ae80941f43777e8872bb2feb19ebe82a0" prot="public" virt="non-virtual"><scope>vpr::AllocatorImpl</scope><name>emptyAllocations</name></member>
      <member refid="structvpr_1_1_allocator_impl_1a86f11d286906668192d79d69bedda96b" prot="public" virt="non-virtual"><scope>vpr::AllocatorImpl</scope><name>fetchAllocFunctionPointersKHR</name></member>
      <member refid="structvpr_1_1_allocator_impl_1a5990c518d05b0fad50f65d11df659a39" prot="public" virt="non-virtual"><scope>vpr::AllocatorImpl</scope><name>findMemoryTypeIdx</name></member>
      <member refid="structvpr_1_1_allocator_impl_1a4d132f78ac784684f0384127ff5c8624" prot="public" virt="non-virtual"><scope>vpr::AllocatorImpl</scope><name>freePrivateMemory</name></member>
      <member refid="structvpr_1_1_allocator_impl_1af2ca13cb9b36bb5dd5d937d1ecd8aa78" prot="public" virt="non-virtual"><scope>vpr::AllocatorImpl</scope><name>GetAllocSize</name></member>
      <member refid="structvpr_1_1_allocator_impl_1af4cde12705894f4ac76aa4d1eeeec6e7" prot="public" virt="non-virtual"><scope>vpr::AllocatorImpl</scope><name>GetBufferImageGranularity</name></member>
      <member refid="structvpr_1_1_allocator_impl_1a28efd3faba024a98f8248ed47ccf16e0" prot="public" virt="non-virtual"><scope>vpr::AllocatorImpl</scope><name>getBufferMemReqs</name></member>
      <member refid="structvpr_1_1_allocator_impl_1a6c291f049e194c616fba17b070dacd0a" prot="public" virt="non-virtual"><scope>vpr::AllocatorImpl</scope><name>getImageMemReqs</name></member>
      <member refid="structvpr_1_1_allocator_impl_1a90517febe6d9f3841cdb924d019d11b6" prot="public" virt="non-virtual"><scope>vpr::AllocatorImpl</scope><name>GetMemoryHeapCount</name></member>
      <member refid="structvpr_1_1_allocator_impl_1a7848aa696f40eef78c8e380dd578b8ef" prot="public" virt="non-virtual"><scope>vpr::AllocatorImpl</scope><name>GetMemoryTypeCount</name></member>
      <member refid="structvpr_1_1_allocator_impl_1af42f00943ffa38d2f02d24886f549911" prot="public" virt="non-virtual"><scope>vpr::AllocatorImpl</scope><name>GetPreferredBlockSize</name></member>
      <member refid="structvpr_1_1_allocator_impl_1af91bd8463e115344416716396c38a558" prot="public" virt="non-virtual"><scope>vpr::AllocatorImpl</scope><name>logicalDevice</name></member>
      <member refid="structvpr_1_1_allocator_impl_1adc8fb6b990aabbfa9900fb6c520eecaf" prot="public" virt="non-virtual"><scope>vpr::AllocatorImpl</scope><name>pAllocationCallbacks</name></member>
      <member refid="structvpr_1_1_allocator_impl_1a3d877474ed5d36c1775b8b5f15c3e1fb" prot="public" virt="non-virtual"><scope>vpr::AllocatorImpl</scope><name>physicalDevice</name></member>
      <member refid="structvpr_1_1_allocator_impl_1ab1cf702b6e6af76558127e563013bcf0" prot="public" virt="non-virtual"><scope>vpr::AllocatorImpl</scope><name>preferredLargeHeapBlockSize</name></member>
      <member refid="structvpr_1_1_allocator_impl_1a5cab97c58e55a21704d5ece6e356df4e" prot="public" virt="non-virtual"><scope>vpr::AllocatorImpl</scope><name>preferredSmallHeapBlockSize</name></member>
      <member refid="structvpr_1_1_allocator_impl_1a40fc7285e8f4404facd6b9ece0679e78" prot="public" virt="non-virtual"><scope>vpr::AllocatorImpl</scope><name>privateAllocations</name></member>
      <member refid="structvpr_1_1_allocator_impl_1aef84c0c451b23346c729753fcb97a5aa" prot="public" virt="non-virtual"><scope>vpr::AllocatorImpl</scope><name>privateMutex</name></member>
      <member refid="structvpr_1_1_allocator_impl_1a8f9ab69ecc64171b01c1702e84840a3c" prot="public" virt="non-virtual"><scope>vpr::AllocatorImpl</scope><name>pVkGetBufferMemoryRequirements2KHR</name></member>
      <member refid="structvpr_1_1_allocator_impl_1aa9f5eea17e3de7583a63abf46d2eff5a" prot="public" virt="non-virtual"><scope>vpr::AllocatorImpl</scope><name>pVkGetImageMemoryRequirements2KHR</name></member>
      <member refid="structvpr_1_1_allocator_impl_1a243bf4394ebe9999a421a49e90c25f96" prot="public" virt="non-virtual"><scope>vpr::AllocatorImpl</scope><name>pVkGetImageSparseMemoryRequirements2KHR</name></member>
      <member refid="structvpr_1_1_allocator_impl_1a59efc16df23a49f32b55da6c735fbd0d" prot="public" virt="non-virtual"><scope>vpr::AllocatorImpl</scope><name>usingMemoryExtensions</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
