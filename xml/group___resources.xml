<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="group___resources" kind="group">
    <compoundname>Resources</compoundname>
    <title>Resources</title>
    <innerclass refid="classvpr_1_1_buffer" prot="public">vpr::Buffer</innerclass>
    <innerclass refid="classvpr_1_1_descriptor_pool" prot="public">vpr::DescriptorPool</innerclass>
    <innerclass refid="classvpr_1_1_descriptor_set" prot="public">vpr::DescriptorSet</innerclass>
    <innerclass refid="classvpr_1_1_descriptor_set_layout" prot="public">vpr::DescriptorSetLayout</innerclass>
    <innerclass refid="classvpr_1_1_image" prot="public">vpr::Image</innerclass>
    <innerclass refid="classvpr_1_1_pipeline_cache" prot="public">vpr::PipelineCache</innerclass>
    <innerclass refid="classvpr_1_1_pipeline_layout" prot="public">vpr::PipelineLayout</innerclass>
    <innerclass refid="classvpr_1_1_sampler" prot="public">vpr::Sampler</innerclass>
    <innerclass refid="classvpr_1_1_shader_module" prot="public">vpr::ShaderModule</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___resources_1ga15cb81d86cd2049d31138af8286c4f8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="vpr__stdafx_8h_1a4b940ef35de523c8e5f22898d34635f1" kindref="member">VPR_API</ref> void</type>
        <definition>void vpr::SetLoggingRepository_VprResource</definition>
        <argsstring>(void *repo)</argsstring>
        <name>SetLoggingRepository_VprResource</name>
        <param>
          <type>void *</type>
          <declname>repo</declname>
        </param>
        <briefdescription>
<para>Pass an easyloggingpp logging repository pointer into this function, and it will be set as the repository for this module to use. </para>        </briefdescription>
        <detaileddescription>
<para>That way, all log messages from all modules (even when using this as a shared library) will go to the same sinks </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/PipelineCache.hpp" line="67" column="1" bodyfile="resource/src/PipelineCache.cpp" bodystart="15" bodyend="18"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The resources group/module encompasses objects that especially require Vulkan/GPU resource allocation, lifetime management, and objects that most benefit from C++ abstraction to remove boilerplate code. </para>    </briefdescription>
    <detaileddescription>
<para>It also relates most to the allocator module: this was separated, however, as it mostly enables much of these classes to be abstract and is complex enough to warrant its own grouping. </para>    </detaileddescription>
  </compounddef>
</doxygen>
