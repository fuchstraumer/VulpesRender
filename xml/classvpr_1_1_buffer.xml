<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classvpr_1_1_buffer" kind="class" language="C++" prot="public">
    <compoundname>vpr::Buffer</compoundname>
    <includes refid="_buffer_deprecated_8hpp" local="no">BufferDeprecated.hpp</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classvpr_1_1_buffer_1ae8f9c59d2eff06decbf4853a8c22ed49" prot="protected" static="no" mutable="no">
        <type>VkDevice</type>
        <definition>VkDevice vpr::Buffer::parent</definition>
        <argsstring></argsstring>
        <name>parent</name>
        <initializer>{ VK_NULL_HANDLE }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="112" column="1" bodyfile="resource/include/BufferDeprecated.hpp" bodystart="112" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_buffer_1a843cf452ecc4aed63fef2915d40ab9c4" compoundref="_buffer_deprecated_8cpp" startline="99" endline="118">CopyTo</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1abe56ee5b43a1be73960fa5edae0dcb0b" compoundref="_buffer_deprecated_8cpp" startline="40" endline="53">CreateBuffer</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1ac367138a3788a0a6df49c5c2ad890774" compoundref="_buffer_deprecated_8cpp" startline="264" endline="278">createStagingBuffer</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1a8c9624441b1de2b79940cd8cc802b7e2" compoundref="_buffer_deprecated_8cpp" startline="170" endline="177">CreateView</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1ab832b022c0ae579386133a23844ee5e5" compoundref="_buffer_deprecated_8cpp" startline="68" endline="76">Destroy</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1a805e50dbbed7233718d366a9742d3246" compoundref="_buffer_deprecated_8cpp" startline="189" endline="192">Flush</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1ae44f3e3a2bcb922d522088c102147663" compoundref="_buffer_deprecated_8cpp" startline="194" endline="197">Invalidate</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1a4c04d59a27d4c3471bdf90eda1c8b662" compoundref="_buffer_deprecated_8cpp" startline="179" endline="183">Map</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1a780ba4c43b7f1a8ec88a5990a76a3cd0" compoundref="_buffer_deprecated_8cpp" startline="185" endline="187">Unmap</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classvpr_1_1_buffer_1a6365cf8380f808b6377e1d6fd5a8dabc" prot="protected" static="no" mutable="no">
        <type>VkBuffer</type>
        <definition>VkBuffer vpr::Buffer::handle</definition>
        <argsstring></argsstring>
        <name>handle</name>
        <initializer>{ VK_NULL_HANDLE }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="113" column="1" bodyfile="resource/include/BufferDeprecated.hpp" bodystart="113" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_buffer_1a9c05fd68db6222e85e09f0a1a56f62b9" compoundref="_buffer_deprecated_8cpp" startline="92" endline="97">CopyTo</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1abe56ee5b43a1be73960fa5edae0dcb0b" compoundref="_buffer_deprecated_8cpp" startline="40" endline="53">CreateBuffer</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1a51dacf22b4cbfcf0224c467e1f7ba7ac" compoundref="_buffer_deprecated_8cpp" startline="160" endline="168">CreateMemoryBarrier</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1a8c9624441b1de2b79940cd8cc802b7e2" compoundref="_buffer_deprecated_8cpp" startline="170" endline="177">CreateView</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1ab832b022c0ae579386133a23844ee5e5" compoundref="_buffer_deprecated_8cpp" startline="68" endline="76">Destroy</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1ab4f798aaec92861e165cff4e7a12cc18" compoundref="_buffer_deprecated_8cpp" startline="147" endline="158">Fill</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1afbe401f3002cb40c4751ac8653aa9c64" compoundref="_buffer_deprecated_8cpp" startline="215" endline="218">setDescriptorInfo</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1a9ecbb5e39195c842b83008ca22e3dc10" compoundref="_buffer_deprecated_8cpp" startline="143" endline="145">Update</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1a41840496cd50949a36d89d96e5cb52cd" compoundref="_buffer_deprecated_8cpp" startline="199" endline="201">vkHandle</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classvpr_1_1_buffer_1a899072855c6876154374aa5f3f6f9930" prot="protected" static="no" mutable="no">
        <type>VkBufferView</type>
        <definition>VkBufferView vpr::Buffer::view</definition>
        <argsstring></argsstring>
        <name>view</name>
        <initializer>{ VK_NULL_HANDLE }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="114" column="1" bodyfile="resource/include/BufferDeprecated.hpp" bodystart="114" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_buffer_1a8c9624441b1de2b79940cd8cc802b7e2" compoundref="_buffer_deprecated_8cpp" startline="170" endline="177">CreateView</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1ab832b022c0ae579386133a23844ee5e5" compoundref="_buffer_deprecated_8cpp" startline="68" endline="76">Destroy</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1a608136242a4072d8c74f5d36868fb72e" compoundref="_buffer_deprecated_8cpp" startline="207" endline="209">View</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classvpr_1_1_buffer_1a4c5f396675e349cac8fb6fca7ad6cd80" prot="protected" static="no" mutable="no">
        <type>VkBufferCreateInfo</type>
        <definition>VkBufferCreateInfo vpr::Buffer::createInfo</definition>
        <argsstring></argsstring>
        <name>createInfo</name>
        <initializer>{ }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="115" column="1" bodyfile="resource/include/BufferDeprecated.hpp" bodystart="115" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_buffer_1abe56ee5b43a1be73960fa5edae0dcb0b" compoundref="_buffer_deprecated_8cpp" startline="40" endline="53">CreateBuffer</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1a51dacf22b4cbfcf0224c467e1f7ba7ac" compoundref="_buffer_deprecated_8cpp" startline="160" endline="168">CreateMemoryBarrier</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1a7956ffcc00fd58b07d6a140cd2563c5d" compoundref="_buffer_deprecated_8cpp" startline="280" endline="282">Usage</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classvpr_1_1_buffer_1aaf2339590cf74eac281d09f22af0d8a5" prot="protected" static="no" mutable="no">
        <type>VkBufferViewCreateInfo</type>
        <definition>VkBufferViewCreateInfo vpr::Buffer::viewCreateInfo</definition>
        <argsstring></argsstring>
        <name>viewCreateInfo</name>
        <initializer>{ VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO, nullptr, 0 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="116" column="1" bodyfile="resource/include/BufferDeprecated.hpp" bodystart="116" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_buffer_1a8c9624441b1de2b79940cd8cc802b7e2" compoundref="_buffer_deprecated_8cpp" startline="170" endline="177">CreateView</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classvpr_1_1_buffer_1a8b5196067a89499585f01e629b7f8b55" prot="protected" static="no" mutable="yes">
        <type>VkMappedMemoryRange</type>
        <definition>VkMappedMemoryRange vpr::Buffer::mappedMemoryRange</definition>
        <argsstring></argsstring>
        <name>mappedMemoryRange</name>
        <initializer>{ }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="117" column="1" bodyfile="resource/include/BufferDeprecated.hpp" bodystart="117" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_buffer_1a805e50dbbed7233718d366a9742d3246" compoundref="_buffer_deprecated_8cpp" startline="189" endline="192">Flush</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1ae44f3e3a2bcb922d522088c102147663" compoundref="_buffer_deprecated_8cpp" startline="194" endline="197">Invalidate</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1af9dcb09ccc1d047250a579a94827c2fd" compoundref="_buffer_deprecated_8cpp" startline="211" endline="213">MappedMemoryRange</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1a07d786f45ff6d6712962da7910f6280c" compoundref="_buffer_deprecated_8cpp" startline="284" endline="287">setMappedMemoryRange</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classvpr_1_1_buffer_1a5dd595b4b93d33d49a15e9852381d307" prot="protected" static="no" mutable="no">
        <type><ref refid="classvpr_1_1_allocation" kindref="compound">Allocation</ref></type>
        <definition>Allocation vpr::Buffer::memoryAllocation</definition>
        <argsstring></argsstring>
        <name>memoryAllocation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="118" column="1" bodyfile="resource/include/BufferDeprecated.hpp" bodystart="118" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_buffer_1abe56ee5b43a1be73960fa5edae0dcb0b" compoundref="_buffer_deprecated_8cpp" startline="40" endline="53">CreateBuffer</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1a51dacf22b4cbfcf0224c467e1f7ba7ac" compoundref="_buffer_deprecated_8cpp" startline="160" endline="168">CreateMemoryBarrier</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1ab832b022c0ae579386133a23844ee5e5" compoundref="_buffer_deprecated_8cpp" startline="68" endline="76">Destroy</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1a4c04d59a27d4c3471bdf90eda1c8b662" compoundref="_buffer_deprecated_8cpp" startline="179" endline="183">Map</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1a07d786f45ff6d6712962da7910f6280c" compoundref="_buffer_deprecated_8cpp" startline="284" endline="287">setMappedMemoryRange</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1a780ba4c43b7f1a8ec88a5990a76a3cd0" compoundref="_buffer_deprecated_8cpp" startline="185" endline="187">Unmap</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classvpr_1_1_buffer_1a9b69d98c01a256db2adc7878f4bed830" prot="protected" static="no" mutable="no">
        <type>VkDeviceSize</type>
        <definition>VkDeviceSize vpr::Buffer::size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <initializer>{ std::numeric_limits&lt;VkDeviceSize&gt;::max() }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="119" column="1" bodyfile="resource/include/BufferDeprecated.hpp" bodystart="119" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_buffer_1ae38678b302a270b3716b43505e2f7e96" compoundref="_buffer_deprecated_8cpp" startline="78" endline="90">CopyToMapped</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1abe56ee5b43a1be73960fa5edae0dcb0b" compoundref="_buffer_deprecated_8cpp" startline="40" endline="53">CreateBuffer</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1add8b2dbfd79028bedfd30b5c5f48b3b2" compoundref="_buffer_deprecated_8cpp" startline="231" endline="245">CreateStagingBuffer</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1ac367138a3788a0a6df49c5c2ad890774" compoundref="_buffer_deprecated_8cpp" startline="264" endline="278">createStagingBuffer</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1a05392d328541adc298ff9b5283a9c6ed" compoundref="_buffer_deprecated_8cpp" startline="227" endline="229">Size</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classvpr_1_1_buffer_1ae153d808e4e2c669e5a925f166aa3e56" prot="protected" static="no" mutable="no">
        <type>VkDeviceSize</type>
        <definition>VkDeviceSize vpr::Buffer::dataSize</definition>
        <argsstring></argsstring>
        <name>dataSize</name>
        <initializer>{ std::numeric_limits&lt;VkDeviceSize&gt;::max() }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="120" column="1" bodyfile="resource/include/BufferDeprecated.hpp" bodystart="120" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_buffer_1abe56ee5b43a1be73960fa5edae0dcb0b" compoundref="_buffer_deprecated_8cpp" startline="40" endline="53">CreateBuffer</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1afbe401f3002cb40c4751ac8653aa9c64" compoundref="_buffer_deprecated_8cpp" startline="215" endline="218">setDescriptorInfo</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classvpr_1_1_buffer_1aa3dff6309040e420e748c8b6fc79d345" prot="protected" static="no" mutable="no">
        <type>void *</type>
        <definition>void* vpr::Buffer::mappedMemory</definition>
        <argsstring></argsstring>
        <name>mappedMemory</name>
        <initializer>{ nullptr }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="121" column="1" bodyfile="resource/include/BufferDeprecated.hpp" bodystart="121" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_buffer_1ae38678b302a270b3716b43505e2f7e96" compoundref="_buffer_deprecated_8cpp" startline="78" endline="90">CopyToMapped</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1a4c04d59a27d4c3471bdf90eda1c8b662" compoundref="_buffer_deprecated_8cpp" startline="179" endline="183">Map</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1af8411e6c6a353e03d6223c5c991832b1" compoundref="_buffer_deprecated_8cpp" startline="260" endline="262">SetMappedMemory</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classvpr_1_1_buffer_1a10eaeb5b9ea147bc00ca1b58653cdf69" prot="protected" static="no" mutable="yes">
        <type>bool</type>
        <definition>bool vpr::Buffer::descriptorInfoSet</definition>
        <argsstring></argsstring>
        <name>descriptorInfoSet</name>
        <initializer>{ false }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="124" column="1" bodyfile="resource/include/BufferDeprecated.hpp" bodystart="124" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_buffer_1a567f2f27453fe745111b34344549ca14" compoundref="_buffer_deprecated_8cpp" startline="220" endline="225">GetDescriptor</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1afbe401f3002cb40c4751ac8653aa9c64" compoundref="_buffer_deprecated_8cpp" startline="215" endline="218">setDescriptorInfo</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classvpr_1_1_buffer_1a96bfe91f86798bdd5c4caafd5d03e0ad" prot="protected" static="no" mutable="yes">
        <type>VkDescriptorBufferInfo</type>
        <definition>VkDescriptorBufferInfo vpr::Buffer::descriptor</definition>
        <argsstring></argsstring>
        <name>descriptor</name>
        <initializer>{ VK_NULL_HANDLE, 0, 0 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="125" column="1" bodyfile="resource/include/BufferDeprecated.hpp" bodystart="125" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_buffer_1a567f2f27453fe745111b34344549ca14" compoundref="_buffer_deprecated_8cpp" startline="220" endline="225">GetDescriptor</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1afbe401f3002cb40c4751ac8653aa9c64" compoundref="_buffer_deprecated_8cpp" startline="215" endline="218">setDescriptorInfo</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classvpr_1_1_buffer_1a24dae3446fe85a6f29004853cf5c728a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::Buffer::Buffer</definition>
        <argsstring>(const Buffer &amp;)=delete</argsstring>
        <name>Buffer</name>
        <param>
          <type>const <ref refid="classvpr_1_1_buffer" kindref="compound">Buffer</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="24" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_buffer_1a9d1cc3aef09675b1d5104916b91f174d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classvpr_1_1_buffer" kindref="compound">Buffer</ref> &amp;</type>
        <definition>Buffer&amp; vpr::Buffer::operator=</definition>
        <argsstring>(const Buffer &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classvpr_1_1_buffer" kindref="compound">Buffer</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="25" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classvpr_1_1_buffer_1ac0c82ee1769d0de860e0dc8b25c2d1fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::Buffer::Buffer</definition>
        <argsstring>(const VkDevice &amp;parent)</argsstring>
        <name>Buffer</name>
        <param>
          <type>const VkDevice &amp;</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="28" column="1" bodyfile="resource/src/BufferDeprecated.cpp" bodystart="12" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_buffer_1a7540498f21ea184173975560ff9e6327" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::Buffer::~Buffer</definition>
        <argsstring>()</argsstring>
        <name>~Buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="29" column="1" bodyfile="resource/src/BufferDeprecated.cpp" bodystart="15" bodyend="17"/>
        <references refid="classvpr_1_1_buffer_1ab832b022c0ae579386133a23844ee5e5" compoundref="_buffer_deprecated_8cpp" startline="68" endline="76">Destroy</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_buffer_1a7ab2098cefe7698b330aa2268b24ba4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::Buffer::Buffer</definition>
        <argsstring>(Buffer &amp;&amp;other) noexcept</argsstring>
        <name>Buffer</name>
        <param>
          <type><ref refid="classvpr_1_1_buffer" kindref="compound">Buffer</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="30" column="1" bodyfile="resource/src/BufferDeprecated.cpp" bodystart="19" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_buffer_1ae5359de9bb68e064331174620d3493e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classvpr_1_1_buffer" kindref="compound">Buffer</ref> &amp;</type>
        <definition>Buffer &amp; vpr::Buffer::operator=</definition>
        <argsstring>(Buffer &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classvpr_1_1_buffer" kindref="compound">Buffer</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="31" column="1" bodyfile="resource/src/BufferDeprecated.cpp" bodystart="27" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_buffer_1abe56ee5b43a1be73960fa5edae0dcb0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Buffer::CreateBuffer</definition>
        <argsstring>(const VkBufferUsageFlags &amp;usage_flags, const VkMemoryPropertyFlags &amp;memory_flags, const VkDeviceSize &amp;size)</argsstring>
        <name>CreateBuffer</name>
        <param>
          <type>const VkBufferUsageFlags &amp;</type>
          <declname>usage_flags</declname>
        </param>
        <param>
          <type>const VkMemoryPropertyFlags &amp;</type>
          <declname>memory_flags</declname>
        </param>
        <param>
          <type>const VkDeviceSize &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Creates underlying handles, binds a memory region from the allocator system, and prepares everything for use. </para>        </briefdescription>
        <detaileddescription>
<para>Does not load data, however <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>usage_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The intended use of this buffer. If memory_flags is VK_MEMORY_PROPERTY_DEVICE_LOCAL, be sure to | your usage flag with VK_BUFFER_USAGE_TRANFER_SRC_BIT/VK_BUFFER_USAGE_TRANFER_DST_BIT based on which way you&apos;ll be passing resources </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memory_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>for rendering resources larger than ~512 bytes, use VK_MEMORY_PROPERTY_DEVICE_LOCAL. Otherwise, consider using VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT |&apos;d with VK_MEMORY_PROPERTY_HOST_COHERENT bit, especially for things that are frequently updated like UBOs. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="41" column="1" bodyfile="resource/src/BufferDeprecated.cpp" bodystart="40" bodyend="53"/>
        <references refid="classvpr_1_1_buffer_1a4c5f396675e349cac8fb6fca7ad6cd80" compoundref="_buffer_deprecated_8hpp" startline="115">createInfo</references>
        <references refid="classvpr_1_1_buffer_1ae153d808e4e2c669e5a925f166aa3e56" compoundref="_buffer_deprecated_8hpp" startline="120">dataSize</references>
        <references refid="classvpr_1_1_buffer_1a6365cf8380f808b6377e1d6fd5a8dabc" compoundref="_buffer_deprecated_8hpp" startline="113">handle</references>
        <references refid="classvpr_1_1_buffer_1a5dd595b4b93d33d49a15e9852381d307" compoundref="_buffer_deprecated_8hpp" startline="118">memoryAllocation</references>
        <references refid="classvpr_1_1_buffer_1ae8f9c59d2eff06decbf4853a8c22ed49" compoundref="_buffer_deprecated_8hpp" startline="112">parent</references>
        <references refid="structvpr_1_1_allocation_requirements_1aa51fb8ff6e7248e82ec19834c923f5bf" compoundref="_allocation_requirements_8hpp" startline="21">vpr::AllocationRequirements::preferredFlags</references>
        <references refid="structvpr_1_1_allocation_requirements_1abfa545adb01b6f16b8936561d4a54fd8" compoundref="_allocation_requirements_8hpp" startline="16">vpr::AllocationRequirements::privateMemory</references>
        <references refid="structvpr_1_1_allocation_requirements_1ac090af25414224c2fcb36baae16f3265" compoundref="_allocation_requirements_8hpp" startline="18">vpr::AllocationRequirements::requiredFlags</references>
        <references refid="classvpr_1_1_buffer_1a07d786f45ff6d6712962da7910f6280c" compoundref="_buffer_deprecated_8cpp" startline="284" endline="287">setMappedMemoryRange</references>
        <references refid="classvpr_1_1_allocation_1aa1c4b67be8e0f44155dcd26ca93f6ec2" compoundref="_allocation_8hpp" startline="51">vpr::Allocation::Size</references>
        <references refid="classvpr_1_1_buffer_1a9b69d98c01a256db2adc7878f4bed830" compoundref="_buffer_deprecated_8hpp" startline="119">size</references>
        <references refid="vk_assert_8hpp_1a92c2e07b0d021fc331be70a65c61dacc" compoundref="vk_assert_8hpp" startline="9">VkAssert</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_buffer_1ac21673494c6f504e886e1e4fc4cacda5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Buffer::CreateBuffer</definition>
        <argsstring>(const VkBufferCreateInfo &amp;create_info, const VkMemoryPropertyFlags &amp;memory_flags)</argsstring>
        <name>CreateBuffer</name>
        <param>
          <type>const VkBufferCreateInfo &amp;</type>
          <declname>create_info</declname>
        </param>
        <param>
          <type>const VkMemoryPropertyFlags &amp;</type>
          <declname>memory_flags</declname>
        </param>
        <briefdescription>
<para>Creates underlying handles and binds a memory region from the allocator subsystem, but takes a VkBufferCreatInfo structure containing all the relevant required setup information. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="46" column="1" bodyfile="resource/src/BufferDeprecated.cpp" bodystart="55" bodyend="66"/>
        <references refid="classvpr_1_1_buffer_1a4c5f396675e349cac8fb6fca7ad6cd80" compoundref="_buffer_deprecated_8hpp" startline="115">createInfo</references>
        <references refid="classvpr_1_1_buffer_1ae153d808e4e2c669e5a925f166aa3e56" compoundref="_buffer_deprecated_8hpp" startline="120">dataSize</references>
        <references refid="classvpr_1_1_buffer_1a6365cf8380f808b6377e1d6fd5a8dabc" compoundref="_buffer_deprecated_8hpp" startline="113">handle</references>
        <references refid="classvpr_1_1_buffer_1a5dd595b4b93d33d49a15e9852381d307" compoundref="_buffer_deprecated_8hpp" startline="118">memoryAllocation</references>
        <references refid="classvpr_1_1_buffer_1ae8f9c59d2eff06decbf4853a8c22ed49" compoundref="_buffer_deprecated_8hpp" startline="112">parent</references>
        <references refid="structvpr_1_1_allocation_requirements_1aa51fb8ff6e7248e82ec19834c923f5bf" compoundref="_allocation_requirements_8hpp" startline="21">vpr::AllocationRequirements::preferredFlags</references>
        <references refid="structvpr_1_1_allocation_requirements_1abfa545adb01b6f16b8936561d4a54fd8" compoundref="_allocation_requirements_8hpp" startline="16">vpr::AllocationRequirements::privateMemory</references>
        <references refid="structvpr_1_1_allocation_requirements_1ac090af25414224c2fcb36baae16f3265" compoundref="_allocation_requirements_8hpp" startline="18">vpr::AllocationRequirements::requiredFlags</references>
        <references refid="classvpr_1_1_buffer_1a07d786f45ff6d6712962da7910f6280c" compoundref="_buffer_deprecated_8cpp" startline="284" endline="287">setMappedMemoryRange</references>
        <references refid="classvpr_1_1_allocation_1aa1c4b67be8e0f44155dcd26ca93f6ec2" compoundref="_allocation_8hpp" startline="51">vpr::Allocation::Size</references>
        <references refid="classvpr_1_1_buffer_1a9b69d98c01a256db2adc7878f4bed830" compoundref="_buffer_deprecated_8hpp" startline="119">size</references>
        <references refid="vk_assert_8hpp_1a92c2e07b0d021fc331be70a65c61dacc" compoundref="vk_assert_8hpp" startline="9">VkAssert</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_buffer_1ab832b022c0ae579386133a23844ee5e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Buffer::Destroy</definition>
        <argsstring>()</argsstring>
        <name>Destroy</name>
        <briefdescription>
<para>Destroys handles belonging to this object and attempts to free/unbind the memory region it used. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="49" column="1" bodyfile="resource/src/BufferDeprecated.cpp" bodystart="68" bodyend="76"/>
        <references refid="classvpr_1_1_buffer_1a6365cf8380f808b6377e1d6fd5a8dabc" compoundref="_buffer_deprecated_8hpp" startline="113">handle</references>
        <references refid="classvpr_1_1_buffer_1a5dd595b4b93d33d49a15e9852381d307" compoundref="_buffer_deprecated_8hpp" startline="118">memoryAllocation</references>
        <references refid="classvpr_1_1_buffer_1ae8f9c59d2eff06decbf4853a8c22ed49" compoundref="_buffer_deprecated_8hpp" startline="112">parent</references>
        <references refid="classvpr_1_1_buffer_1a899072855c6876154374aa5f3f6f9930" compoundref="_buffer_deprecated_8hpp" startline="114">view</references>
        <referencedby refid="classvpr_1_1_buffer_1a7540498f21ea184173975560ff9e6327" compoundref="_buffer_deprecated_8cpp" startline="15" endline="17">~Buffer</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_buffer_1ae38678b302a270b3716b43505e2f7e96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Buffer::CopyToMapped</definition>
        <argsstring>(const void *data, const VkDeviceSize &amp;size, const VkDeviceSize &amp;offset)</argsstring>
        <name>CopyToMapped</name>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const VkDeviceSize &amp;</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const VkDeviceSize &amp;</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Maps this object, copies data to this object, then ensures to unmap this object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>whatever you intend to copy. Some objects might have to be const_cast&apos;ed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of data being copied, which can be much smaller than the total size </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>destination offset, but can be set to 0 if copying to the front of the buffer or if the copy size is equivalent to the buffer&apos;s total size. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="56" column="1" bodyfile="resource/src/BufferDeprecated.cpp" bodystart="78" bodyend="90"/>
        <references refid="classvpr_1_1_buffer_1a4c04d59a27d4c3471bdf90eda1c8b662" compoundref="_buffer_deprecated_8cpp" startline="179" endline="183">Map</references>
        <references refid="classvpr_1_1_buffer_1aa3dff6309040e420e748c8b6fc79d345" compoundref="_buffer_deprecated_8hpp" startline="121">mappedMemory</references>
        <references refid="classvpr_1_1_buffer_1a05392d328541adc298ff9b5283a9c6ed" compoundref="_buffer_deprecated_8cpp" startline="227" endline="229">Size</references>
        <references refid="classvpr_1_1_buffer_1a9b69d98c01a256db2adc7878f4bed830" compoundref="_buffer_deprecated_8hpp" startline="119">size</references>
        <references refid="classvpr_1_1_buffer_1a780ba4c43b7f1a8ec88a5990a76a3cd0" compoundref="_buffer_deprecated_8cpp" startline="185" endline="187">Unmap</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_buffer_1a9c05fd68db6222e85e09f0a1a56f62b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Buffer::CopyTo</definition>
        <argsstring>(const Buffer *other_buffer, const VkCommandBuffer &amp;cmd, const VkDeviceSize offset)</argsstring>
        <name>CopyTo</name>
        <param>
          <type>const <ref refid="classvpr_1_1_buffer" kindref="compound">Buffer</ref> *</type>
          <declname>other_buffer</declname>
        </param>
        <param>
          <type>const VkCommandBuffer &amp;</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>const VkDeviceSize</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Copies the data in the given <ref refid="classvpr_1_1_buffer" kindref="compound">Buffer</ref> pointer to this object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="59" column="1" bodyfile="resource/src/BufferDeprecated.cpp" bodystart="92" bodyend="97"/>
        <references refid="classvpr_1_1_buffer_1a6365cf8380f808b6377e1d6fd5a8dabc" compoundref="_buffer_deprecated_8hpp" startline="113">handle</references>
        <references refid="classvpr_1_1_buffer_1a05392d328541adc298ff9b5283a9c6ed" compoundref="_buffer_deprecated_8cpp" startline="227" endline="229">Size</references>
        <references refid="classvpr_1_1_buffer_1a41840496cd50949a36d89d96e5cb52cd" compoundref="_buffer_deprecated_8cpp" startline="199" endline="201">vkHandle</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_buffer_1a843cf452ecc4aed63fef2915d40ab9c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Buffer::CopyTo</definition>
        <argsstring>(const void *data, const VkCommandBuffer &amp;transfer_cmd, const VkDeviceSize &amp;copy_size, const VkDeviceSize &amp;copy_offset)</argsstring>
        <name>CopyTo</name>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const VkCommandBuffer &amp;</type>
          <declname>transfer_cmd</declname>
        </param>
        <param>
          <type>const VkDeviceSize &amp;</type>
          <declname>copy_size</declname>
        </param>
        <param>
          <type>const VkDeviceSize &amp;</type>
          <declname>copy_offset</declname>
        </param>
        <briefdescription>
<para>Copys the data pointed to by the relevant parameter into a staging buffer, then records commands copying data from the staging object into the destination object. </para>        </briefdescription>
        <detaileddescription>
<para>The lifetime of the staging buffer will persist after the command is submitted: make sure to call FreeStagingBuffers() somewhat frequently, in order to ensure that excess host-side memory isn&apos;t being occupied/used. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="65" column="1" bodyfile="resource/src/BufferDeprecated.cpp" bodystart="99" bodyend="118"/>
        <references refid="classvpr_1_1_buffer_1ac367138a3788a0a6df49c5c2ad890774" compoundref="_buffer_deprecated_8cpp" startline="264" endline="278">createStagingBuffer</references>
        <references refid="classvpr_1_1_buffer_1a6365cf8380f808b6377e1d6fd5a8dabc" compoundref="_buffer_deprecated_8hpp" startline="113">handle</references>
        <references refid="classvpr_1_1_allocation_1a1a223e41ca865271544ece71d18edce2" compoundref="_allocation_8cpp" startline="141" endline="162">vpr::Allocation::Memory</references>
        <references refid="classvpr_1_1_allocation_1acb642a53c185ac6530ed60959b0e4397" compoundref="_allocation_8cpp" startline="164" endline="182">vpr::Allocation::Offset</references>
        <references refid="classvpr_1_1_buffer_1ae8f9c59d2eff06decbf4853a8c22ed49" compoundref="_buffer_deprecated_8hpp" startline="112">parent</references>
        <references refid="vk_assert_8hpp_1a92c2e07b0d021fc331be70a65c61dacc" compoundref="vk_assert_8hpp" startline="9">VkAssert</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_buffer_1a3a369873112eb478f3dfdf7b1549d2f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Buffer::CopyTo</definition>
        <argsstring>(const void *data, CommandPool *cmd_pool, const VkQueue &amp;transfer_queue, const VkDeviceSize &amp;size, const VkDeviceSize &amp;offset)</argsstring>
        <name>CopyTo</name>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="classvpr_1_1_command_pool" kindref="compound">CommandPool</ref> *</type>
          <declname>cmd_pool</declname>
        </param>
        <param>
          <type>const VkQueue &amp;</type>
          <declname>transfer_queue</declname>
        </param>
        <param>
          <type>const VkDeviceSize &amp;</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const VkDeviceSize &amp;</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Copies data using a single command buffer submission form the given pool to the given queue. </para>        </briefdescription>
        <detaileddescription>
<para>Attempt to use a transfer-specialized queue when available. <xrefsect id="deprecated_1_deprecated000002"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use the other CopyTo method that accepts a command buffer instead of this one: using a single command buffer submission like this method does is wasteful, and is not as safe as the other method: if that method is used with a TransferPool, the transfer is guarded with a VkFence (and this method is not). Additionally, the TransferPool class is thread-safe and protects access to its queue and command pool. </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="70" column="1" bodyfile="resource/src/BufferDeprecated.cpp" bodystart="120" bodyend="141"/>
        <references refid="classvpr_1_1_buffer_1ac367138a3788a0a6df49c5c2ad890774" compoundref="_buffer_deprecated_8cpp" startline="264" endline="278">createStagingBuffer</references>
        <references refid="classvpr_1_1_command_pool_1ac46b6fae9d0650041a4929698d59508a" compoundref="_command_pool_8cpp" startline="122" endline="137">vpr::CommandPool::EndSingleCmdBuffer</references>
        <references refid="classvpr_1_1_buffer_1a6365cf8380f808b6377e1d6fd5a8dabc" compoundref="_buffer_deprecated_8hpp" startline="113">handle</references>
        <references refid="classvpr_1_1_allocation_1a1a223e41ca865271544ece71d18edce2" compoundref="_allocation_8cpp" startline="141" endline="162">vpr::Allocation::Memory</references>
        <references refid="classvpr_1_1_allocation_1acb642a53c185ac6530ed60959b0e4397" compoundref="_allocation_8cpp" startline="164" endline="182">vpr::Allocation::Offset</references>
        <references refid="classvpr_1_1_buffer_1ae8f9c59d2eff06decbf4853a8c22ed49" compoundref="_buffer_deprecated_8hpp" startline="112">parent</references>
        <references refid="classvpr_1_1_command_pool_1a27e9ae2e084faaffe032cb9b92ad2fa4" compoundref="_command_pool_8cpp" startline="102" endline="120">vpr::CommandPool::StartSingleCmdBuffer</references>
        <references refid="vk_assert_8hpp_1a92c2e07b0d021fc331be70a65c61dacc" compoundref="vk_assert_8hpp" startline="9">VkAssert</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_buffer_1a9ecbb5e39195c842b83008ca22e3dc10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Buffer::Update</definition>
        <argsstring>(const VkCommandBuffer &amp;cmd, const VkDeviceSize &amp;data_sz, const VkDeviceSize &amp;offset, const void *data)</argsstring>
        <name>Update</name>
        <param>
          <type>const VkCommandBuffer &amp;</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>const VkDeviceSize &amp;</type>
          <declname>data_sz</declname>
        </param>
        <param>
          <type>const VkDeviceSize &amp;</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Used to update a sub-region of the buffer. </para>        </briefdescription>
        <detaileddescription>
<para>Cannot be called in an active renderpass. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="74" column="1" bodyfile="resource/src/BufferDeprecated.cpp" bodystart="143" bodyend="145"/>
        <references refid="classvpr_1_1_buffer_1a6365cf8380f808b6377e1d6fd5a8dabc" compoundref="_buffer_deprecated_8hpp" startline="113">handle</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_buffer_1ab4f798aaec92861e165cff4e7a12cc18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Buffer::Fill</definition>
        <argsstring>(const VkCommandBuffer &amp;cmd, const VkDeviceSize sz, const VkDeviceSize offset, const uint32_t value)</argsstring>
        <name>Fill</name>
        <param>
          <type>const VkCommandBuffer &amp;</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>const VkDeviceSize</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>const VkDeviceSize</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Fills buffer with given value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="78" column="1" bodyfile="resource/src/BufferDeprecated.cpp" bodystart="147" bodyend="158"/>
        <references refid="classvpr_1_1_buffer_1a6365cf8380f808b6377e1d6fd5a8dabc" compoundref="_buffer_deprecated_8hpp" startline="113">handle</references>
        <references refid="classvpr_1_1_buffer_1a05392d328541adc298ff9b5283a9c6ed" compoundref="_buffer_deprecated_8cpp" startline="227" endline="229">Size</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_buffer_1a51dacf22b4cbfcf0224c467e1f7ba7ac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>VkBufferMemoryBarrier</type>
        <definition>VkBufferMemoryBarrier vpr::Buffer::CreateMemoryBarrier</definition>
        <argsstring>(VkAccessFlags src, VkAccessFlags dst, uint32_t src_idx, uint32_t dst_idx, VkDeviceSize sz) const</argsstring>
        <name>CreateMemoryBarrier</name>
        <param>
          <type>VkAccessFlags</type>
          <declname>src</declname>
        </param>
        <param>
          <type>VkAccessFlags</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>src_idx</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>dst_idx</declname>
        </param>
        <param>
          <type>VkDeviceSize</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="80" column="1" bodyfile="resource/src/BufferDeprecated.cpp" bodystart="160" bodyend="168"/>
        <references refid="classvpr_1_1_buffer_1a4c5f396675e349cac8fb6fca7ad6cd80" compoundref="_buffer_deprecated_8hpp" startline="115">createInfo</references>
        <references refid="classvpr_1_1_buffer_1a6365cf8380f808b6377e1d6fd5a8dabc" compoundref="_buffer_deprecated_8hpp" startline="113">handle</references>
        <references refid="classvpr_1_1_buffer_1a5dd595b4b93d33d49a15e9852381d307" compoundref="_buffer_deprecated_8hpp" startline="118">memoryAllocation</references>
        <references refid="classvpr_1_1_allocation_1acb642a53c185ac6530ed60959b0e4397" compoundref="_allocation_8cpp" startline="164" endline="182">vpr::Allocation::Offset</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_buffer_1a8c9624441b1de2b79940cd8cc802b7e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Buffer::CreateView</definition>
        <argsstring>(const VkFormat format, const VkDeviceSize range, const VkDeviceSize offset)</argsstring>
        <name>CreateView</name>
        <param>
          <type>const VkFormat</type>
          <declname>format</declname>
        </param>
        <param>
          <type>const VkDeviceSize</type>
          <declname>range</declname>
        </param>
        <param>
          <type>const VkDeviceSize</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="82" column="1" bodyfile="resource/src/BufferDeprecated.cpp" bodystart="170" bodyend="177"/>
        <references refid="classvpr_1_1_buffer_1a6365cf8380f808b6377e1d6fd5a8dabc" compoundref="_buffer_deprecated_8hpp" startline="113">handle</references>
        <references refid="classvpr_1_1_buffer_1ae8f9c59d2eff06decbf4853a8c22ed49" compoundref="_buffer_deprecated_8hpp" startline="112">parent</references>
        <references refid="classvpr_1_1_buffer_1a899072855c6876154374aa5f3f6f9930" compoundref="_buffer_deprecated_8hpp" startline="114">view</references>
        <references refid="classvpr_1_1_buffer_1aaf2339590cf74eac281d09f22af0d8a5" compoundref="_buffer_deprecated_8hpp" startline="116">viewCreateInfo</references>
        <references refid="vk_assert_8hpp_1a92c2e07b0d021fc331be70a65c61dacc" compoundref="vk_assert_8hpp" startline="9">VkAssert</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_buffer_1a4c04d59a27d4c3471bdf90eda1c8b662" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Buffer::Map</definition>
        <argsstring>(const VkDeviceSize &amp;offset=0)</argsstring>
        <name>Map</name>
        <param>
          <type>const VkDeviceSize &amp;</type>
          <declname>offset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="84" column="1" bodyfile="resource/src/BufferDeprecated.cpp" bodystart="179" bodyend="183"/>
        <references refid="classvpr_1_1_buffer_1aa3dff6309040e420e748c8b6fc79d345" compoundref="_buffer_deprecated_8hpp" startline="121">mappedMemory</references>
        <references refid="classvpr_1_1_allocation_1a1a223e41ca865271544ece71d18edce2" compoundref="_allocation_8cpp" startline="141" endline="162">vpr::Allocation::Memory</references>
        <references refid="classvpr_1_1_buffer_1a5dd595b4b93d33d49a15e9852381d307" compoundref="_buffer_deprecated_8hpp" startline="118">memoryAllocation</references>
        <references refid="classvpr_1_1_allocation_1acb642a53c185ac6530ed60959b0e4397" compoundref="_allocation_8cpp" startline="164" endline="182">vpr::Allocation::Offset</references>
        <references refid="classvpr_1_1_buffer_1ae8f9c59d2eff06decbf4853a8c22ed49" compoundref="_buffer_deprecated_8hpp" startline="112">parent</references>
        <references refid="classvpr_1_1_allocation_1aa1c4b67be8e0f44155dcd26ca93f6ec2" compoundref="_allocation_8hpp" startline="51">vpr::Allocation::Size</references>
        <references refid="vk_assert_8hpp_1a92c2e07b0d021fc331be70a65c61dacc" compoundref="vk_assert_8hpp" startline="9">VkAssert</references>
        <referencedby refid="classvpr_1_1_buffer_1ae38678b302a270b3716b43505e2f7e96" compoundref="_buffer_deprecated_8cpp" startline="78" endline="90">CopyToMapped</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_buffer_1a780ba4c43b7f1a8ec88a5990a76a3cd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Buffer::Unmap</definition>
        <argsstring>()</argsstring>
        <name>Unmap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="85" column="1" bodyfile="resource/src/BufferDeprecated.cpp" bodystart="185" bodyend="187"/>
        <references refid="classvpr_1_1_allocation_1a1a223e41ca865271544ece71d18edce2" compoundref="_allocation_8cpp" startline="141" endline="162">vpr::Allocation::Memory</references>
        <references refid="classvpr_1_1_buffer_1a5dd595b4b93d33d49a15e9852381d307" compoundref="_buffer_deprecated_8hpp" startline="118">memoryAllocation</references>
        <references refid="classvpr_1_1_buffer_1ae8f9c59d2eff06decbf4853a8c22ed49" compoundref="_buffer_deprecated_8hpp" startline="112">parent</references>
        <referencedby refid="classvpr_1_1_buffer_1ae38678b302a270b3716b43505e2f7e96" compoundref="_buffer_deprecated_8cpp" startline="78" endline="90">CopyToMapped</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_buffer_1a805e50dbbed7233718d366a9742d3246" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Buffer::Flush</definition>
        <argsstring>()</argsstring>
        <name>Flush</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="86" column="1" bodyfile="resource/src/BufferDeprecated.cpp" bodystart="189" bodyend="192"/>
        <references refid="classvpr_1_1_buffer_1a8b5196067a89499585f01e629b7f8b55" compoundref="_buffer_deprecated_8hpp" startline="117">mappedMemoryRange</references>
        <references refid="classvpr_1_1_buffer_1ae8f9c59d2eff06decbf4853a8c22ed49" compoundref="_buffer_deprecated_8hpp" startline="112">parent</references>
        <references refid="vk_assert_8hpp_1a92c2e07b0d021fc331be70a65c61dacc" compoundref="vk_assert_8hpp" startline="9">VkAssert</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_buffer_1ae44f3e3a2bcb922d522088c102147663" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Buffer::Invalidate</definition>
        <argsstring>()</argsstring>
        <name>Invalidate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="87" column="1" bodyfile="resource/src/BufferDeprecated.cpp" bodystart="194" bodyend="197"/>
        <references refid="classvpr_1_1_buffer_1a8b5196067a89499585f01e629b7f8b55" compoundref="_buffer_deprecated_8hpp" startline="117">mappedMemoryRange</references>
        <references refid="classvpr_1_1_buffer_1ae8f9c59d2eff06decbf4853a8c22ed49" compoundref="_buffer_deprecated_8hpp" startline="112">parent</references>
        <references refid="vk_assert_8hpp_1a92c2e07b0d021fc331be70a65c61dacc" compoundref="vk_assert_8hpp" startline="9">VkAssert</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_buffer_1a41840496cd50949a36d89d96e5cb52cd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const VkBuffer &amp;</type>
        <definition>const VkBuffer &amp; vpr::Buffer::vkHandle</definition>
        <argsstring>() const noexcept</argsstring>
        <name>vkHandle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="89" column="1" bodyfile="resource/src/BufferDeprecated.cpp" bodystart="199" bodyend="201"/>
        <references refid="classvpr_1_1_buffer_1a6365cf8380f808b6377e1d6fd5a8dabc" compoundref="_buffer_deprecated_8hpp" startline="113">handle</references>
        <referencedby refid="classvpr_1_1_buffer_1a9c05fd68db6222e85e09f0a1a56f62b9" compoundref="_buffer_deprecated_8cpp" startline="92" endline="97">CopyTo</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_buffer_1a786d565bbd6e968395d470fe51f02cde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkBuffer &amp;</type>
        <definition>VkBuffer &amp; vpr::Buffer::vkHandle</definition>
        <argsstring>() noexcept</argsstring>
        <name>vkHandle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="90" column="1" bodyfile="resource/src/BufferDeprecated.cpp" bodystart="203" bodyend="205"/>
        <references refid="classvpr_1_1_buffer_1a6365cf8380f808b6377e1d6fd5a8dabc" compoundref="_buffer_deprecated_8hpp" startline="113">handle</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_buffer_1a608136242a4072d8c74f5d36868fb72e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const VkBufferView &amp;</type>
        <definition>const VkBufferView &amp; vpr::Buffer::View</definition>
        <argsstring>() const noexcept</argsstring>
        <name>View</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="91" column="1" bodyfile="resource/src/BufferDeprecated.cpp" bodystart="207" bodyend="209"/>
        <references refid="classvpr_1_1_buffer_1a899072855c6876154374aa5f3f6f9930" compoundref="_buffer_deprecated_8hpp" startline="114">view</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_buffer_1a567f2f27453fe745111b34344549ca14" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const VkDescriptorBufferInfo &amp;</type>
        <definition>const VkDescriptorBufferInfo &amp; vpr::Buffer::GetDescriptor</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetDescriptor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="92" column="1" bodyfile="resource/src/BufferDeprecated.cpp" bodystart="220" bodyend="225"/>
        <references refid="classvpr_1_1_buffer_1a96bfe91f86798bdd5c4caafd5d03e0ad" compoundref="_buffer_deprecated_8hpp" startline="125">descriptor</references>
        <references refid="classvpr_1_1_buffer_1a10eaeb5b9ea147bc00ca1b58653cdf69" compoundref="_buffer_deprecated_8hpp" startline="124">descriptorInfoSet</references>
        <references refid="classvpr_1_1_buffer_1afbe401f3002cb40c4751ac8653aa9c64" compoundref="_buffer_deprecated_8cpp" startline="215" endline="218">setDescriptorInfo</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_buffer_1af9dcb09ccc1d047250a579a94827c2fd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const VkMappedMemoryRange &amp;</type>
        <definition>const VkMappedMemoryRange &amp; vpr::Buffer::MappedMemoryRange</definition>
        <argsstring>() const noexcept</argsstring>
        <name>MappedMemoryRange</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="93" column="1" bodyfile="resource/src/BufferDeprecated.cpp" bodystart="211" bodyend="213"/>
        <references refid="classvpr_1_1_buffer_1a8b5196067a89499585f01e629b7f8b55" compoundref="_buffer_deprecated_8hpp" startline="117">mappedMemoryRange</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_buffer_1a05392d328541adc298ff9b5283a9c6ed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>VkDeviceSize</type>
        <definition>VkDeviceSize vpr::Buffer::Size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="95" column="1" bodyfile="resource/src/BufferDeprecated.cpp" bodystart="227" bodyend="229"/>
        <references refid="classvpr_1_1_buffer_1a9b69d98c01a256db2adc7878f4bed830" compoundref="_buffer_deprecated_8hpp" startline="119">size</references>
        <referencedby refid="classvpr_1_1_buffer_1a9c05fd68db6222e85e09f0a1a56f62b9" compoundref="_buffer_deprecated_8cpp" startline="92" endline="97">CopyTo</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1ae38678b302a270b3716b43505e2f7e96" compoundref="_buffer_deprecated_8cpp" startline="78" endline="90">CopyToMapped</referencedby>
        <referencedby refid="classvpr_1_1_buffer_1ab4f798aaec92861e165cff4e7a12cc18" compoundref="_buffer_deprecated_8cpp" startline="147" endline="158">Fill</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_buffer_1af8411e6c6a353e03d6223c5c991832b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Buffer::SetMappedMemory</definition>
        <argsstring>(void *mapping_destination)</argsstring>
        <name>SetMappedMemory</name>
        <param>
          <type>void *</type>
          <declname>mapping_destination</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="104" column="1" bodyfile="resource/src/BufferDeprecated.cpp" bodystart="260" bodyend="262"/>
        <references refid="classvpr_1_1_buffer_1aa3dff6309040e420e748c8b6fc79d345" compoundref="_buffer_deprecated_8hpp" startline="121">mappedMemory</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_buffer_1a7956ffcc00fd58b07d6a140cd2563c5d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>VkBufferUsageFlags</type>
        <definition>VkBufferUsageFlags vpr::Buffer::Usage</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Usage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="106" column="1" bodyfile="resource/src/BufferDeprecated.cpp" bodystart="280" bodyend="282"/>
        <references refid="classvpr_1_1_buffer_1a4c5f396675e349cac8fb6fca7ad6cd80" compoundref="_buffer_deprecated_8hpp" startline="115">createInfo</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classvpr_1_1_buffer_1add8b2dbfd79028bedfd30b5c5f48b3b2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Buffer::CreateStagingBuffer</definition>
        <argsstring>(const Device *dvc, const VkDeviceSize &amp;size, VkBuffer &amp;dest, Allocation &amp;dest_memory_range)</argsstring>
        <name>CreateStagingBuffer</name>
        <param>
          <type>const <ref refid="classvpr_1_1_device" kindref="compound">Device</ref> *</type>
          <declname>dvc</declname>
        </param>
        <param>
          <type>const VkDeviceSize &amp;</type>
          <declname>size</declname>
        </param>
        <param>
          <type>VkBuffer &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="classvpr_1_1_allocation" kindref="compound">Allocation</ref> &amp;</type>
          <declname>dest_memory_range</declname>
        </param>
        <briefdescription>
<para>Creates a staging buffer of given size, using the given (hopefully not used) VkBuffer handle and updating the members of the given <ref refid="classvpr_1_1_allocation" kindref="compound">Allocation</ref> struct. </para>        </briefdescription>
        <detaileddescription>
<para>Adds both of those objects to a static pool, so that they can be cleaned up together independent of individual object scopes and lifetimes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="100" column="1" bodyfile="resource/src/BufferDeprecated.cpp" bodystart="231" bodyend="245"/>
        <references refid="structvpr_1_1_allocation_requirements_1abfa545adb01b6f16b8936561d4a54fd8" compoundref="_allocation_requirements_8hpp" startline="16">vpr::AllocationRequirements::privateMemory</references>
        <references refid="structvpr_1_1_allocation_requirements_1ac090af25414224c2fcb36baae16f3265" compoundref="_allocation_requirements_8hpp" startline="18">vpr::AllocationRequirements::requiredFlags</references>
        <references refid="classvpr_1_1_buffer_1a9b69d98c01a256db2adc7878f4bed830" compoundref="_buffer_deprecated_8hpp" startline="119">size</references>
        <references refid="namespacevpr_1a4e3d32c1636a5f4959a4e32cf4c4fd20" compoundref="_create_info_base_8hpp" startline="72">vpr::vk_buffer_create_info_base</references>
        <references refid="vk_assert_8hpp_1a92c2e07b0d021fc331be70a65c61dacc" compoundref="vk_assert_8hpp" startline="9">VkAssert</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_buffer_1a14a5f04157433460a41b94ffd1ef7525" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classvpr_1_1_buffer" kindref="compound">Buffer</ref> &gt;</type>
        <definition>std::unique_ptr&lt; Buffer &gt; vpr::Buffer::CreateStagingBuffer</definition>
        <argsstring>(const Device *dvc, void *data, const size_t data_size)</argsstring>
        <name>CreateStagingBuffer</name>
        <param>
          <type>const <ref refid="classvpr_1_1_device" kindref="compound">Device</ref> *</type>
          <declname>dvc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>data_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="101" column="1" bodyfile="resource/src/BufferDeprecated.cpp" bodystart="247" bodyend="258"/>
        <references refid="namespacevpr_1a4e3d32c1636a5f4959a4e32cf4c4fd20" compoundref="_create_info_base_8hpp" startline="72">vpr::vk_buffer_create_info_base</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classvpr_1_1_buffer_1ac367138a3788a0a6df49c5c2ad890774" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Buffer::createStagingBuffer</definition>
        <argsstring>(const VkDeviceSize &amp;size, VkBuffer &amp;staging_buffer, Allocation &amp;dest_memory_range)</argsstring>
        <name>createStagingBuffer</name>
        <param>
          <type>const VkDeviceSize &amp;</type>
          <declname>size</declname>
        </param>
        <param>
          <type>VkBuffer &amp;</type>
          <declname>staging_buffer</declname>
        </param>
        <param>
          <type><ref refid="classvpr_1_1_allocation" kindref="compound">Allocation</ref> &amp;</type>
          <declname>dest_memory_range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="109" column="1" bodyfile="resource/src/BufferDeprecated.cpp" bodystart="264" bodyend="278"/>
        <references refid="classvpr_1_1_buffer_1ae8f9c59d2eff06decbf4853a8c22ed49" compoundref="_buffer_deprecated_8hpp" startline="112">parent</references>
        <references refid="structvpr_1_1_allocation_requirements_1abfa545adb01b6f16b8936561d4a54fd8" compoundref="_allocation_requirements_8hpp" startline="16">vpr::AllocationRequirements::privateMemory</references>
        <references refid="structvpr_1_1_allocation_requirements_1ac090af25414224c2fcb36baae16f3265" compoundref="_allocation_requirements_8hpp" startline="18">vpr::AllocationRequirements::requiredFlags</references>
        <references refid="classvpr_1_1_buffer_1a9b69d98c01a256db2adc7878f4bed830" compoundref="_buffer_deprecated_8hpp" startline="119">size</references>
        <references refid="namespacevpr_1a4e3d32c1636a5f4959a4e32cf4c4fd20" compoundref="_create_info_base_8hpp" startline="72">vpr::vk_buffer_create_info_base</references>
        <referencedby refid="classvpr_1_1_buffer_1a843cf452ecc4aed63fef2915d40ab9c4" compoundref="_buffer_deprecated_8cpp" startline="99" endline="118">CopyTo</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_buffer_1a07d786f45ff6d6712962da7910f6280c" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Buffer::setMappedMemoryRange</definition>
        <argsstring>() const</argsstring>
        <name>setMappedMemoryRange</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="110" column="1" bodyfile="resource/src/BufferDeprecated.cpp" bodystart="284" bodyend="287"/>
        <references refid="classvpr_1_1_buffer_1a8b5196067a89499585f01e629b7f8b55" compoundref="_buffer_deprecated_8hpp" startline="117">mappedMemoryRange</references>
        <references refid="classvpr_1_1_allocation_1a1a223e41ca865271544ece71d18edce2" compoundref="_allocation_8cpp" startline="141" endline="162">vpr::Allocation::Memory</references>
        <references refid="classvpr_1_1_buffer_1a5dd595b4b93d33d49a15e9852381d307" compoundref="_buffer_deprecated_8hpp" startline="118">memoryAllocation</references>
        <references refid="classvpr_1_1_allocation_1acb642a53c185ac6530ed60959b0e4397" compoundref="_allocation_8cpp" startline="164" endline="182">vpr::Allocation::Offset</references>
        <references refid="classvpr_1_1_allocation_1aa1c4b67be8e0f44155dcd26ca93f6ec2" compoundref="_allocation_8hpp" startline="51">vpr::Allocation::Size</references>
        <referencedby refid="classvpr_1_1_buffer_1abe56ee5b43a1be73960fa5edae0dcb0b" compoundref="_buffer_deprecated_8cpp" startline="40" endline="53">CreateBuffer</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_buffer_1afbe401f3002cb40c4751ac8653aa9c64" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Buffer::setDescriptorInfo</definition>
        <argsstring>() const noexcept</argsstring>
        <name>setDescriptorInfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="resource/include/BufferDeprecated.hpp" line="123" column="1" bodyfile="resource/src/BufferDeprecated.cpp" bodystart="215" bodyend="218"/>
        <references refid="classvpr_1_1_buffer_1ae153d808e4e2c669e5a925f166aa3e56" compoundref="_buffer_deprecated_8hpp" startline="120">dataSize</references>
        <references refid="classvpr_1_1_buffer_1a96bfe91f86798bdd5c4caafd5d03e0ad" compoundref="_buffer_deprecated_8hpp" startline="125">descriptor</references>
        <references refid="classvpr_1_1_buffer_1a10eaeb5b9ea147bc00ca1b58653cdf69" compoundref="_buffer_deprecated_8hpp" startline="124">descriptorInfoSet</references>
        <references refid="classvpr_1_1_buffer_1a6365cf8380f808b6377e1d6fd5a8dabc" compoundref="_buffer_deprecated_8hpp" startline="113">handle</references>
        <referencedby refid="classvpr_1_1_buffer_1a567f2f27453fe745111b34344549ca14" compoundref="_buffer_deprecated_8cpp" startline="220" endline="225">GetDescriptor</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para>{No longer recommended for use: unmaintained and not updated.</para></xrefdescription></xrefsect>} RAII wrapper around a VkBuffer object. Can be used for anything from VBOs+EBOs to compute storage buffers to uniform buffers. No initialization or resource creation is done until the CreateBuffer method is called: at this point, the size of the object must be submitted as this size is fixed after creating the VkBuffer object. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="82">
        <label>vpr::Allocation</label>
        <link refid="classvpr_1_1_allocation"/>
        <childnode refid="83" relation="usage">
          <edgelabel>impl</edgelabel>
        </childnode>
      </node>
      <node id="84">
        <label>vpr::AllocationImpl</label>
        <link refid="structvpr_1_1_allocation_impl"/>
      </node>
      <node id="83">
        <label>std::unique_ptr&lt; vpr::AllocationImpl &gt;</label>
        <childnode refid="84" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="81">
        <label>vpr::Buffer</label>
        <link refid="classvpr_1_1_buffer"/>
        <childnode refid="82" relation="usage">
          <edgelabel>memoryAllocation</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="resource/include/BufferDeprecated.hpp" line="23" column="1" bodyfile="resource/include/BufferDeprecated.hpp" bodystart="23" bodyend="127"/>
    <listofallmembers>
      <member refid="classvpr_1_1_buffer_1a24dae3446fe85a6f29004853cf5c728a" prot="private" virt="non-virtual"><scope>vpr::Buffer</scope><name>Buffer</name></member>
      <member refid="classvpr_1_1_buffer_1ac0c82ee1769d0de860e0dc8b25c2d1fa" prot="public" virt="non-virtual"><scope>vpr::Buffer</scope><name>Buffer</name></member>
      <member refid="classvpr_1_1_buffer_1a7ab2098cefe7698b330aa2268b24ba4b" prot="public" virt="non-virtual"><scope>vpr::Buffer</scope><name>Buffer</name></member>
      <member refid="classvpr_1_1_buffer_1a9c05fd68db6222e85e09f0a1a56f62b9" prot="public" virt="non-virtual"><scope>vpr::Buffer</scope><name>CopyTo</name></member>
      <member refid="classvpr_1_1_buffer_1a843cf452ecc4aed63fef2915d40ab9c4" prot="public" virt="non-virtual"><scope>vpr::Buffer</scope><name>CopyTo</name></member>
      <member refid="classvpr_1_1_buffer_1a3a369873112eb478f3dfdf7b1549d2f6" prot="public" virt="non-virtual"><scope>vpr::Buffer</scope><name>CopyTo</name></member>
      <member refid="classvpr_1_1_buffer_1ae38678b302a270b3716b43505e2f7e96" prot="public" virt="non-virtual"><scope>vpr::Buffer</scope><name>CopyToMapped</name></member>
      <member refid="classvpr_1_1_buffer_1abe56ee5b43a1be73960fa5edae0dcb0b" prot="public" virt="non-virtual"><scope>vpr::Buffer</scope><name>CreateBuffer</name></member>
      <member refid="classvpr_1_1_buffer_1ac21673494c6f504e886e1e4fc4cacda5" prot="public" virt="non-virtual"><scope>vpr::Buffer</scope><name>CreateBuffer</name></member>
      <member refid="classvpr_1_1_buffer_1a4c5f396675e349cac8fb6fca7ad6cd80" prot="protected" virt="non-virtual"><scope>vpr::Buffer</scope><name>createInfo</name></member>
      <member refid="classvpr_1_1_buffer_1a51dacf22b4cbfcf0224c467e1f7ba7ac" prot="public" virt="non-virtual"><scope>vpr::Buffer</scope><name>CreateMemoryBarrier</name></member>
      <member refid="classvpr_1_1_buffer_1add8b2dbfd79028bedfd30b5c5f48b3b2" prot="public" virt="non-virtual"><scope>vpr::Buffer</scope><name>CreateStagingBuffer</name></member>
      <member refid="classvpr_1_1_buffer_1a14a5f04157433460a41b94ffd1ef7525" prot="public" virt="non-virtual"><scope>vpr::Buffer</scope><name>CreateStagingBuffer</name></member>
      <member refid="classvpr_1_1_buffer_1ac367138a3788a0a6df49c5c2ad890774" prot="protected" virt="non-virtual"><scope>vpr::Buffer</scope><name>createStagingBuffer</name></member>
      <member refid="classvpr_1_1_buffer_1a8c9624441b1de2b79940cd8cc802b7e2" prot="public" virt="non-virtual"><scope>vpr::Buffer</scope><name>CreateView</name></member>
      <member refid="classvpr_1_1_buffer_1ae153d808e4e2c669e5a925f166aa3e56" prot="protected" virt="non-virtual"><scope>vpr::Buffer</scope><name>dataSize</name></member>
      <member refid="classvpr_1_1_buffer_1a96bfe91f86798bdd5c4caafd5d03e0ad" prot="protected" virt="non-virtual"><scope>vpr::Buffer</scope><name>descriptor</name></member>
      <member refid="classvpr_1_1_buffer_1a10eaeb5b9ea147bc00ca1b58653cdf69" prot="protected" virt="non-virtual"><scope>vpr::Buffer</scope><name>descriptorInfoSet</name></member>
      <member refid="classvpr_1_1_buffer_1ab832b022c0ae579386133a23844ee5e5" prot="public" virt="non-virtual"><scope>vpr::Buffer</scope><name>Destroy</name></member>
      <member refid="classvpr_1_1_buffer_1ab4f798aaec92861e165cff4e7a12cc18" prot="public" virt="non-virtual"><scope>vpr::Buffer</scope><name>Fill</name></member>
      <member refid="classvpr_1_1_buffer_1a805e50dbbed7233718d366a9742d3246" prot="public" virt="non-virtual"><scope>vpr::Buffer</scope><name>Flush</name></member>
      <member refid="classvpr_1_1_buffer_1a567f2f27453fe745111b34344549ca14" prot="public" virt="non-virtual"><scope>vpr::Buffer</scope><name>GetDescriptor</name></member>
      <member refid="classvpr_1_1_buffer_1a6365cf8380f808b6377e1d6fd5a8dabc" prot="protected" virt="non-virtual"><scope>vpr::Buffer</scope><name>handle</name></member>
      <member refid="classvpr_1_1_buffer_1ae44f3e3a2bcb922d522088c102147663" prot="public" virt="non-virtual"><scope>vpr::Buffer</scope><name>Invalidate</name></member>
      <member refid="classvpr_1_1_buffer_1a4c04d59a27d4c3471bdf90eda1c8b662" prot="public" virt="non-virtual"><scope>vpr::Buffer</scope><name>Map</name></member>
      <member refid="classvpr_1_1_buffer_1aa3dff6309040e420e748c8b6fc79d345" prot="protected" virt="non-virtual"><scope>vpr::Buffer</scope><name>mappedMemory</name></member>
      <member refid="classvpr_1_1_buffer_1a8b5196067a89499585f01e629b7f8b55" prot="protected" virt="non-virtual"><scope>vpr::Buffer</scope><name>mappedMemoryRange</name></member>
      <member refid="classvpr_1_1_buffer_1af9dcb09ccc1d047250a579a94827c2fd" prot="public" virt="non-virtual"><scope>vpr::Buffer</scope><name>MappedMemoryRange</name></member>
      <member refid="classvpr_1_1_buffer_1a5dd595b4b93d33d49a15e9852381d307" prot="protected" virt="non-virtual"><scope>vpr::Buffer</scope><name>memoryAllocation</name></member>
      <member refid="classvpr_1_1_buffer_1a9d1cc3aef09675b1d5104916b91f174d" prot="private" virt="non-virtual"><scope>vpr::Buffer</scope><name>operator=</name></member>
      <member refid="classvpr_1_1_buffer_1ae5359de9bb68e064331174620d3493e8" prot="public" virt="non-virtual"><scope>vpr::Buffer</scope><name>operator=</name></member>
      <member refid="classvpr_1_1_buffer_1ae8f9c59d2eff06decbf4853a8c22ed49" prot="protected" virt="non-virtual"><scope>vpr::Buffer</scope><name>parent</name></member>
      <member refid="classvpr_1_1_buffer_1afbe401f3002cb40c4751ac8653aa9c64" prot="protected" virt="non-virtual"><scope>vpr::Buffer</scope><name>setDescriptorInfo</name></member>
      <member refid="classvpr_1_1_buffer_1af8411e6c6a353e03d6223c5c991832b1" prot="public" virt="non-virtual"><scope>vpr::Buffer</scope><name>SetMappedMemory</name></member>
      <member refid="classvpr_1_1_buffer_1a07d786f45ff6d6712962da7910f6280c" prot="protected" virt="non-virtual"><scope>vpr::Buffer</scope><name>setMappedMemoryRange</name></member>
      <member refid="classvpr_1_1_buffer_1a05392d328541adc298ff9b5283a9c6ed" prot="public" virt="non-virtual"><scope>vpr::Buffer</scope><name>Size</name></member>
      <member refid="classvpr_1_1_buffer_1a9b69d98c01a256db2adc7878f4bed830" prot="protected" virt="non-virtual"><scope>vpr::Buffer</scope><name>size</name></member>
      <member refid="classvpr_1_1_buffer_1a780ba4c43b7f1a8ec88a5990a76a3cd0" prot="public" virt="non-virtual"><scope>vpr::Buffer</scope><name>Unmap</name></member>
      <member refid="classvpr_1_1_buffer_1a9ecbb5e39195c842b83008ca22e3dc10" prot="public" virt="non-virtual"><scope>vpr::Buffer</scope><name>Update</name></member>
      <member refid="classvpr_1_1_buffer_1a7956ffcc00fd58b07d6a140cd2563c5d" prot="public" virt="non-virtual"><scope>vpr::Buffer</scope><name>Usage</name></member>
      <member refid="classvpr_1_1_buffer_1a608136242a4072d8c74f5d36868fb72e" prot="public" virt="non-virtual"><scope>vpr::Buffer</scope><name>View</name></member>
      <member refid="classvpr_1_1_buffer_1a899072855c6876154374aa5f3f6f9930" prot="protected" virt="non-virtual"><scope>vpr::Buffer</scope><name>view</name></member>
      <member refid="classvpr_1_1_buffer_1aaf2339590cf74eac281d09f22af0d8a5" prot="protected" virt="non-virtual"><scope>vpr::Buffer</scope><name>viewCreateInfo</name></member>
      <member refid="classvpr_1_1_buffer_1a41840496cd50949a36d89d96e5cb52cd" prot="public" virt="non-virtual"><scope>vpr::Buffer</scope><name>vkHandle</name></member>
      <member refid="classvpr_1_1_buffer_1a786d565bbd6e968395d470fe51f02cde" prot="public" virt="non-virtual"><scope>vpr::Buffer</scope><name>vkHandle</name></member>
      <member refid="classvpr_1_1_buffer_1a7540498f21ea184173975560ff9e6327" prot="public" virt="non-virtual"><scope>vpr::Buffer</scope><name>~Buffer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
