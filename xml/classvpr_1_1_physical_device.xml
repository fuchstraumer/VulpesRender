<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classvpr_1_1_physical_device" kind="class" language="C++" prot="public">
    <compoundname>vpr::PhysicalDevice</compoundname>
    <includes refid="_physical_device_8hpp" local="no">PhysicalDevice.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classvpr_1_1_physical_device_1ae26356b60563a33796338ff0d9f5e65f" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classvpr_1_1_physical_device_impl" kindref="compound">PhysicalDeviceImpl</ref> &gt;</type>
        <definition>std::unique_ptr&lt;PhysicalDeviceImpl&gt; vpr::PhysicalDevice::impl</definition>
        <argsstring></argsstring>
        <name>impl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/PhysicalDevice.hpp" line="53" column="1" bodyfile="core/include/PhysicalDevice.hpp" bodystart="53" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_physical_device_1addc7471aceef1ca343cc1b6e5c242278" compoundref="_physical_device_8cpp" startline="258" endline="260">GetFeatures</referencedby>
        <referencedby refid="classvpr_1_1_physical_device_1a1d9827e465aa6c51331bec797d2318f3" compoundref="_physical_device_8cpp" startline="262" endline="264">GetMemoryProperties</referencedby>
        <referencedby refid="classvpr_1_1_physical_device_1a395785af128c95f3098203a0b32f99ed" compoundref="_physical_device_8cpp" startline="254" endline="256">GetProperties</referencedby>
        <referencedby refid="classvpr_1_1_physical_device_1a2ee4f96b16a9762953ecad3b658d84e6" compoundref="_physical_device_8cpp" startline="241" endline="252">GetQueueFamilyProperties</referencedby>
        <referencedby refid="classvpr_1_1_physical_device_1a95acb634567ba94471f0e5f6ad5fb4a0" compoundref="_physical_device_8cpp" startline="266" endline="268">GetSubgroupProperties</referencedby>
        <referencedby refid="classvpr_1_1_physical_device_1a00de7d3556d98b1cfda28d1f769f8fa8" compoundref="_physical_device_8cpp" startline="270" endline="272">vkHandle</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classvpr_1_1_physical_device_1a8185e5a07b9a04975a1751c2358bcebe" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::PhysicalDevice::PhysicalDevice</definition>
        <argsstring>(const PhysicalDevice &amp;other)=delete</argsstring>
        <name>PhysicalDevice</name>
        <param>
          <type>const <ref refid="classvpr_1_1_physical_device" kindref="compound">PhysicalDevice</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/PhysicalDevice.hpp" line="18" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_physical_device_1a2314cb016c95404ae4c11b4cb4777544" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classvpr_1_1_physical_device" kindref="compound">PhysicalDevice</ref> &amp;</type>
        <definition>PhysicalDevice&amp; vpr::PhysicalDevice::operator=</definition>
        <argsstring>(const PhysicalDevice &amp;other)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classvpr_1_1_physical_device" kindref="compound">PhysicalDevice</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/PhysicalDevice.hpp" line="19" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classvpr_1_1_physical_device_1a31404c17e2cc00ed679f13eba689bb1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::PhysicalDevice::PhysicalDevice</definition>
        <argsstring>(const VkInstance &amp;instance_handle)</argsstring>
        <name>PhysicalDevice</name>
        <param>
          <type>const VkInstance &amp;</type>
          <declname>instance_handle</declname>
        </param>
        <briefdescription>
<para>Automated setup - uses the given instance handle to find the &quot;best&quot; available GPU on a system. </para>        </briefdescription>
        <detaileddescription>
<para>This will prefer dedicated cards first, and uses some other parameters to &quot;score&quot; devices from there. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/PhysicalDevice.hpp" line="25" column="1" bodyfile="core/src/PhysicalDevice.cpp" bodystart="173" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_physical_device_1a3d36239b21d72286460392428b2b5a8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::PhysicalDevice::PhysicalDevice</definition>
        <argsstring>(PhysicalDevice &amp;&amp;other) noexcept</argsstring>
        <name>PhysicalDevice</name>
        <param>
          <type><ref refid="classvpr_1_1_physical_device" kindref="compound">PhysicalDevice</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/PhysicalDevice.hpp" line="26" column="1" bodyfile="core/src/PhysicalDevice.cpp" bodystart="175" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_physical_device_1a90104079c41958dd9099ea0f3bf371ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classvpr_1_1_physical_device" kindref="compound">PhysicalDevice</ref> &amp;</type>
        <definition>PhysicalDevice &amp; vpr::PhysicalDevice::operator=</definition>
        <argsstring>(PhysicalDevice &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classvpr_1_1_physical_device" kindref="compound">PhysicalDevice</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/PhysicalDevice.hpp" line="27" column="1" bodyfile="core/src/PhysicalDevice.cpp" bodystart="179" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_physical_device_1a90f3c207c76cc8ecd39eb80cf2b74050" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::PhysicalDevice::~PhysicalDevice</definition>
        <argsstring>()</argsstring>
        <name>~PhysicalDevice</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/PhysicalDevice.hpp" line="28" column="1" bodyfile="core/src/PhysicalDevice.cpp" bodystart="185" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_physical_device_1a00de7d3556d98b1cfda28d1f769f8fa8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const VkPhysicalDevice &amp;</type>
        <definition>const VkPhysicalDevice &amp; vpr::PhysicalDevice::vkHandle</definition>
        <argsstring>() const noexcept</argsstring>
        <name>vkHandle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/PhysicalDevice.hpp" line="30" column="1" bodyfile="core/src/PhysicalDevice.cpp" bodystart="270" bodyend="272"/>
        <references refid="classvpr_1_1_physical_device_1ae26356b60563a33796338ff0d9f5e65f" compoundref="_physical_device_8hpp" startline="53">impl</references>
        <referencedby refid="structvpr_1_1_device_data_members_1a5901117e963f71eaa85717faab3f796d" compoundref="_logical_device_8cpp" startline="461" endline="491">vpr::DeviceDataMembers::checkExtensions</referencedby>
        <referencedby refid="classvpr_1_1_device_1a97c806a212758d83ed537fbf25cf9fe6" compoundref="_logical_device_8cpp" startline="119" endline="123">vpr::Device::checkSurfaceSupport</referencedby>
        <referencedby refid="classvpr_1_1_device_1a3b0734cd598d9a64f3c459e9dc4e84ce" compoundref="_logical_device_8cpp" startline="271" endline="297">vpr::Device::create</referencedby>
        <referencedby refid="classvpr_1_1_device_1a2a58028f056c580337c9454195683eae" compoundref="_logical_device_8cpp" startline="186" endline="199">vpr::Device::FindSupportedFormat</referencedby>
        <referencedby refid="classvpr_1_1_device_1ad9c1f7de10b5e4b0816bbd8233fa4987" compoundref="_logical_device_8cpp" startline="170" endline="184">vpr::Device::GetFormatTiling</referencedby>
        <referencedby refid="classvpr_1_1_device_1ac71413f7f9988d9479e27f51fc6de197" compoundref="_logical_device_8cpp" startline="413" endline="430">vpr::Device::verifyPresentationSupport</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_physical_device_1ac374493c59bb13f5300d1c96b87b8380" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t vpr::PhysicalDevice::GetMemoryTypeIdx</definition>
        <argsstring>(const uint32_t &amp;type_bitfield, const VkMemoryPropertyFlags &amp;property_flags, VkBool32 *memory_type_found=nullptr) const noexcept</argsstring>
        <name>GetMemoryTypeIdx</name>
        <param>
          <type>const uint32_t &amp;</type>
          <declname>type_bitfield</declname>
        </param>
        <param>
          <type>const VkMemoryPropertyFlags &amp;</type>
          <declname>property_flags</declname>
        </param>
        <param>
          <type>VkBool32 *</type>
          <declname>memory_type_found</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>! Attempts to find the hardware-appropriate index of a memory type that meets the flags given. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type_bitfield</parametername>
</parameternamelist>
<parameterdescription>
<para>- the memoryTypeBits field of a VkMemoryRequirements struct, retrieved from a vkGetImageMemoryRequirements/vkGetBufferMemoryRequirements call. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>property_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>- the type of memory requested by the user, commonly device-local or host-coherent memory. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Index of the requested memory type on success, std::numeric_limits&lt;uint32_t&gt;::max() on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/PhysicalDevice.hpp" line="38" column="1" bodyfile="core/src/PhysicalDevice.cpp" bodystart="206" bodyend="208"/>
        <referencedby refid="classvpr_1_1_device_1a3c72a3cb6c48025c77a2e5029ff3718c" compoundref="_logical_device_8cpp" startline="206" endline="208">vpr::Device::GetMemoryTypeIdx</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_physical_device_1af443c2a585d182166c464f252782a57b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t vpr::PhysicalDevice::GetQueueFamilyIndex</definition>
        <argsstring>(const VkQueueFlagBits &amp;bitfield) const noexcept</argsstring>
        <name>GetQueueFamilyIndex</name>
        <param>
          <type>const VkQueueFlagBits &amp;</type>
          <declname>bitfield</declname>
        </param>
        <briefdescription>
<para>! Attempts to find a Queue family that supports the full bitfield given: this can be multiple types, so graphics + compute options or compute + transfer bitfields can be passed to the method. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Index of the queue meeting all of the flags specified, or std::numeric_limits&lt;uint32_t&gt;::max() on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/PhysicalDevice.hpp" line="44" column="1" bodyfile="core/src/PhysicalDevice.cpp" bodystart="237" bodyend="239"/>
        <referencedby refid="classvpr_1_1_device_1a6914a8dd1054f00fbdc3454e55b3c14b" compoundref="_logical_device_8cpp" startline="233" endline="249">vpr::Device::GeneralQueue</referencedby>
        <referencedby refid="classvpr_1_1_physical_device_1a2ee4f96b16a9762953ecad3b658d84e6" compoundref="_physical_device_8cpp" startline="241" endline="252">GetQueueFamilyProperties</referencedby>
        <referencedby refid="classvpr_1_1_device_1abdb29331fbcc15a242b3f0e82b02beef" compoundref="_logical_device_8cpp" startline="354" endline="373">vpr::Device::setupComputeQueues</referencedby>
        <referencedby refid="classvpr_1_1_device_1adbe15d529a11af4d7034a2135255e773" compoundref="_logical_device_8cpp" startline="343" endline="352">vpr::Device::setupGraphicsQueues</referencedby>
        <referencedby refid="classvpr_1_1_device_1a22ee8e6517d4898282d9d6385545100a" compoundref="_logical_device_8cpp" startline="394" endline="411">vpr::Device::setupSparseBindingQueues</referencedby>
        <referencedby refid="classvpr_1_1_device_1aa64b2412561fa0950722c2dc4997da9f" compoundref="_logical_device_8cpp" startline="375" endline="392">vpr::Device::setupTransferQueues</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_physical_device_1a2ee4f96b16a9762953ecad3b658d84e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>VkQueueFamilyProperties</type>
        <definition>VkQueueFamilyProperties vpr::PhysicalDevice::GetQueueFamilyProperties</definition>
        <argsstring>(const VkQueueFlagBits &amp;bitfield) const</argsstring>
        <name>GetQueueFamilyProperties</name>
        <param>
          <type>const VkQueueFlagBits &amp;</type>
          <declname>bitfield</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/PhysicalDevice.hpp" line="45" column="1" bodyfile="core/src/PhysicalDevice.cpp" bodystart="241" bodyend="252"/>
        <references refid="classvpr_1_1_physical_device_1af443c2a585d182166c464f252782a57b" compoundref="_physical_device_8cpp" startline="237" endline="239">GetQueueFamilyIndex</references>
        <references refid="classvpr_1_1_physical_device_1ae26356b60563a33796338ff0d9f5e65f" compoundref="_physical_device_8hpp" startline="53">impl</references>
        <referencedby refid="classvpr_1_1_device_1abdb29331fbcc15a242b3f0e82b02beef" compoundref="_logical_device_8cpp" startline="354" endline="373">vpr::Device::setupComputeQueues</referencedby>
        <referencedby refid="classvpr_1_1_device_1adbe15d529a11af4d7034a2135255e773" compoundref="_logical_device_8cpp" startline="343" endline="352">vpr::Device::setupGraphicsQueues</referencedby>
        <referencedby refid="classvpr_1_1_device_1a22ee8e6517d4898282d9d6385545100a" compoundref="_logical_device_8cpp" startline="394" endline="411">vpr::Device::setupSparseBindingQueues</referencedby>
        <referencedby refid="classvpr_1_1_device_1aa64b2412561fa0950722c2dc4997da9f" compoundref="_logical_device_8cpp" startline="375" endline="392">vpr::Device::setupTransferQueues</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_physical_device_1a395785af128c95f3098203a0b32f99ed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const VkPhysicalDeviceProperties &amp;</type>
        <definition>const VkPhysicalDeviceProperties &amp; vpr::PhysicalDevice::GetProperties</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetProperties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/PhysicalDevice.hpp" line="46" column="1" bodyfile="core/src/PhysicalDevice.cpp" bodystart="254" bodyend="256"/>
        <references refid="classvpr_1_1_physical_device_1ae26356b60563a33796338ff0d9f5e65f" compoundref="_physical_device_8hpp" startline="53">impl</references>
        <referencedby refid="classvpr_1_1_device_1a75b50a9b7b72d42932981ad2c8c9318c" compoundref="_logical_device_8cpp" startline="214" endline="216">vpr::Device::GetPhysicalDeviceProperties</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_physical_device_1addc7471aceef1ca343cc1b6e5c242278" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const VkPhysicalDeviceFeatures &amp;</type>
        <definition>const VkPhysicalDeviceFeatures &amp; vpr::PhysicalDevice::GetFeatures</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetFeatures</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/PhysicalDevice.hpp" line="47" column="1" bodyfile="core/src/PhysicalDevice.cpp" bodystart="258" bodyend="260"/>
        <references refid="classvpr_1_1_physical_device_1ae26356b60563a33796338ff0d9f5e65f" compoundref="_physical_device_8hpp" startline="53">impl</references>
        <referencedby refid="classvpr_1_1_device_1a3b0734cd598d9a64f3c459e9dc4e84ce" compoundref="_logical_device_8cpp" startline="271" endline="297">vpr::Device::create</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_physical_device_1a1d9827e465aa6c51331bec797d2318f3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const VkPhysicalDeviceMemoryProperties &amp;</type>
        <definition>const VkPhysicalDeviceMemoryProperties &amp; vpr::PhysicalDevice::GetMemoryProperties</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetMemoryProperties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/PhysicalDevice.hpp" line="48" column="1" bodyfile="core/src/PhysicalDevice.cpp" bodystart="262" bodyend="264"/>
        <references refid="classvpr_1_1_physical_device_1ae26356b60563a33796338ff0d9f5e65f" compoundref="_physical_device_8hpp" startline="53">impl</references>
        <referencedby refid="classvpr_1_1_device_1a3298bf1002853c3cd5b17fba4abc721d" compoundref="_logical_device_8cpp" startline="218" endline="220">vpr::Device::GetPhysicalDeviceMemoryProperties</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_physical_device_1a95acb634567ba94471f0e5f6ad5fb4a0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const VkPhysicalDeviceSubgroupProperties &amp;</type>
        <definition>const VkPhysicalDeviceSubgroupProperties &amp; vpr::PhysicalDevice::GetSubgroupProperties</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetSubgroupProperties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/include/PhysicalDevice.hpp" line="49" column="1" bodyfile="core/src/PhysicalDevice.cpp" bodystart="266" bodyend="268"/>
        <references refid="classvpr_1_1_physical_device_1ae26356b60563a33796338ff0d9f5e65f" compoundref="_physical_device_8hpp" startline="53">impl</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>! <ref refid="classvpr_1_1_physical_device" kindref="compound">PhysicalDevice</ref> is a wrapper around a VkPhysicalDevice object, which is itself merely a handle representing a Vulkan-compatible hardware device in a user&apos;s system. </para>    </briefdescription>
    <detaileddescription>
<para>This class stores the relevant VkPhysicalDeviceProperties, VkPhysicalDeviceFeatures, and VkPhysicalDeviceMemoryProperties that can be freely queried from anywhere in the program. This can/should be used to check for limits on things like texture and buffer size, supported memory types, supported rendering modes, and supported texture types like cubemaps. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="277">
        <label>vpr::PhysicalDeviceImpl</label>
        <link refid="classvpr_1_1_physical_device_impl"/>
        <childnode refid="278" relation="usage">
          <edgelabel>queueFamilyProperties</edgelabel>
        </childnode>
      </node>
      <node id="276">
        <label>std::unique_ptr&lt; vpr::PhysicalDeviceImpl &gt;</label>
        <childnode refid="277" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="278">
        <label>std::vector&lt; VkQueueFamilyProperties &gt;</label>
      </node>
      <node id="275">
        <label>vpr::PhysicalDevice</label>
        <link refid="classvpr_1_1_physical_device"/>
        <childnode refid="276" relation="usage">
          <edgelabel>impl</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="core/include/PhysicalDevice.hpp" line="17" column="1" bodyfile="core/include/PhysicalDevice.hpp" bodystart="17" bodyend="54"/>
    <listofallmembers>
      <member refid="classvpr_1_1_physical_device_1addc7471aceef1ca343cc1b6e5c242278" prot="public" virt="non-virtual"><scope>vpr::PhysicalDevice</scope><name>GetFeatures</name></member>
      <member refid="classvpr_1_1_physical_device_1a1d9827e465aa6c51331bec797d2318f3" prot="public" virt="non-virtual"><scope>vpr::PhysicalDevice</scope><name>GetMemoryProperties</name></member>
      <member refid="classvpr_1_1_physical_device_1ac374493c59bb13f5300d1c96b87b8380" prot="public" virt="non-virtual"><scope>vpr::PhysicalDevice</scope><name>GetMemoryTypeIdx</name></member>
      <member refid="classvpr_1_1_physical_device_1a395785af128c95f3098203a0b32f99ed" prot="public" virt="non-virtual"><scope>vpr::PhysicalDevice</scope><name>GetProperties</name></member>
      <member refid="classvpr_1_1_physical_device_1af443c2a585d182166c464f252782a57b" prot="public" virt="non-virtual"><scope>vpr::PhysicalDevice</scope><name>GetQueueFamilyIndex</name></member>
      <member refid="classvpr_1_1_physical_device_1a2ee4f96b16a9762953ecad3b658d84e6" prot="public" virt="non-virtual"><scope>vpr::PhysicalDevice</scope><name>GetQueueFamilyProperties</name></member>
      <member refid="classvpr_1_1_physical_device_1a95acb634567ba94471f0e5f6ad5fb4a0" prot="public" virt="non-virtual"><scope>vpr::PhysicalDevice</scope><name>GetSubgroupProperties</name></member>
      <member refid="classvpr_1_1_physical_device_1ae26356b60563a33796338ff0d9f5e65f" prot="private" virt="non-virtual"><scope>vpr::PhysicalDevice</scope><name>impl</name></member>
      <member refid="classvpr_1_1_physical_device_1a2314cb016c95404ae4c11b4cb4777544" prot="private" virt="non-virtual"><scope>vpr::PhysicalDevice</scope><name>operator=</name></member>
      <member refid="classvpr_1_1_physical_device_1a90104079c41958dd9099ea0f3bf371ea" prot="public" virt="non-virtual"><scope>vpr::PhysicalDevice</scope><name>operator=</name></member>
      <member refid="classvpr_1_1_physical_device_1a8185e5a07b9a04975a1751c2358bcebe" prot="private" virt="non-virtual"><scope>vpr::PhysicalDevice</scope><name>PhysicalDevice</name></member>
      <member refid="classvpr_1_1_physical_device_1a31404c17e2cc00ed679f13eba689bb1a" prot="public" virt="non-virtual"><scope>vpr::PhysicalDevice</scope><name>PhysicalDevice</name></member>
      <member refid="classvpr_1_1_physical_device_1a3d36239b21d72286460392428b2b5a8f" prot="public" virt="non-virtual"><scope>vpr::PhysicalDevice</scope><name>PhysicalDevice</name></member>
      <member refid="classvpr_1_1_physical_device_1a00de7d3556d98b1cfda28d1f769f8fa8" prot="public" virt="non-virtual"><scope>vpr::PhysicalDevice</scope><name>vkHandle</name></member>
      <member refid="classvpr_1_1_physical_device_1a90f3c207c76cc8ecd39eb80cf2b74050" prot="public" virt="non-virtual"><scope>vpr::PhysicalDevice</scope><name>~PhysicalDevice</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
