<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classvpr_1_1_memory_block" kind="class" language="C++" prot="public">
    <compoundname>vpr::MemoryBlock</compoundname>
    <includes refid="_memory_block_8hpp" local="no">MemoryBlock.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classvpr_1_1_memory_block_1a394e565967332b7b6809cf8b94295832" prot="public" static="no" mutable="no">
        <type>VkDeviceSize</type>
        <definition>VkDeviceSize vpr::MemoryBlock::Size</definition>
        <argsstring></argsstring>
        <name>Size</name>
        <initializer>{ std::numeric_limits&lt;VkDeviceSize&gt;::max() }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="83" column="1" bodyfile="alloc/src/MemoryBlock.hpp" bodystart="83" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_memory_block_1a7e2257b40f455628483cda1e2303f2a3" compoundref="_memory_block_8cpp" startline="117" endline="131">Destroy</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1a17a120123d73a99fde3105f17fa6d721" compoundref="_memory_block_8cpp" startline="97" endline="115">Init</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1aab73aacb57e8e413c7a9f5847890667e" compoundref="_memory_block_8cpp" startline="433" endline="435">LargestAvailRegion</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1ac05d7c8692b9d305726c1d948a3ec6d9" compoundref="_memory_block_8cpp" startline="145" endline="229">Validate</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classvpr_1_1_memory_block_1afeb7274f3b113e063b85e83f588dc76d" prot="public" static="no" mutable="no">
        <type><ref refid="namespacevpr_1a699fcbdac72f032ac918ffa160703c20" kindref="member">suballocationList</ref></type>
        <definition>suballocationList vpr::MemoryBlock::Suballocations</definition>
        <argsstring></argsstring>
        <name>Suballocations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="84" column="1" bodyfile="alloc/src/MemoryBlock.hpp" bodystart="84" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_memory_block_1a3bc214b56eafefb43b33e7c8c197d9ca" compoundref="_memory_block_8cpp" startline="354" endline="403">Allocate</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1a71cc027b7cf1cd684c6e15db8a7dcc5f" compoundref="_memory_block_8cpp" startline="437" endline="439">begin</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1a16840e2467a8e9ce9fe501deeb474fdc" compoundref="_memory_block_8cpp" startline="453" endline="455">cbegin</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1a449363f097de81848904e45052a24cd4" compoundref="_memory_block_8cpp" startline="457" endline="459">cend</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1a7e2257b40f455628483cda1e2303f2a3" compoundref="_memory_block_8cpp" startline="117" endline="131">Destroy</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1add8139b1ac10a12da486a216ffd26a78" compoundref="_memory_block_8cpp" startline="350" endline="352">Empty</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1a7d2d5cc6cef21285c6c4eafd7179ccf7" compoundref="_memory_block_8cpp" startline="441" endline="443">end</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1a88cde43def4e7d21b8a782554497b064" compoundref="_memory_block_8cpp" startline="405" endline="420">Free</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1a3aa9297d61b2cd0d71588c7bf8e7b47e" compoundref="_memory_block_8cpp" startline="497" endline="534">freeSuballocation</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1a17a120123d73a99fde3105f17fa6d721" compoundref="_memory_block_8cpp" startline="97" endline="115">Init</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1a37eea135267c92dcac0fc70e7c6f9ad1" compoundref="_memory_block_8cpp" startline="485" endline="495">mergeFreeWithNext</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1ac05d7c8692b9d305726c1d948a3ec6d9" compoundref="_memory_block_8cpp" startline="145" endline="229">Validate</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1a3eb796b49ef07360203e2fe8c099809b" compoundref="_memory_block_8cpp" startline="268" endline="348">VerifySuballocation</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classvpr_1_1_memory_block_1a091376bd12781a137242367055e7972c" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t vpr::MemoryBlock::MemoryTypeIdx</definition>
        <argsstring></argsstring>
        <name>MemoryTypeIdx</name>
        <initializer>{ std::numeric_limits&lt;uint32_t&gt;::max() }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="85" column="1" bodyfile="alloc/src/MemoryBlock.hpp" bodystart="85" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classvpr_1_1_memory_block_1a559f8dc4ea87d657b158f60b28b874b6" prot="protected" static="no" mutable="no">
        <type>VkDevice</type>
        <definition>VkDevice vpr::MemoryBlock::parentDevice</definition>
        <argsstring></argsstring>
        <name>parentDevice</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="89" column="1" bodyfile="alloc/src/MemoryBlock.hpp" bodystart="89" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_memory_block_1a7e2257b40f455628483cda1e2303f2a3" compoundref="_memory_block_8cpp" startline="117" endline="131">Destroy</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1abff18a0397a4aca3cbe99d0206c82981" compoundref="_memory_block_8cpp" startline="422" endline="426">Map</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1a5aabce50e3026fe98ec6054a37c516b5" compoundref="_memory_block_8cpp" startline="428" endline="431">Unmap</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classvpr_1_1_memory_block_1ae043175ee50b0fdfccd461fef6d91ea5" prot="protected" static="no" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex vpr::MemoryBlock::guardMutex</definition>
        <argsstring></argsstring>
        <name>guardMutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="90" column="1" bodyfile="alloc/src/MemoryBlock.hpp" bodystart="90" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_memory_block_1aca430805fb87da6c9f14facd22166d5f" compoundref="_memory_block_8cpp" startline="536" endline="549">insertFreeSuballocation</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1abff18a0397a4aca3cbe99d0206c82981" compoundref="_memory_block_8cpp" startline="422" endline="426">Map</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1a37eea135267c92dcac0fc70e7c6f9ad1" compoundref="_memory_block_8cpp" startline="485" endline="495">mergeFreeWithNext</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1afbbaf6e2f0de8d1bed31e8a8cf71cfed" compoundref="_memory_block_8cpp" startline="551" endline="559">removeFreeSuballocation</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1a5aabce50e3026fe98ec6054a37c516b5" compoundref="_memory_block_8cpp" startline="428" endline="431">Unmap</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classvpr_1_1_memory_block_1ab55a876e7db05f26f8560b28e39e5939" prot="protected" static="no" mutable="no">
        <type>VkDeviceSize</type>
        <definition>VkDeviceSize vpr::MemoryBlock::availSize</definition>
        <argsstring></argsstring>
        <name>availSize</name>
        <initializer>{ std::numeric_limits&lt;VkDeviceSize&gt;::max() }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="91" column="1" bodyfile="alloc/src/MemoryBlock.hpp" bodystart="91" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_memory_block_1a3bc214b56eafefb43b33e7c8c197d9ca" compoundref="_memory_block_8cpp" startline="354" endline="403">Allocate</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1aa41c2050634b392f64e5fdbe6b57fcd8" compoundref="_memory_block_8cpp" startline="137" endline="139">AvailableMemory</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1a3aa9297d61b2cd0d71588c7bf8e7b47e" compoundref="_memory_block_8cpp" startline="497" endline="534">freeSuballocation</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1a17a120123d73a99fde3105f17fa6d721" compoundref="_memory_block_8cpp" startline="97" endline="115">Init</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1ad2e69f41347a21089e37266fe24afe88" compoundref="_memory_block_8cpp" startline="133" endline="135">operator&lt;</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1acd06cfdc8c15616243b296be79e7a63f" compoundref="_memory_block_8cpp" startline="231" endline="266">RequestSuballocation</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1ac05d7c8692b9d305726c1d948a3ec6d9" compoundref="_memory_block_8cpp" startline="145" endline="229">Validate</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classvpr_1_1_memory_block_1acc7492cbbd1743eb7f94d9b4d2921d08" prot="protected" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t vpr::MemoryBlock::freeCount</definition>
        <argsstring></argsstring>
        <name>freeCount</name>
        <initializer>{ std::numeric_limits&lt;uint32_t&gt;::max() }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="92" column="1" bodyfile="alloc/src/MemoryBlock.hpp" bodystart="92" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_memory_block_1a3bc214b56eafefb43b33e7c8c197d9ca" compoundref="_memory_block_8cpp" startline="354" endline="403">Allocate</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1add8139b1ac10a12da486a216ffd26a78" compoundref="_memory_block_8cpp" startline="350" endline="352">Empty</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1a3aa9297d61b2cd0d71588c7bf8e7b47e" compoundref="_memory_block_8cpp" startline="497" endline="534">freeSuballocation</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1a17a120123d73a99fde3105f17fa6d721" compoundref="_memory_block_8cpp" startline="97" endline="115">Init</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1a37eea135267c92dcac0fc70e7c6f9ad1" compoundref="_memory_block_8cpp" startline="485" endline="495">mergeFreeWithNext</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1ac05d7c8692b9d305726c1d948a3ec6d9" compoundref="_memory_block_8cpp" startline="145" endline="229">Validate</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classvpr_1_1_memory_block_1adcf64572527adcb7b7f38cf020eae14c" prot="protected" static="no" mutable="no">
        <type>VkDeviceMemory</type>
        <definition>VkDeviceMemory vpr::MemoryBlock::memory</definition>
        <argsstring></argsstring>
        <name>memory</name>
        <initializer>{ VK_NULL_HANDLE }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="93" column="1" bodyfile="alloc/src/MemoryBlock.hpp" bodystart="93" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_memory_block_1a7e2257b40f455628483cda1e2303f2a3" compoundref="_memory_block_8cpp" startline="117" endline="131">Destroy</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1a17a120123d73a99fde3105f17fa6d721" compoundref="_memory_block_8cpp" startline="97" endline="115">Init</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1abff18a0397a4aca3cbe99d0206c82981" compoundref="_memory_block_8cpp" startline="422" endline="426">Map</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1a4aba8e10d9d447c8d87b964ce101915f" compoundref="_memory_block_8cpp" startline="141" endline="143">Memory</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1a5aabce50e3026fe98ec6054a37c516b5" compoundref="_memory_block_8cpp" startline="428" endline="431">Unmap</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1ac05d7c8692b9d305726c1d948a3ec6d9" compoundref="_memory_block_8cpp" startline="145" endline="229">Validate</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1a78760d0be641bf2e3f679b42cf41742b" compoundref="_memory_block_8cpp" startline="90" endline="95">~MemoryBlock</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classvpr_1_1_memory_block_1a451d65f67ab0323ac98b03fce065595e" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; suballocationList::iterator &gt;</type>
        <definition>std::vector&lt;suballocationList::iterator&gt; vpr::MemoryBlock::availSuballocations</definition>
        <argsstring></argsstring>
        <name>availSuballocations</name>
        <briefdescription>
<para>This vector stores iterators that can be used to locate suballocations in this object&apos;s suballocationList. </para>        </briefdescription>
        <detaileddescription>
<para>Using iterators avoids accidental duplication of objects, (akin to a pointer), but with more safety and extra convienience when it comes to retrieving, modifying, or even removing the object &quot;pointed&quot; to by the iterator. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="111" column="1" bodyfile="alloc/src/MemoryBlock.hpp" bodystart="111" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_memory_block_1a6dd6cfc29a6f526325a4b300d2895b50" compoundref="_memory_block_8cpp" startline="461" endline="463">avail_begin</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1ab64ea46be237837e93f1367179dd3832" compoundref="_memory_block_8cpp" startline="477" endline="479">avail_cbegin</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1a186322b494f2d033d1d481ed689163ec" compoundref="_memory_block_8cpp" startline="481" endline="483">avail_cend</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1ae96f0557e6f4f62c8bb6520fb98185b7" compoundref="_memory_block_8cpp" startline="465" endline="467">avail_end</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1a7e2257b40f455628483cda1e2303f2a3" compoundref="_memory_block_8cpp" startline="117" endline="131">Destroy</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1a17a120123d73a99fde3105f17fa6d721" compoundref="_memory_block_8cpp" startline="97" endline="115">Init</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1aca430805fb87da6c9f14facd22166d5f" compoundref="_memory_block_8cpp" startline="536" endline="549">insertFreeSuballocation</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1aab73aacb57e8e413c7a9f5847890667e" compoundref="_memory_block_8cpp" startline="433" endline="435">LargestAvailRegion</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1afbbaf6e2f0de8d1bed31e8a8cf71cfed" compoundref="_memory_block_8cpp" startline="551" endline="559">removeFreeSuballocation</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1acd06cfdc8c15616243b296be79e7a63f" compoundref="_memory_block_8cpp" startline="231" endline="266">RequestSuballocation</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1ac05d7c8692b9d305726c1d948a3ec6d9" compoundref="_memory_block_8cpp" startline="145" endline="229">Validate</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classvpr_1_1_memory_block_1a619ce3b614015e030bea8a3239d60fe2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class DebugVisualization</definition>
        <argsstring></argsstring>
        <name>DebugVisualization</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="113" column="1" bodyfile="alloc/src/MemoryBlock.hpp" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classvpr_1_1_memory_block_1aa54730353079686243fbe5f8545267d0" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct DebugVisualizationImpl</definition>
        <argsstring></argsstring>
        <name>DebugVisualizationImpl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="114" column="1" bodyfile="alloc/src/MemoryBlock.hpp" bodystart="114" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classvpr_1_1_memory_block_1a9dd70683af87d184163a645890805481" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::MemoryBlock::MemoryBlock</definition>
        <argsstring>(const MemoryBlock &amp;)=delete</argsstring>
        <name>MemoryBlock</name>
        <param>
          <type>const <ref refid="classvpr_1_1_memory_block" kindref="compound">MemoryBlock</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="20" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_memory_block_1ad77c40afbc66e75b164a88e305deb066" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classvpr_1_1_memory_block" kindref="compound">MemoryBlock</ref> &amp;</type>
        <definition>MemoryBlock&amp; vpr::MemoryBlock::operator=</definition>
        <argsstring>(const MemoryBlock &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classvpr_1_1_memory_block" kindref="compound">MemoryBlock</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="21" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classvpr_1_1_memory_block_1af52bd0fa7795f525c623cb249fe61ab8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::MemoryBlock::MemoryBlock</definition>
        <argsstring>(VkDevice parent_device)</argsstring>
        <name>MemoryBlock</name>
        <param>
          <type>VkDevice</type>
          <declname>parent_device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="24" column="1" bodyfile="alloc/src/MemoryBlock.cpp" bodystart="88" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_memory_block_1a78760d0be641bf2e3f679b42cf41742b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::MemoryBlock::~MemoryBlock</definition>
        <argsstring>()</argsstring>
        <name>~MemoryBlock</name>
        <briefdescription>
<para>The object should be destroyed via the Destroy method before the destructor is called, but this will call the Destroy method if it hasn&apos;t been, and will log a warning that this was done. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="26" column="1" bodyfile="alloc/src/MemoryBlock.cpp" bodystart="90" bodyend="95"/>
        <references refid="classvpr_1_1_memory_block_1a7e2257b40f455628483cda1e2303f2a3" compoundref="_memory_block_8cpp" startline="117" endline="131">Destroy</references>
        <references refid="classvpr_1_1_memory_block_1adcf64572527adcb7b7f38cf020eae14c" compoundref="_memory_block_8hpp" startline="93">memory</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_memory_block_1a17a120123d73a99fde3105f17fa6d721" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::MemoryBlock::Init</definition>
        <argsstring>(VkDeviceMemory &amp;new_memory, const VkDeviceSize &amp;new_size)</argsstring>
        <name>Init</name>
        <param>
          <type>VkDeviceMemory &amp;</type>
          <declname>new_memory</declname>
        </param>
        <param>
          <type>const VkDeviceSize &amp;</type>
          <declname>new_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_memory</parametername>
</parameternamelist>
<parameterdescription>
<para>This is the handle that this block will take ownership of.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_size</parametername>
</parameternamelist>
<parameterdescription>
<para>total size of this memory block. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="29" column="1" bodyfile="alloc/src/MemoryBlock.cpp" bodystart="97" bodyend="115"/>
        <references refid="classvpr_1_1_memory_block_1ab55a876e7db05f26f8560b28e39e5939" compoundref="_memory_block_8hpp" startline="91">availSize</references>
        <references refid="classvpr_1_1_memory_block_1a451d65f67ab0323ac98b03fce065595e" compoundref="_memory_block_8hpp" startline="111">availSuballocations</references>
        <references refid="namespacevpr_1a729c04888e8a0b67bdb473c36221615eab24ce0cd392a5b0b8dedc66c25213594">vpr::Free</references>
        <references refid="classvpr_1_1_memory_block_1acc7492cbbd1743eb7f94d9b4d2921d08" compoundref="_memory_block_8hpp" startline="92">freeCount</references>
        <references refid="classvpr_1_1_memory_block_1adcf64572527adcb7b7f38cf020eae14c" compoundref="_memory_block_8hpp" startline="93">memory</references>
        <references refid="classvpr_1_1_memory_block_1a394e565967332b7b6809cf8b94295832" compoundref="_memory_block_8hpp" startline="83">Size</references>
        <references refid="classvpr_1_1_memory_block_1afeb7274f3b113e063b85e83f588dc76d" compoundref="_memory_block_8hpp" startline="84">Suballocations</references>
        <references refid="namespacevpr_1a85a5d8c5ba83b162eda5df835a7e6e4d" compoundref="vpr__stdafx_8h" startline="31">vpr::VERBOSE_LOGGING</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_memory_block_1a7e2257b40f455628483cda1e2303f2a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::MemoryBlock::Destroy</definition>
        <argsstring>()</argsstring>
        <name>Destroy</name>
        <briefdescription>
<para>Cleans up resources and prepares object to be safely destroyed. </para>        </briefdescription>
        <detaileddescription>
<para>Should be called before the destructor is called, but for safety&apos;s sake the destructor will also call this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="32" column="1" bodyfile="alloc/src/MemoryBlock.cpp" bodystart="117" bodyend="131"/>
        <references refid="classvpr_1_1_memory_block_1a451d65f67ab0323ac98b03fce065595e" compoundref="_memory_block_8hpp" startline="111">availSuballocations</references>
        <references refid="classvpr_1_1_memory_block_1adcf64572527adcb7b7f38cf020eae14c" compoundref="_memory_block_8hpp" startline="93">memory</references>
        <references refid="classvpr_1_1_memory_block_1a559f8dc4ea87d657b158f60b28b874b6" compoundref="_memory_block_8hpp" startline="89">parentDevice</references>
        <references refid="classvpr_1_1_memory_block_1a394e565967332b7b6809cf8b94295832" compoundref="_memory_block_8hpp" startline="83">Size</references>
        <references refid="classvpr_1_1_memory_block_1afeb7274f3b113e063b85e83f588dc76d" compoundref="_memory_block_8hpp" startline="84">Suballocations</references>
        <references refid="namespacevpr_1a85a5d8c5ba83b162eda5df835a7e6e4d" compoundref="vpr__stdafx_8h" startline="31">vpr::VERBOSE_LOGGING</references>
        <referencedby refid="classvpr_1_1_memory_block_1a78760d0be641bf2e3f679b42cf41742b" compoundref="_memory_block_8cpp" startline="90" endline="95">~MemoryBlock</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_memory_block_1ad2e69f41347a21089e37266fe24afe88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vpr::MemoryBlock::operator&lt;</definition>
        <argsstring>(const MemoryBlock &amp;other)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classvpr_1_1_memory_block" kindref="compound">MemoryBlock</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="35" column="1" bodyfile="alloc/src/MemoryBlock.cpp" bodystart="133" bodyend="135"/>
        <references refid="classvpr_1_1_memory_block_1ab55a876e7db05f26f8560b28e39e5939" compoundref="_memory_block_8hpp" startline="91">availSize</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_memory_block_1aa41c2050634b392f64e5fdbe6b57fcd8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>VkDeviceSize</type>
        <definition>VkDeviceSize vpr::MemoryBlock::AvailableMemory</definition>
        <argsstring>() const noexcept</argsstring>
        <name>AvailableMemory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="37" column="1" bodyfile="alloc/src/MemoryBlock.cpp" bodystart="137" bodyend="139"/>
        <references refid="classvpr_1_1_memory_block_1ab55a876e7db05f26f8560b28e39e5939" compoundref="_memory_block_8hpp" startline="91">availSize</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_memory_block_1a4aba8e10d9d447c8d87b964ce101915f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const VkDeviceMemory &amp;</type>
        <definition>const VkDeviceMemory &amp; vpr::MemoryBlock::Memory</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Memory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="38" column="1" bodyfile="alloc/src/MemoryBlock.cpp" bodystart="141" bodyend="143"/>
        <references refid="classvpr_1_1_memory_block_1adcf64572527adcb7b7f38cf020eae14c" compoundref="_memory_block_8hpp" startline="93">memory</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_memory_block_1ac05d7c8692b9d305726c1d948a3ec6d9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___allocation_1gaba421ef06b1d6b910602d0180c9eff78" kindref="member">ValidationCode</ref></type>
        <definition>ValidationCode vpr::MemoryBlock::Validate</definition>
        <argsstring>() const</argsstring>
        <name>Validate</name>
        <briefdescription>
<para>Verifies integrity of memory by checking all contained suballocations for integrity and correctness. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="41" column="1" bodyfile="alloc/src/MemoryBlock.cpp" bodystart="145" bodyend="229"/>
        <references refid="classvpr_1_1_memory_block_1ab55a876e7db05f26f8560b28e39e5939" compoundref="_memory_block_8hpp" startline="91">availSize</references>
        <references refid="classvpr_1_1_memory_block_1a451d65f67ab0323ac98b03fce065595e" compoundref="_memory_block_8hpp" startline="111">availSuballocations</references>
        <references refid="group___allocation_1ggaba421ef06b1d6b910602d0180c9eff78a9d79688e901f5c4aa31129a2fe7f3451">vpr::FINAL_FREE_SIZE_MISMATCH</references>
        <references refid="group___allocation_1ggaba421ef06b1d6b910602d0180c9eff78a88ad6448cd6f1d495139e026eb3424dc">vpr::FINAL_SIZE_MISMATCH</references>
        <references refid="namespacevpr_1a729c04888e8a0b67bdb473c36221615eab24ce0cd392a5b0b8dedc66c25213594">vpr::Free</references>
        <references refid="group___allocation_1ggaba421ef06b1d6b910602d0180c9eff78ac38471be1ba1406851e804110887b573">vpr::FREE_SUBALLOC_COUNT_MISMATCH</references>
        <references refid="group___allocation_1ggaba421ef06b1d6b910602d0180c9eff78a4510c59ac7d838e715255649c3fd77a5">vpr::FREE_SUBALLOC_SORT_INCORRECT</references>
        <references refid="classvpr_1_1_memory_block_1acc7492cbbd1743eb7f94d9b4d2921d08" compoundref="_memory_block_8hpp" startline="92">freeCount</references>
        <references refid="group___allocation_1ggaba421ef06b1d6b910602d0180c9eff78a76d83e278aa0df0c5edd0e99d70ee768">vpr::INCORRECT_SUBALLOC_OFFSET</references>
        <references refid="classvpr_1_1_memory_block_1adcf64572527adcb7b7f38cf020eae14c" compoundref="_memory_block_8hpp" startline="93">memory</references>
        <references refid="namespacevpr_1af60ac795045569a749bb2df8977d893b" compoundref="_alloc_common_8hpp" startline="12">vpr::MinSuballocationSizeToRegister</references>
        <references refid="group___allocation_1ggaba421ef06b1d6b910602d0180c9eff78a81f141477ffccd0d5a9c6a2353348cc7">vpr::NEED_MERGE_SUBALLOCS</references>
        <references refid="group___allocation_1ggaba421ef06b1d6b910602d0180c9eff78a641efe802ee0e2d0cbc7a0c46e91e687">vpr::NULL_MEMORY_HANDLE</references>
        <references refid="structvpr_1_1_suballocation_1ab65ef9ae13c57aee65403240ff1aa0ac" compoundref="_suballocation_8hpp" startline="26">vpr::Suballocation::Offset</references>
        <references refid="structvpr_1_1_suballocation_1a692b3dfe078a5d701bbdda192d6cf4c8" compoundref="_suballocation_8hpp" startline="27">vpr::Suballocation::Size</references>
        <references refid="classvpr_1_1_memory_block_1a394e565967332b7b6809cf8b94295832" compoundref="_memory_block_8hpp" startline="83">Size</references>
        <references refid="classvpr_1_1_memory_block_1afeb7274f3b113e063b85e83f588dc76d" compoundref="_memory_block_8hpp" startline="84">Suballocations</references>
        <references refid="structvpr_1_1_suballocation_1aa49dd78d1314b7176aa078b8c110cc9b" compoundref="_suballocation_8hpp" startline="28">vpr::Suballocation::Type</references>
        <references refid="group___allocation_1ggaba421ef06b1d6b910602d0180c9eff78a99db430a4a1b654dc0c46b77a028d4a5">vpr::USED_SUBALLOC_IN_FREE_LIST</references>
        <references refid="group___allocation_1ggaba421ef06b1d6b910602d0180c9eff78a76c3ec4c3969badcdd02e0c88b07077f">vpr::VALIDATION_PASSED</references>
        <references refid="group___allocation_1ggaba421ef06b1d6b910602d0180c9eff78a2ceb3550d64b57a93e2896bcf767112c">vpr::ZERO_MEMORY_SIZE</references>
        <referencedby refid="classvpr_1_1_memory_block_1a88cde43def4e7d21b8a782554497b064" compoundref="_memory_block_8cpp" startline="405" endline="420">Free</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_memory_block_1acd06cfdc8c15616243b296be79e7a63f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vpr::MemoryBlock::RequestSuballocation</definition>
        <argsstring>(const VkDeviceSize &amp;buffer_image_granularity, const VkDeviceSize &amp;allocation_size, const VkDeviceSize &amp;allocation_alignment, SuballocationType allocation_type, SuballocationRequest *dest_request)</argsstring>
        <name>RequestSuballocation</name>
        <param>
          <type>const VkDeviceSize &amp;</type>
          <declname>buffer_image_granularity</declname>
        </param>
        <param>
          <type>const VkDeviceSize &amp;</type>
          <declname>allocation_size</declname>
        </param>
        <param>
          <type>const VkDeviceSize &amp;</type>
          <declname>allocation_alignment</declname>
        </param>
        <param>
          <type><ref refid="namespacevpr_1a729c04888e8a0b67bdb473c36221615e" kindref="member">SuballocationType</ref></type>
          <declname>allocation_type</declname>
        </param>
        <param>
          <type><ref refid="structvpr_1_1_suballocation_request" kindref="compound">SuballocationRequest</ref> *</type>
          <declname>dest_request</declname>
        </param>
        <briefdescription>
<para>Fills the given <ref refid="structvpr_1_1_suballocation_request" kindref="compound">SuballocationRequest</ref> struct with information about where to place the suballocation, and returns whether or not it succeeded in finding a spot to put the requested suballocation. </para>        </briefdescription>
        <detaileddescription>
<para>Usually, a failure means we&apos;ll just try another memory block (and ultimately, consider creating a new one) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="44" column="1" bodyfile="alloc/src/MemoryBlock.cpp" bodystart="231" bodyend="266"/>
        <references refid="classvpr_1_1_memory_block_1ab55a876e7db05f26f8560b28e39e5939" compoundref="_memory_block_8hpp" startline="91">availSize</references>
        <references refid="classvpr_1_1_memory_block_1a451d65f67ab0323ac98b03fce065595e" compoundref="_memory_block_8hpp" startline="111">availSuballocations</references>
        <references refid="structvpr_1_1_suballocation_request_1abec7089fbabe06aa9c849d7c9b165382" compoundref="_suballocation_8hpp" startline="46">vpr::SuballocationRequest::FreeSuballocation</references>
        <references refid="structvpr_1_1_suballocation_request_1aa0b7cc608718008b543cea33aab059c3" compoundref="_suballocation_8hpp" startline="47">vpr::SuballocationRequest::Offset</references>
        <references refid="classvpr_1_1_memory_block_1a3eb796b49ef07360203e2fe8c099809b" compoundref="_memory_block_8cpp" startline="268" endline="348">VerifySuballocation</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_memory_block_1a3eb796b49ef07360203e2fe8c099809b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vpr::MemoryBlock::VerifySuballocation</definition>
        <argsstring>(const VkDeviceSize &amp;buffer_image_granularity, const VkDeviceSize &amp;allocation_size, const VkDeviceSize &amp;allocation_alignment, SuballocationType allocation_type, const suballocationList::const_iterator &amp;dest_suballocation_location, VkDeviceSize *dest_offset) const</argsstring>
        <name>VerifySuballocation</name>
        <param>
          <type>const VkDeviceSize &amp;</type>
          <declname>buffer_image_granularity</declname>
        </param>
        <param>
          <type>const VkDeviceSize &amp;</type>
          <declname>allocation_size</declname>
        </param>
        <param>
          <type>const VkDeviceSize &amp;</type>
          <declname>allocation_alignment</declname>
        </param>
        <param>
          <type><ref refid="namespacevpr_1a729c04888e8a0b67bdb473c36221615e" kindref="member">SuballocationType</ref></type>
          <declname>allocation_type</declname>
        </param>
        <param>
          <type>const suballocationList::const_iterator &amp;</type>
          <declname>dest_suballocation_location</declname>
        </param>
        <param>
          <type>VkDeviceSize *</type>
          <declname>dest_offset</declname>
        </param>
        <briefdescription>
<para>Verifies that requested suballocation can be added to this object, and sets dest_offset to reflect offset of this now-inserted suballocation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="47" column="1" bodyfile="alloc/src/MemoryBlock.cpp" bodystart="268" bodyend="348"/>
        <references refid="group___allocation_1ga8cf57df2fccbbe7a68b713d93db023c1" compoundref="_alloc_common_8hpp" startline="74" endline="80">vpr::CheckBlocksOnSamePage</references>
        <references refid="group___allocation_1ga568ec6e09a10a255e22519e4e1a4f2e3" compoundref="_memory_block_8cpp" startline="21" endline="44">vpr::CheckBufferImageGranularityConflict</references>
        <references refid="namespacevpr_1a386b8228079a9d82883cb1b818fec3e9" compoundref="_memory_block_8cpp" startline="46">vpr::DEBUG_PADDING</references>
        <references refid="namespacevpr_1a729c04888e8a0b67bdb473c36221615eab24ce0cd392a5b0b8dedc66c25213594">vpr::Free</references>
        <references refid="structvpr_1_1_suballocation_1ab65ef9ae13c57aee65403240ff1aa0ac" compoundref="_suballocation_8hpp" startline="26">vpr::Suballocation::Offset</references>
        <references refid="structvpr_1_1_suballocation_1a692b3dfe078a5d701bbdda192d6cf4c8" compoundref="_suballocation_8hpp" startline="27">vpr::Suballocation::Size</references>
        <references refid="classvpr_1_1_memory_block_1afeb7274f3b113e063b85e83f588dc76d" compoundref="_memory_block_8hpp" startline="84">Suballocations</references>
        <references refid="structvpr_1_1_suballocation_1aa49dd78d1314b7176aa078b8c110cc9b" compoundref="_suballocation_8hpp" startline="28">vpr::Suballocation::Type</references>
        <referencedby refid="classvpr_1_1_memory_block_1acd06cfdc8c15616243b296be79e7a63f" compoundref="_memory_block_8cpp" startline="231" endline="266">RequestSuballocation</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_memory_block_1add8139b1ac10a12da486a216ffd26a78" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vpr::MemoryBlock::Empty</definition>
        <argsstring>() const</argsstring>
        <name>Empty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="50" column="1" bodyfile="alloc/src/MemoryBlock.cpp" bodystart="350" bodyend="352"/>
        <references refid="classvpr_1_1_memory_block_1acc7492cbbd1743eb7f94d9b4d2921d08" compoundref="_memory_block_8hpp" startline="92">freeCount</references>
        <references refid="classvpr_1_1_memory_block_1afeb7274f3b113e063b85e83f588dc76d" compoundref="_memory_block_8hpp" startline="84">Suballocations</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_memory_block_1a3bc214b56eafefb43b33e7c8c197d9ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::MemoryBlock::Allocate</definition>
        <argsstring>(const SuballocationRequest &amp;request, const SuballocationType &amp;allocation_type, const VkDeviceSize &amp;allocation_size)</argsstring>
        <name>Allocate</name>
        <param>
          <type>const <ref refid="structvpr_1_1_suballocation_request" kindref="compound">SuballocationRequest</ref> &amp;</type>
          <declname>request</declname>
        </param>
        <param>
          <type>const <ref refid="namespacevpr_1a729c04888e8a0b67bdb473c36221615e" kindref="member">SuballocationType</ref> &amp;</type>
          <declname>allocation_type</declname>
        </param>
        <param>
          <type>const VkDeviceSize &amp;</type>
          <declname>allocation_size</declname>
        </param>
        <briefdescription>
<para>Performs the actual allocation, once &quot;request&quot; has been checked and made valid. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="53" column="1" bodyfile="alloc/src/MemoryBlock.cpp" bodystart="354" bodyend="403"/>
        <references refid="classvpr_1_1_memory_block_1ab55a876e7db05f26f8560b28e39e5939" compoundref="_memory_block_8hpp" startline="91">availSize</references>
        <references refid="namespacevpr_1a729c04888e8a0b67bdb473c36221615eab24ce0cd392a5b0b8dedc66c25213594">vpr::Free</references>
        <references refid="classvpr_1_1_memory_block_1acc7492cbbd1743eb7f94d9b4d2921d08" compoundref="_memory_block_8hpp" startline="92">freeCount</references>
        <references refid="structvpr_1_1_suballocation_request_1abec7089fbabe06aa9c849d7c9b165382" compoundref="_suballocation_8hpp" startline="46">vpr::SuballocationRequest::FreeSuballocation</references>
        <references refid="classvpr_1_1_memory_block_1aca430805fb87da6c9f14facd22166d5f" compoundref="_memory_block_8cpp" startline="536" endline="549">insertFreeSuballocation</references>
        <references refid="structvpr_1_1_suballocation_request_1aa0b7cc608718008b543cea33aab059c3" compoundref="_suballocation_8hpp" startline="47">vpr::SuballocationRequest::Offset</references>
        <references refid="classvpr_1_1_memory_block_1afbbaf6e2f0de8d1bed31e8a8cf71cfed" compoundref="_memory_block_8cpp" startline="551" endline="559">removeFreeSuballocation</references>
        <references refid="classvpr_1_1_memory_block_1afeb7274f3b113e063b85e83f588dc76d" compoundref="_memory_block_8hpp" startline="84">Suballocations</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_memory_block_1a88cde43def4e7d21b8a782554497b064" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::MemoryBlock::Free</definition>
        <argsstring>(const Allocation *memory_to_free)</argsstring>
        <name>Free</name>
        <param>
          <type>const <ref refid="classvpr_1_1_allocation" kindref="compound">Allocation</ref> *</type>
          <declname>memory_to_free</declname>
        </param>
        <briefdescription>
<para>Frees memory in region specified (i.e frees/destroys a suballocation) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="56" column="1" bodyfile="alloc/src/MemoryBlock.cpp" bodystart="405" bodyend="420"/>
        <references refid="classvpr_1_1_memory_block_1a3aa9297d61b2cd0d71588c7bf8e7b47e" compoundref="_memory_block_8cpp" startline="497" endline="534">freeSuballocation</references>
        <references refid="classvpr_1_1_allocation_1acb642a53c185ac6530ed60959b0e4397" compoundref="_allocation_8cpp" startline="164" endline="182">vpr::Allocation::Offset</references>
        <references refid="classvpr_1_1_memory_block_1afeb7274f3b113e063b85e83f588dc76d" compoundref="_memory_block_8hpp" startline="84">Suballocations</references>
        <references refid="classvpr_1_1_memory_block_1ac05d7c8692b9d305726c1d948a3ec6d9" compoundref="_memory_block_8cpp" startline="145" endline="229">Validate</references>
        <references refid="namespacevpr_1adb4fbe461c1ece0fd2c3f56bbb3f55e7" compoundref="_alloc_common_8hpp" startline="24">vpr::VALIDATE_MEMORY</references>
        <references refid="group___allocation_1ggaba421ef06b1d6b910602d0180c9eff78a76c3ec4c3969badcdd02e0c88b07077f">vpr::VALIDATION_PASSED</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_memory_block_1abff18a0397a4aca3cbe99d0206c82981" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::MemoryBlock::Map</definition>
        <argsstring>(const Allocation *alloc_being_mapped, const VkDeviceSize &amp;size_of_map, const VkDeviceSize &amp;offset_to_map_at, void **destination_address)</argsstring>
        <name>Map</name>
        <param>
          <type>const <ref refid="classvpr_1_1_allocation" kindref="compound">Allocation</ref> *</type>
          <declname>alloc_being_mapped</declname>
        </param>
        <param>
          <type>const VkDeviceSize &amp;</type>
          <declname>size_of_map</declname>
        </param>
        <param>
          <type>const VkDeviceSize &amp;</type>
          <declname>offset_to_map_at</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>destination_address</declname>
        </param>
        <briefdescription>
<para>When we map a suballocation, we are mapping a sub-region of the larger memory object it is bound to. </para>        </briefdescription>
        <detaileddescription>
<para>We cannot perform another map until this sub-region is unmapped. Thus, suballocations actually call their parent&apos;s mapping method. This lets us use a mutex to lock off access to this block&apos;s VkDeviceMemory object until the memory is unmapped. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="61" column="1" bodyfile="alloc/src/MemoryBlock.cpp" bodystart="422" bodyend="426"/>
        <references refid="classvpr_1_1_memory_block_1ae043175ee50b0fdfccd461fef6d91ea5" compoundref="_memory_block_8hpp" startline="90">guardMutex</references>
        <references refid="classvpr_1_1_memory_block_1adcf64572527adcb7b7f38cf020eae14c" compoundref="_memory_block_8hpp" startline="93">memory</references>
        <references refid="classvpr_1_1_allocation_1acb642a53c185ac6530ed60959b0e4397" compoundref="_allocation_8cpp" startline="164" endline="182">vpr::Allocation::Offset</references>
        <references refid="classvpr_1_1_memory_block_1a559f8dc4ea87d657b158f60b28b874b6" compoundref="_memory_block_8hpp" startline="89">parentDevice</references>
        <references refid="vk_assert_8hpp_1a92c2e07b0d021fc331be70a65c61dacc" compoundref="vk_assert_8hpp" startline="9">VkAssert</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_memory_block_1a5aabce50e3026fe98ec6054a37c516b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::MemoryBlock::Unmap</definition>
        <argsstring>()</argsstring>
        <name>Unmap</name>
        <briefdescription>
<para>As mentioned for the Map method, due to VkMapMemory functions we must make sure only one sub-region of an object is unmapped at a time, thus requiring the parent block to oversee the mapping/unmapping + using a mutex for thread safety. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="65" column="1" bodyfile="alloc/src/MemoryBlock.cpp" bodystart="428" bodyend="431"/>
        <references refid="classvpr_1_1_memory_block_1ae043175ee50b0fdfccd461fef6d91ea5" compoundref="_memory_block_8hpp" startline="90">guardMutex</references>
        <references refid="classvpr_1_1_memory_block_1adcf64572527adcb7b7f38cf020eae14c" compoundref="_memory_block_8hpp" startline="93">memory</references>
        <references refid="classvpr_1_1_memory_block_1a559f8dc4ea87d657b158f60b28b874b6" compoundref="_memory_block_8hpp" startline="89">parentDevice</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_memory_block_1aab73aacb57e8e413c7a9f5847890667e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>VkDeviceSize</type>
        <definition>VkDeviceSize vpr::MemoryBlock::LargestAvailRegion</definition>
        <argsstring>() const noexcept</argsstring>
        <name>LargestAvailRegion</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="67" column="1" bodyfile="alloc/src/MemoryBlock.cpp" bodystart="433" bodyend="435"/>
        <references refid="classvpr_1_1_memory_block_1a451d65f67ab0323ac98b03fce065595e" compoundref="_memory_block_8hpp" startline="111">availSuballocations</references>
        <references refid="classvpr_1_1_memory_block_1a394e565967332b7b6809cf8b94295832" compoundref="_memory_block_8hpp" startline="83">Size</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_memory_block_1a71cc027b7cf1cd684c6e15db8a7dcc5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevpr_1a43160a49c54463723cf97f5d8c51e1f2" kindref="member">suballocation_iterator_t</ref></type>
        <definition>suballocation_iterator_t vpr::MemoryBlock::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="69" column="1" bodyfile="alloc/src/MemoryBlock.cpp" bodystart="437" bodyend="439"/>
        <references refid="classvpr_1_1_memory_block_1afeb7274f3b113e063b85e83f588dc76d" compoundref="_memory_block_8hpp" startline="84">Suballocations</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_memory_block_1a7d2d5cc6cef21285c6c4eafd7179ccf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevpr_1a43160a49c54463723cf97f5d8c51e1f2" kindref="member">suballocation_iterator_t</ref></type>
        <definition>suballocation_iterator_t vpr::MemoryBlock::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="70" column="1" bodyfile="alloc/src/MemoryBlock.cpp" bodystart="441" bodyend="443"/>
        <references refid="classvpr_1_1_memory_block_1afeb7274f3b113e063b85e83f588dc76d" compoundref="_memory_block_8hpp" startline="84">Suballocations</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_memory_block_1aad18b96027f7ce38f482292f25eaa4ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevpr_1ab423494fb93a04bbd6bd02f5b3b4b393" kindref="member">const_suballocation_iterator_t</ref></type>
        <definition>const_suballocation_iterator_t vpr::MemoryBlock::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="71" column="1" bodyfile="alloc/src/MemoryBlock.cpp" bodystart="445" bodyend="447"/>
        <references refid="classvpr_1_1_memory_block_1afeb7274f3b113e063b85e83f588dc76d" compoundref="_memory_block_8hpp" startline="84">Suballocations</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_memory_block_1aeb98eb131eb46e94af64fd55db21a271" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevpr_1ab423494fb93a04bbd6bd02f5b3b4b393" kindref="member">const_suballocation_iterator_t</ref></type>
        <definition>const_suballocation_iterator_t vpr::MemoryBlock::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="72" column="1" bodyfile="alloc/src/MemoryBlock.cpp" bodystart="449" bodyend="451"/>
        <references refid="classvpr_1_1_memory_block_1afeb7274f3b113e063b85e83f588dc76d" compoundref="_memory_block_8hpp" startline="84">Suballocations</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_memory_block_1a16840e2467a8e9ce9fe501deeb474fdc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevpr_1ab423494fb93a04bbd6bd02f5b3b4b393" kindref="member">const_suballocation_iterator_t</ref></type>
        <definition>const_suballocation_iterator_t vpr::MemoryBlock::cbegin</definition>
        <argsstring>() const</argsstring>
        <name>cbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="73" column="1" bodyfile="alloc/src/MemoryBlock.cpp" bodystart="453" bodyend="455"/>
        <references refid="classvpr_1_1_memory_block_1afeb7274f3b113e063b85e83f588dc76d" compoundref="_memory_block_8hpp" startline="84">Suballocations</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_memory_block_1a449363f097de81848904e45052a24cd4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevpr_1ab423494fb93a04bbd6bd02f5b3b4b393" kindref="member">const_suballocation_iterator_t</ref></type>
        <definition>const_suballocation_iterator_t vpr::MemoryBlock::cend</definition>
        <argsstring>() const</argsstring>
        <name>cend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="74" column="1" bodyfile="alloc/src/MemoryBlock.cpp" bodystart="457" bodyend="459"/>
        <references refid="classvpr_1_1_memory_block_1afeb7274f3b113e063b85e83f588dc76d" compoundref="_memory_block_8hpp" startline="84">Suballocations</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_memory_block_1a6dd6cfc29a6f526325a4b300d2895b50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevpr_1ae45fb55dc24425884ab5770dfdb39cdb" kindref="member">avail_suballocation_iterator_t</ref></type>
        <definition>avail_suballocation_iterator_t vpr::MemoryBlock::avail_begin</definition>
        <argsstring>()</argsstring>
        <name>avail_begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="76" column="1" bodyfile="alloc/src/MemoryBlock.cpp" bodystart="461" bodyend="463"/>
        <references refid="classvpr_1_1_memory_block_1a451d65f67ab0323ac98b03fce065595e" compoundref="_memory_block_8hpp" startline="111">availSuballocations</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_memory_block_1ae96f0557e6f4f62c8bb6520fb98185b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevpr_1ae45fb55dc24425884ab5770dfdb39cdb" kindref="member">avail_suballocation_iterator_t</ref></type>
        <definition>avail_suballocation_iterator_t vpr::MemoryBlock::avail_end</definition>
        <argsstring>()</argsstring>
        <name>avail_end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="77" column="1" bodyfile="alloc/src/MemoryBlock.cpp" bodystart="465" bodyend="467"/>
        <references refid="classvpr_1_1_memory_block_1a451d65f67ab0323ac98b03fce065595e" compoundref="_memory_block_8hpp" startline="111">availSuballocations</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_memory_block_1ace57d4a06047c2c3cd19196c8a12ebb3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevpr_1a532ca90a6e5307a71ef40c54e6a68964" kindref="member">const_avail_suballocation_iterator_t</ref></type>
        <definition>const_avail_suballocation_iterator_t vpr::MemoryBlock::avail_begin</definition>
        <argsstring>() const</argsstring>
        <name>avail_begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="78" column="1" bodyfile="alloc/src/MemoryBlock.cpp" bodystart="469" bodyend="471"/>
        <references refid="classvpr_1_1_memory_block_1a451d65f67ab0323ac98b03fce065595e" compoundref="_memory_block_8hpp" startline="111">availSuballocations</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_memory_block_1a49a8faf530651aa681509f0020f885b3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevpr_1a532ca90a6e5307a71ef40c54e6a68964" kindref="member">const_avail_suballocation_iterator_t</ref></type>
        <definition>const_avail_suballocation_iterator_t vpr::MemoryBlock::avail_end</definition>
        <argsstring>() const</argsstring>
        <name>avail_end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="79" column="1" bodyfile="alloc/src/MemoryBlock.cpp" bodystart="473" bodyend="475"/>
        <references refid="classvpr_1_1_memory_block_1a451d65f67ab0323ac98b03fce065595e" compoundref="_memory_block_8hpp" startline="111">availSuballocations</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_memory_block_1ab64ea46be237837e93f1367179dd3832" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevpr_1a532ca90a6e5307a71ef40c54e6a68964" kindref="member">const_avail_suballocation_iterator_t</ref></type>
        <definition>const_avail_suballocation_iterator_t vpr::MemoryBlock::avail_cbegin</definition>
        <argsstring>() const</argsstring>
        <name>avail_cbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="80" column="1" bodyfile="alloc/src/MemoryBlock.cpp" bodystart="477" bodyend="479"/>
        <references refid="classvpr_1_1_memory_block_1a451d65f67ab0323ac98b03fce065595e" compoundref="_memory_block_8hpp" startline="111">availSuballocations</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_memory_block_1a186322b494f2d033d1d481ed689163ec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevpr_1a532ca90a6e5307a71ef40c54e6a68964" kindref="member">const_avail_suballocation_iterator_t</ref></type>
        <definition>const_avail_suballocation_iterator_t vpr::MemoryBlock::avail_cend</definition>
        <argsstring>() const</argsstring>
        <name>avail_cend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="81" column="1" bodyfile="alloc/src/MemoryBlock.cpp" bodystart="481" bodyend="483"/>
        <references refid="classvpr_1_1_memory_block_1a451d65f67ab0323ac98b03fce065595e" compoundref="_memory_block_8hpp" startline="111">availSuballocations</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classvpr_1_1_memory_block_1a3aa9297d61b2cd0d71588c7bf8e7b47e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::MemoryBlock::freeSuballocation</definition>
        <argsstring>(const suballocationList::iterator &amp;item_to_free)</argsstring>
        <name>freeSuballocation</name>
        <param>
          <type>const suballocationList::iterator &amp;</type>
          <declname>item_to_free</declname>
        </param>
        <briefdescription>
<para>Changes the item pointed to by the iterator to be a free type, then adds the now-available size to availSize and increments freeCount. </para>        </briefdescription>
        <detaileddescription>
<para>This method may also call mergeFreeWithNext, insertFreeSuballocation, and removeFreeSuballocation if adjacent suballocations are free or can be merged with the now-free allocation passed in. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="98" column="1" bodyfile="alloc/src/MemoryBlock.cpp" bodystart="497" bodyend="534"/>
        <references refid="classvpr_1_1_memory_block_1ab55a876e7db05f26f8560b28e39e5939" compoundref="_memory_block_8hpp" startline="91">availSize</references>
        <references refid="namespacevpr_1a729c04888e8a0b67bdb473c36221615eab24ce0cd392a5b0b8dedc66c25213594">vpr::Free</references>
        <references refid="classvpr_1_1_memory_block_1acc7492cbbd1743eb7f94d9b4d2921d08" compoundref="_memory_block_8hpp" startline="92">freeCount</references>
        <references refid="classvpr_1_1_memory_block_1aca430805fb87da6c9f14facd22166d5f" compoundref="_memory_block_8cpp" startline="536" endline="549">insertFreeSuballocation</references>
        <references refid="classvpr_1_1_memory_block_1a37eea135267c92dcac0fc70e7c6f9ad1" compoundref="_memory_block_8cpp" startline="485" endline="495">mergeFreeWithNext</references>
        <references refid="classvpr_1_1_memory_block_1afbbaf6e2f0de8d1bed31e8a8cf71cfed" compoundref="_memory_block_8cpp" startline="551" endline="559">removeFreeSuballocation</references>
        <references refid="structvpr_1_1_suballocation_1a692b3dfe078a5d701bbdda192d6cf4c8" compoundref="_suballocation_8hpp" startline="27">vpr::Suballocation::Size</references>
        <references refid="classvpr_1_1_memory_block_1afeb7274f3b113e063b85e83f588dc76d" compoundref="_memory_block_8hpp" startline="84">Suballocations</references>
        <references refid="structvpr_1_1_suballocation_1aa49dd78d1314b7176aa078b8c110cc9b" compoundref="_suballocation_8hpp" startline="28">vpr::Suballocation::Type</references>
        <referencedby refid="classvpr_1_1_memory_block_1a88cde43def4e7d21b8a782554497b064" compoundref="_memory_block_8cpp" startline="405" endline="420">Free</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_memory_block_1a37eea135267c92dcac0fc70e7c6f9ad1" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::MemoryBlock::mergeFreeWithNext</definition>
        <argsstring>(const suballocationList::iterator &amp;item_to_merge)</argsstring>
        <name>mergeFreeWithNext</name>
        <param>
          <type>const suballocationList::iterator &amp;</type>
          <declname>item_to_merge</declname>
        </param>
        <briefdescription>
<para>Effectively reduces fragmentation by merging two free allocations that are adjacent in memory into one larger allocation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="101" column="1" bodyfile="alloc/src/MemoryBlock.cpp" bodystart="485" bodyend="495"/>
        <references refid="namespacevpr_1a729c04888e8a0b67bdb473c36221615eab24ce0cd392a5b0b8dedc66c25213594">vpr::Free</references>
        <references refid="classvpr_1_1_memory_block_1acc7492cbbd1743eb7f94d9b4d2921d08" compoundref="_memory_block_8hpp" startline="92">freeCount</references>
        <references refid="classvpr_1_1_memory_block_1ae043175ee50b0fdfccd461fef6d91ea5" compoundref="_memory_block_8hpp" startline="90">guardMutex</references>
        <references refid="classvpr_1_1_memory_block_1afeb7274f3b113e063b85e83f588dc76d" compoundref="_memory_block_8hpp" startline="84">Suballocations</references>
        <referencedby refid="classvpr_1_1_memory_block_1a3aa9297d61b2cd0d71588c7bf8e7b47e" compoundref="_memory_block_8cpp" startline="497" endline="534">freeSuballocation</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_memory_block_1aca430805fb87da6c9f14facd22166d5f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::MemoryBlock::insertFreeSuballocation</definition>
        <argsstring>(const suballocationList::iterator &amp;item_to_insert)</argsstring>
        <name>insertFreeSuballocation</name>
        <param>
          <type>const suballocationList::iterator &amp;</type>
          <declname>item_to_insert</declname>
        </param>
        <briefdescription>
<para>Registers a free suballocation, inserting it into the proper location to keep the sorting intact (via std::lower_bound) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="104" column="1" bodyfile="alloc/src/MemoryBlock.cpp" bodystart="536" bodyend="549"/>
        <references refid="classvpr_1_1_memory_block_1a451d65f67ab0323ac98b03fce065595e" compoundref="_memory_block_8hpp" startline="111">availSuballocations</references>
        <references refid="classvpr_1_1_memory_block_1ae043175ee50b0fdfccd461fef6d91ea5" compoundref="_memory_block_8hpp" startline="90">guardMutex</references>
        <references refid="namespacevpr_1af60ac795045569a749bb2df8977d893b" compoundref="_alloc_common_8hpp" startline="12">vpr::MinSuballocationSizeToRegister</references>
        <referencedby refid="classvpr_1_1_memory_block_1a3bc214b56eafefb43b33e7c8c197d9ca" compoundref="_memory_block_8cpp" startline="354" endline="403">Allocate</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1a3aa9297d61b2cd0d71588c7bf8e7b47e" compoundref="_memory_block_8cpp" startline="497" endline="534">freeSuballocation</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_memory_block_1afbbaf6e2f0de8d1bed31e8a8cf71cfed" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::MemoryBlock::removeFreeSuballocation</definition>
        <argsstring>(const suballocationList::iterator &amp;item_to_remove)</argsstring>
        <name>removeFreeSuballocation</name>
        <param>
          <type>const suballocationList::iterator &amp;</type>
          <declname>item_to_remove</declname>
        </param>
        <briefdescription>
<para>Removes a free suballocation, usually indicating that it is about to be made active and used by an object (or that it has been merged with another free suballocation) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/MemoryBlock.hpp" line="106" column="1" bodyfile="alloc/src/MemoryBlock.cpp" bodystart="551" bodyend="559"/>
        <references refid="classvpr_1_1_memory_block_1a451d65f67ab0323ac98b03fce065595e" compoundref="_memory_block_8hpp" startline="111">availSuballocations</references>
        <references refid="classvpr_1_1_memory_block_1ae043175ee50b0fdfccd461fef6d91ea5" compoundref="_memory_block_8hpp" startline="90">guardMutex</references>
        <references refid="namespacevpr_1af60ac795045569a749bb2df8977d893b" compoundref="_alloc_common_8hpp" startline="12">vpr::MinSuballocationSizeToRegister</references>
        <referencedby refid="classvpr_1_1_memory_block_1a3bc214b56eafefb43b33e7c8c197d9ca" compoundref="_memory_block_8cpp" startline="354" endline="403">Allocate</referencedby>
        <referencedby refid="classvpr_1_1_memory_block_1a3aa9297d61b2cd0d71588c7bf8e7b47e" compoundref="_memory_block_8cpp" startline="497" endline="534">freeSuballocation</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A <ref refid="classvpr_1_1_memory_block" kindref="compound">MemoryBlock</ref> is a large contiguous region of Vulkan memory of a uniform type (device local, host coherent, host visible, etc) that other objects bind to subregions of. </para>    </briefdescription>
    <detaileddescription>
<para>This should never be directly accessed by any client code: it is managed and interfaced to by other objects, and several of these of each type can exist (occurs when a memory block is fully used, until no more memory available). </para>    </detaileddescription>
    <collaborationgraph>
      <node id="259">
        <label>std::list&lt; T &gt;::iterator</label>
      </node>
      <node id="258">
        <label>std::vector&lt; suballocationList::iterator &gt;</label>
        <childnode refid="259" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="256">
        <label>std::list&lt; Suballocation &gt;</label>
        <childnode refid="257" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="255">
        <label>vpr::MemoryBlock</label>
        <link refid="classvpr_1_1_memory_block"/>
        <childnode refid="256" relation="usage">
          <edgelabel>Suballocations</edgelabel>
        </childnode>
        <childnode refid="258" relation="usage">
          <edgelabel>availSuballocations</edgelabel>
        </childnode>
      </node>
      <node id="257">
        <label>vpr::Suballocation</label>
        <link refid="structvpr_1_1_suballocation"/>
      </node>
    </collaborationgraph>
    <location file="alloc/src/MemoryBlock.hpp" line="19" column="1" bodyfile="alloc/src/MemoryBlock.hpp" bodystart="19" bodyend="115"/>
    <listofallmembers>
      <member refid="classvpr_1_1_memory_block_1a3bc214b56eafefb43b33e7c8c197d9ca" prot="public" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>Allocate</name></member>
      <member refid="classvpr_1_1_memory_block_1a6dd6cfc29a6f526325a4b300d2895b50" prot="public" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>avail_begin</name></member>
      <member refid="classvpr_1_1_memory_block_1ace57d4a06047c2c3cd19196c8a12ebb3" prot="public" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>avail_begin</name></member>
      <member refid="classvpr_1_1_memory_block_1ab64ea46be237837e93f1367179dd3832" prot="public" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>avail_cbegin</name></member>
      <member refid="classvpr_1_1_memory_block_1a186322b494f2d033d1d481ed689163ec" prot="public" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>avail_cend</name></member>
      <member refid="classvpr_1_1_memory_block_1ae96f0557e6f4f62c8bb6520fb98185b7" prot="public" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>avail_end</name></member>
      <member refid="classvpr_1_1_memory_block_1a49a8faf530651aa681509f0020f885b3" prot="public" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>avail_end</name></member>
      <member refid="classvpr_1_1_memory_block_1aa41c2050634b392f64e5fdbe6b57fcd8" prot="public" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>AvailableMemory</name></member>
      <member refid="classvpr_1_1_memory_block_1ab55a876e7db05f26f8560b28e39e5939" prot="protected" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>availSize</name></member>
      <member refid="classvpr_1_1_memory_block_1a451d65f67ab0323ac98b03fce065595e" prot="protected" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>availSuballocations</name></member>
      <member refid="classvpr_1_1_memory_block_1a71cc027b7cf1cd684c6e15db8a7dcc5f" prot="public" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>begin</name></member>
      <member refid="classvpr_1_1_memory_block_1aad18b96027f7ce38f482292f25eaa4ad" prot="public" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>begin</name></member>
      <member refid="classvpr_1_1_memory_block_1a16840e2467a8e9ce9fe501deeb474fdc" prot="public" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>cbegin</name></member>
      <member refid="classvpr_1_1_memory_block_1a449363f097de81848904e45052a24cd4" prot="public" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>cend</name></member>
      <member refid="classvpr_1_1_memory_block_1a619ce3b614015e030bea8a3239d60fe2" prot="protected" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>DebugVisualization</name></member>
      <member refid="classvpr_1_1_memory_block_1aa54730353079686243fbe5f8545267d0" prot="protected" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>DebugVisualizationImpl</name></member>
      <member refid="classvpr_1_1_memory_block_1a7e2257b40f455628483cda1e2303f2a3" prot="public" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>Destroy</name></member>
      <member refid="classvpr_1_1_memory_block_1add8139b1ac10a12da486a216ffd26a78" prot="public" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>Empty</name></member>
      <member refid="classvpr_1_1_memory_block_1a7d2d5cc6cef21285c6c4eafd7179ccf7" prot="public" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>end</name></member>
      <member refid="classvpr_1_1_memory_block_1aeb98eb131eb46e94af64fd55db21a271" prot="public" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>end</name></member>
      <member refid="classvpr_1_1_memory_block_1a88cde43def4e7d21b8a782554497b064" prot="public" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>Free</name></member>
      <member refid="classvpr_1_1_memory_block_1acc7492cbbd1743eb7f94d9b4d2921d08" prot="protected" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>freeCount</name></member>
      <member refid="classvpr_1_1_memory_block_1a3aa9297d61b2cd0d71588c7bf8e7b47e" prot="protected" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>freeSuballocation</name></member>
      <member refid="classvpr_1_1_memory_block_1ae043175ee50b0fdfccd461fef6d91ea5" prot="protected" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>guardMutex</name></member>
      <member refid="classvpr_1_1_memory_block_1a17a120123d73a99fde3105f17fa6d721" prot="public" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>Init</name></member>
      <member refid="classvpr_1_1_memory_block_1aca430805fb87da6c9f14facd22166d5f" prot="protected" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>insertFreeSuballocation</name></member>
      <member refid="classvpr_1_1_memory_block_1aab73aacb57e8e413c7a9f5847890667e" prot="public" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>LargestAvailRegion</name></member>
      <member refid="classvpr_1_1_memory_block_1abff18a0397a4aca3cbe99d0206c82981" prot="public" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>Map</name></member>
      <member refid="classvpr_1_1_memory_block_1adcf64572527adcb7b7f38cf020eae14c" prot="protected" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>memory</name></member>
      <member refid="classvpr_1_1_memory_block_1a4aba8e10d9d447c8d87b964ce101915f" prot="public" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>Memory</name></member>
      <member refid="classvpr_1_1_memory_block_1a9dd70683af87d184163a645890805481" prot="private" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>MemoryBlock</name></member>
      <member refid="classvpr_1_1_memory_block_1af52bd0fa7795f525c623cb249fe61ab8" prot="public" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>MemoryBlock</name></member>
      <member refid="classvpr_1_1_memory_block_1a091376bd12781a137242367055e7972c" prot="public" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>MemoryTypeIdx</name></member>
      <member refid="classvpr_1_1_memory_block_1a37eea135267c92dcac0fc70e7c6f9ad1" prot="protected" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>mergeFreeWithNext</name></member>
      <member refid="classvpr_1_1_memory_block_1ad2e69f41347a21089e37266fe24afe88" prot="public" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>operator&lt;</name></member>
      <member refid="classvpr_1_1_memory_block_1ad77c40afbc66e75b164a88e305deb066" prot="private" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>operator=</name></member>
      <member refid="classvpr_1_1_memory_block_1a559f8dc4ea87d657b158f60b28b874b6" prot="protected" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>parentDevice</name></member>
      <member refid="classvpr_1_1_memory_block_1afbbaf6e2f0de8d1bed31e8a8cf71cfed" prot="protected" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>removeFreeSuballocation</name></member>
      <member refid="classvpr_1_1_memory_block_1acd06cfdc8c15616243b296be79e7a63f" prot="public" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>RequestSuballocation</name></member>
      <member refid="classvpr_1_1_memory_block_1a394e565967332b7b6809cf8b94295832" prot="public" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>Size</name></member>
      <member refid="classvpr_1_1_memory_block_1afeb7274f3b113e063b85e83f588dc76d" prot="public" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>Suballocations</name></member>
      <member refid="classvpr_1_1_memory_block_1a5aabce50e3026fe98ec6054a37c516b5" prot="public" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>Unmap</name></member>
      <member refid="classvpr_1_1_memory_block_1ac05d7c8692b9d305726c1d948a3ec6d9" prot="public" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>Validate</name></member>
      <member refid="classvpr_1_1_memory_block_1a3eb796b49ef07360203e2fe8c099809b" prot="public" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>VerifySuballocation</name></member>
      <member refid="classvpr_1_1_memory_block_1a78760d0be641bf2e3f679b42cf41742b" prot="public" virt="non-virtual"><scope>vpr::MemoryBlock</scope><name>~MemoryBlock</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
