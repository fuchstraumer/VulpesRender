<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classvpr_1_1_allocation_collection" kind="class" language="C++" prot="public">
    <compoundname>vpr::AllocationCollection</compoundname>
    <includes refid="_allocation_collection_8hpp" local="no">AllocationCollection.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classvpr_1_1_allocation_collection_1a723a651fdda475182b15d93e131441f7" prot="public" static="no">
        <type>std::vector&lt; std::unique_ptr&lt; <ref refid="classvpr_1_1_memory_block" kindref="compound">MemoryBlock</ref> &gt; &gt;::<ref refid="classvpr_1_1_allocation_collection_1a723a651fdda475182b15d93e131441f7" kindref="member">iterator</ref></type>
        <definition>typedef std::vector&lt;std::unique_ptr&lt;MemoryBlock&gt; &gt;::iterator vpr::AllocationCollection::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocationCollection.hpp" line="38" column="1" bodyfile="alloc/src/AllocationCollection.hpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classvpr_1_1_allocation_collection_1a298be5e4cc2173a7c9d8a6701e59e499" prot="public" static="no">
        <type>std::vector&lt; std::unique_ptr&lt; <ref refid="classvpr_1_1_memory_block" kindref="compound">MemoryBlock</ref> &gt; &gt;::<ref refid="classvpr_1_1_allocation_collection_1a298be5e4cc2173a7c9d8a6701e59e499" kindref="member">const_iterator</ref></type>
        <definition>typedef std::vector&lt;std::unique_ptr&lt;MemoryBlock&gt; &gt;::const_iterator vpr::AllocationCollection::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocationCollection.hpp" line="39" column="1" bodyfile="alloc/src/AllocationCollection.hpp" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classvpr_1_1_allocation_collection_1a0606e564cb58e6a3c0dad8c4091e91eb" prot="private" static="no" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex vpr::AllocationCollection::containerMutex</definition>
        <argsstring></argsstring>
        <name>containerMutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocationCollection.hpp" line="49" column="1" bodyfile="alloc/src/AllocationCollection.hpp" bodystart="49" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_allocation_collection_1a8a66b73729415adc78507ace1a938f8c" compoundref="_allocation_collection_8cpp" startline="47" endline="61">RemoveBlock</referencedby>
        <referencedby refid="classvpr_1_1_allocation_collection_1a2da5a9d137c84fe3f6739de5fdb7fddc" compoundref="_allocation_collection_8cpp" startline="63" endline="67">SortAllocations</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classvpr_1_1_allocation_collection_1a1d13e83ce527ebb61edf3184ed808fce" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::unique_ptr&lt; <ref refid="classvpr_1_1_memory_block" kindref="compound">MemoryBlock</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::unique_ptr&lt;MemoryBlock&gt; &gt; vpr::AllocationCollection::allocations</definition>
        <argsstring></argsstring>
        <name>allocations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocationCollection.hpp" line="50" column="1" bodyfile="alloc/src/AllocationCollection.hpp" bodystart="50" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_allocation_collection_1ad6739a1338114724c29dbfd9245fb78c" compoundref="_allocation_collection_8cpp" startline="69" endline="71">begin</referencedby>
        <referencedby refid="classvpr_1_1_allocation_collection_1a12cccd841a9a0a02b823c2b6ab6bea2c" compoundref="_allocation_collection_8cpp" startline="85" endline="87">cbegin</referencedby>
        <referencedby refid="classvpr_1_1_allocation_collection_1acea1a0283cde75ebd517885e79d05a01" compoundref="_allocation_collection_8cpp" startline="89" endline="91">cend</referencedby>
        <referencedby refid="classvpr_1_1_allocation_collection_1ad0078fb962f01a4245c8b33a094d3f87" compoundref="_allocation_collection_8cpp" startline="43" endline="45">Empty</referencedby>
        <referencedby refid="classvpr_1_1_allocation_collection_1a9285cc70c50e9380ecb8dc5667eff759" compoundref="_allocation_collection_8cpp" startline="73" endline="75">end</referencedby>
        <referencedby refid="classvpr_1_1_allocation_collection_1a46ab8c77bb2397e34eea28fcd55cb8dd" compoundref="_allocation_collection_8cpp" startline="35" endline="37">operator[]</referencedby>
        <referencedby refid="classvpr_1_1_allocation_collection_1a8a66b73729415adc78507ace1a938f8c" compoundref="_allocation_collection_8cpp" startline="47" endline="61">RemoveBlock</referencedby>
        <referencedby refid="classvpr_1_1_allocation_collection_1a2da5a9d137c84fe3f6739de5fdb7fddc" compoundref="_allocation_collection_8cpp" startline="63" endline="67">SortAllocations</referencedby>
        <referencedby refid="classvpr_1_1_allocation_collection_1ad0d7f2d163ab8031eb9126fe25f3d896" compoundref="_allocation_collection_8cpp" startline="16" endline="27">~AllocationCollection</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classvpr_1_1_allocation_collection_1aaaeba6e3ebc790a836425f662094bf98" prot="private" static="no" mutable="no">
        <type><ref refid="classvpr_1_1_allocator" kindref="compound">Allocator</ref> *</type>
        <definition>Allocator* vpr::AllocationCollection::allocator</definition>
        <argsstring></argsstring>
        <name>allocator</name>
        <initializer>{ nullptr }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocationCollection.hpp" line="51" column="1" bodyfile="alloc/src/AllocationCollection.hpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classvpr_1_1_allocation_collection_1a619ce3b614015e030bea8a3239d60fe2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class DebugVisualization</definition>
        <argsstring></argsstring>
        <name>DebugVisualization</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocationCollection.hpp" line="52" column="1" bodyfile="alloc/src/AllocationCollection.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classvpr_1_1_allocation_collection_1aa54730353079686243fbe5f8545267d0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct DebugVisualizationImpl</definition>
        <argsstring></argsstring>
        <name>DebugVisualizationImpl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocationCollection.hpp" line="53" column="1" bodyfile="alloc/src/AllocationCollection.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classvpr_1_1_allocation_collection_1af26476d0b01af5f4a4442ae27c2592df" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::AllocationCollection::AllocationCollection</definition>
        <argsstring>(const AllocationCollection &amp;)=delete</argsstring>
        <name>AllocationCollection</name>
        <param>
          <type>const <ref refid="classvpr_1_1_allocation_collection" kindref="compound">AllocationCollection</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocationCollection.hpp" line="18" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocation_collection_1a1e9894a592cdafc75b397b732dd5b853" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classvpr_1_1_allocation_collection" kindref="compound">AllocationCollection</ref> &amp;</type>
        <definition>AllocationCollection&amp; vpr::AllocationCollection::operator=</definition>
        <argsstring>(const AllocationCollection &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classvpr_1_1_allocation_collection" kindref="compound">AllocationCollection</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocationCollection.hpp" line="19" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classvpr_1_1_allocation_collection_1a47f08b7e6e95eb14b433759d10baeb7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::AllocationCollection::AllocationCollection</definition>
        <argsstring>()=default</argsstring>
        <name>AllocationCollection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocationCollection.hpp" line="22" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocation_collection_1af5cd304c15b67a86638b110462424631" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::AllocationCollection::AllocationCollection</definition>
        <argsstring>(AllocationCollection &amp;&amp;other) noexcept</argsstring>
        <name>AllocationCollection</name>
        <param>
          <type><ref refid="classvpr_1_1_allocation_collection" kindref="compound">AllocationCollection</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocationCollection.hpp" line="23" column="1" bodyfile="alloc/src/AllocationCollection.cpp" bodystart="9" bodyend="9"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocation_collection_1aad244bf0ed5c0b9d0ad474df45eeab1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classvpr_1_1_allocation_collection" kindref="compound">AllocationCollection</ref> &amp;</type>
        <definition>AllocationCollection &amp; vpr::AllocationCollection::operator=</definition>
        <argsstring>(AllocationCollection &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classvpr_1_1_allocation_collection" kindref="compound">AllocationCollection</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocationCollection.hpp" line="24" column="1" bodyfile="alloc/src/AllocationCollection.cpp" bodystart="11" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocation_collection_1ad0d7f2d163ab8031eb9126fe25f3d896" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::AllocationCollection::~AllocationCollection</definition>
        <argsstring>()</argsstring>
        <name>~AllocationCollection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocationCollection.hpp" line="26" column="1" bodyfile="alloc/src/AllocationCollection.cpp" bodystart="16" bodyend="27"/>
        <references refid="classvpr_1_1_allocation_collection_1a1d13e83ce527ebb61edf3184ed808fce" compoundref="_allocation_collection_8hpp" startline="50">allocations</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocation_collection_1a46ab8c77bb2397e34eea28fcd55cb8dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classvpr_1_1_memory_block" kindref="compound">MemoryBlock</ref> *</type>
        <definition>MemoryBlock * vpr::AllocationCollection::operator[]</definition>
        <argsstring>(const size_t &amp;idx)</argsstring>
        <name>operator[]</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocationCollection.hpp" line="28" column="1" bodyfile="alloc/src/AllocationCollection.cpp" bodystart="35" bodyend="37"/>
        <references refid="classvpr_1_1_allocation_collection_1a1d13e83ce527ebb61edf3184ed808fce" compoundref="_allocation_collection_8hpp" startline="50">allocations</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocation_collection_1a0f3acc309968ac65588c61bc2a367ce8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classvpr_1_1_memory_block" kindref="compound">MemoryBlock</ref> *</type>
        <definition>const MemoryBlock * vpr::AllocationCollection::operator[]</definition>
        <argsstring>(const size_t &amp;idx) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocationCollection.hpp" line="29" column="1" bodyfile="alloc/src/AllocationCollection.cpp" bodystart="39" bodyend="41"/>
        <references refid="classvpr_1_1_allocation_collection_1a1d13e83ce527ebb61edf3184ed808fce" compoundref="_allocation_collection_8hpp" startline="50">allocations</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocation_collection_1a19339dec3558308c85b547b37dc940ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t vpr::AllocationCollection::AddMemoryBlock</definition>
        <argsstring>(std::unique_ptr&lt; MemoryBlock &gt; &amp;&amp;new_block) noexcept</argsstring>
        <name>AddMemoryBlock</name>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classvpr_1_1_memory_block" kindref="compound">MemoryBlock</ref> &gt; &amp;&amp;</type>
          <declname>new_block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocationCollection.hpp" line="31" column="1" bodyfile="alloc/src/AllocationCollection.cpp" bodystart="29" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocation_collection_1ad0078fb962f01a4245c8b33a094d3f87" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vpr::AllocationCollection::Empty</definition>
        <argsstring>() const</argsstring>
        <name>Empty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocationCollection.hpp" line="32" column="1" bodyfile="alloc/src/AllocationCollection.cpp" bodystart="43" bodyend="45"/>
        <references refid="classvpr_1_1_allocation_collection_1a1d13e83ce527ebb61edf3184ed808fce" compoundref="_allocation_collection_8hpp" startline="50">allocations</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocation_collection_1a8a66b73729415adc78507ace1a938f8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::AllocationCollection::RemoveBlock</definition>
        <argsstring>(MemoryBlock *block_to_erase)</argsstring>
        <name>RemoveBlock</name>
        <param>
          <type><ref refid="classvpr_1_1_memory_block" kindref="compound">MemoryBlock</ref> *</type>
          <declname>block_to_erase</declname>
        </param>
        <briefdescription>
<para>Removes only the particular memory block from the internal vector, and re-sorts the blocks once complete. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocationCollection.hpp" line="35" column="1" bodyfile="alloc/src/AllocationCollection.cpp" bodystart="47" bodyend="61"/>
        <references refid="classvpr_1_1_allocation_collection_1a1d13e83ce527ebb61edf3184ed808fce" compoundref="_allocation_collection_8hpp" startline="50">allocations</references>
        <references refid="classvpr_1_1_allocation_collection_1a0606e564cb58e6a3c0dad8c4091e91eb" compoundref="_allocation_collection_8hpp" startline="49">containerMutex</references>
        <references refid="namespacevpr_1a85a5d8c5ba83b162eda5df835a7e6e4d" compoundref="vpr__stdafx_8h" startline="31">vpr::VERBOSE_LOGGING</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocation_collection_1a2da5a9d137c84fe3f6739de5fdb7fddc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::AllocationCollection::SortAllocations</definition>
        <argsstring>()</argsstring>
        <name>SortAllocations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocationCollection.hpp" line="36" column="1" bodyfile="alloc/src/AllocationCollection.cpp" bodystart="63" bodyend="67"/>
        <references refid="classvpr_1_1_allocation_collection_1a1d13e83ce527ebb61edf3184ed808fce" compoundref="_allocation_collection_8hpp" startline="50">allocations</references>
        <references refid="classvpr_1_1_allocation_collection_1a0606e564cb58e6a3c0dad8c4091e91eb" compoundref="_allocation_collection_8hpp" startline="49">containerMutex</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocation_collection_1ad6739a1338114724c29dbfd9245fb78c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classvpr_1_1_allocation_collection_1a723a651fdda475182b15d93e131441f7" kindref="member">iterator</ref></type>
        <definition>AllocationCollection::iterator vpr::AllocationCollection::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocationCollection.hpp" line="41" column="1" bodyfile="alloc/src/AllocationCollection.cpp" bodystart="69" bodyend="71"/>
        <references refid="classvpr_1_1_allocation_collection_1a1d13e83ce527ebb61edf3184ed808fce" compoundref="_allocation_collection_8hpp" startline="50">allocations</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocation_collection_1a9285cc70c50e9380ecb8dc5667eff759" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classvpr_1_1_allocation_collection_1a723a651fdda475182b15d93e131441f7" kindref="member">iterator</ref></type>
        <definition>AllocationCollection::iterator vpr::AllocationCollection::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocationCollection.hpp" line="42" column="1" bodyfile="alloc/src/AllocationCollection.cpp" bodystart="73" bodyend="75"/>
        <references refid="classvpr_1_1_allocation_collection_1a1d13e83ce527ebb61edf3184ed808fce" compoundref="_allocation_collection_8hpp" startline="50">allocations</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocation_collection_1ac21e7c905d3f4765dc94cb3d1eb7e6d6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classvpr_1_1_allocation_collection_1a298be5e4cc2173a7c9d8a6701e59e499" kindref="member">const_iterator</ref></type>
        <definition>AllocationCollection::const_iterator vpr::AllocationCollection::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocationCollection.hpp" line="43" column="1" bodyfile="alloc/src/AllocationCollection.cpp" bodystart="77" bodyend="79"/>
        <references refid="classvpr_1_1_allocation_collection_1a1d13e83ce527ebb61edf3184ed808fce" compoundref="_allocation_collection_8hpp" startline="50">allocations</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocation_collection_1aa970f37eac4a92334165ecf683717c3b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classvpr_1_1_allocation_collection_1a298be5e4cc2173a7c9d8a6701e59e499" kindref="member">const_iterator</ref></type>
        <definition>AllocationCollection::const_iterator vpr::AllocationCollection::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocationCollection.hpp" line="44" column="1" bodyfile="alloc/src/AllocationCollection.cpp" bodystart="81" bodyend="83"/>
        <references refid="classvpr_1_1_allocation_collection_1a1d13e83ce527ebb61edf3184ed808fce" compoundref="_allocation_collection_8hpp" startline="50">allocations</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocation_collection_1a12cccd841a9a0a02b823c2b6ab6bea2c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classvpr_1_1_allocation_collection_1a298be5e4cc2173a7c9d8a6701e59e499" kindref="member">const_iterator</ref></type>
        <definition>AllocationCollection::const_iterator vpr::AllocationCollection::cbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocationCollection.hpp" line="45" column="1" bodyfile="alloc/src/AllocationCollection.cpp" bodystart="85" bodyend="87"/>
        <references refid="classvpr_1_1_allocation_collection_1a1d13e83ce527ebb61edf3184ed808fce" compoundref="_allocation_collection_8hpp" startline="50">allocations</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_allocation_collection_1acea1a0283cde75ebd517885e79d05a01" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classvpr_1_1_allocation_collection_1a298be5e4cc2173a7c9d8a6701e59e499" kindref="member">const_iterator</ref></type>
        <definition>AllocationCollection::const_iterator vpr::AllocationCollection::cend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="alloc/src/AllocationCollection.hpp" line="46" column="1" bodyfile="alloc/src/AllocationCollection.cpp" bodystart="89" bodyend="91"/>
        <references refid="classvpr_1_1_allocation_collection_1a1d13e83ce527ebb61edf3184ed808fce" compoundref="_allocation_collection_8hpp" startline="50">allocations</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An allocation collection is just a vector of MemoryBlocks of the same type. </para>    </briefdescription>
    <detaileddescription>
<para>With commonly used memory types we wil quite easily fill one block up (e.g, device-local memory) so we will need to create a new block. In order to keep some organization among memory types, though, we store these similar memory blocks in this object so that one allocation collection stores all the device memory blocks of uniform type and &quot;block&quot; size (small, medimum, large) </para>    </detaileddescription>
    <collaborationgraph>
      <node id="24">
        <label>std::list&lt; T &gt;::iterator</label>
      </node>
      <node id="23">
        <label>std::vector&lt; suballocationList::iterator &gt;</label>
        <childnode refid="24" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>std::vector&lt; std::unique_ptr&lt; vpr::MemoryBlock &gt; &gt;</label>
        <childnode refid="19" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>vpr::Allocation</label>
        <link refid="classvpr_1_1_allocation"/>
        <childnode refid="16" relation="usage">
          <edgelabel>impl</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>vpr::AllocationImpl</label>
        <link refid="structvpr_1_1_allocation_impl"/>
      </node>
      <node id="16">
        <label>std::unique_ptr&lt; vpr::AllocationImpl &gt;</label>
        <childnode refid="17" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>vpr::AllocatorImpl</label>
        <link refid="structvpr_1_1_allocator_impl"/>
        <childnode refid="9" relation="usage">
          <edgelabel>allocations</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>emptyAllocations</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>privateAllocations</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>std::unordered_set&lt; vpr::Allocation, vpr::AllocationHash &gt;</label>
        <childnode refid="15" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>std::list&lt; Suballocation &gt;</label>
        <childnode refid="22" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>std::map&lt; AllocationSize, std::vector&lt; bool &gt; &gt;</label>
        <childnode refid="13" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>std::map&lt; AllocationSize, std::vector&lt; std::unique_ptr&lt; vpr::AllocationCollection &gt; &gt; &gt;</label>
        <childnode refid="10" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>vpr::AllocationCollection</label>
        <link refid="classvpr_1_1_allocation_collection"/>
        <childnode refid="6" relation="usage">
          <edgelabel>allocator</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>allocations</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>std::unique_ptr&lt; vpr::AllocatorImpl &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>vpr::MemoryBlock</label>
        <link refid="classvpr_1_1_memory_block"/>
        <childnode refid="21" relation="usage">
          <edgelabel>Suballocations</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>availSuballocations</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>vpr::Suballocation</label>
        <link refid="structvpr_1_1_suballocation"/>
      </node>
      <node id="19">
        <label>std::unique_ptr&lt; vpr::MemoryBlock &gt;</label>
        <childnode refid="20" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>std::unique_ptr&lt; vpr::AllocationCollection &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>std::vector&lt; bool &gt;</label>
      </node>
      <node id="6">
        <label>vpr::Allocator</label>
        <link refid="classvpr_1_1_allocator"/>
        <childnode refid="7" relation="usage">
          <edgelabel>impl</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>std::vector&lt; std::unique_ptr&lt; vpr::AllocationCollection &gt; &gt;</label>
        <childnode refid="11" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="alloc/src/AllocationCollection.hpp" line="17" column="1" bodyfile="alloc/src/AllocationCollection.hpp" bodystart="17" bodyend="54"/>
    <listofallmembers>
      <member refid="classvpr_1_1_allocation_collection_1a19339dec3558308c85b547b37dc940ce" prot="public" virt="non-virtual"><scope>vpr::AllocationCollection</scope><name>AddMemoryBlock</name></member>
      <member refid="classvpr_1_1_allocation_collection_1af26476d0b01af5f4a4442ae27c2592df" prot="private" virt="non-virtual"><scope>vpr::AllocationCollection</scope><name>AllocationCollection</name></member>
      <member refid="classvpr_1_1_allocation_collection_1a47f08b7e6e95eb14b433759d10baeb7c" prot="public" virt="non-virtual"><scope>vpr::AllocationCollection</scope><name>AllocationCollection</name></member>
      <member refid="classvpr_1_1_allocation_collection_1af5cd304c15b67a86638b110462424631" prot="public" virt="non-virtual"><scope>vpr::AllocationCollection</scope><name>AllocationCollection</name></member>
      <member refid="classvpr_1_1_allocation_collection_1a1d13e83ce527ebb61edf3184ed808fce" prot="private" virt="non-virtual"><scope>vpr::AllocationCollection</scope><name>allocations</name></member>
      <member refid="classvpr_1_1_allocation_collection_1aaaeba6e3ebc790a836425f662094bf98" prot="private" virt="non-virtual"><scope>vpr::AllocationCollection</scope><name>allocator</name></member>
      <member refid="classvpr_1_1_allocation_collection_1ad6739a1338114724c29dbfd9245fb78c" prot="public" virt="non-virtual"><scope>vpr::AllocationCollection</scope><name>begin</name></member>
      <member refid="classvpr_1_1_allocation_collection_1ac21e7c905d3f4765dc94cb3d1eb7e6d6" prot="public" virt="non-virtual"><scope>vpr::AllocationCollection</scope><name>begin</name></member>
      <member refid="classvpr_1_1_allocation_collection_1a12cccd841a9a0a02b823c2b6ab6bea2c" prot="public" virt="non-virtual"><scope>vpr::AllocationCollection</scope><name>cbegin</name></member>
      <member refid="classvpr_1_1_allocation_collection_1acea1a0283cde75ebd517885e79d05a01" prot="public" virt="non-virtual"><scope>vpr::AllocationCollection</scope><name>cend</name></member>
      <member refid="classvpr_1_1_allocation_collection_1a298be5e4cc2173a7c9d8a6701e59e499" prot="public" virt="non-virtual"><scope>vpr::AllocationCollection</scope><name>const_iterator</name></member>
      <member refid="classvpr_1_1_allocation_collection_1a0606e564cb58e6a3c0dad8c4091e91eb" prot="private" virt="non-virtual"><scope>vpr::AllocationCollection</scope><name>containerMutex</name></member>
      <member refid="classvpr_1_1_allocation_collection_1a619ce3b614015e030bea8a3239d60fe2" prot="private" virt="non-virtual"><scope>vpr::AllocationCollection</scope><name>DebugVisualization</name></member>
      <member refid="classvpr_1_1_allocation_collection_1aa54730353079686243fbe5f8545267d0" prot="private" virt="non-virtual"><scope>vpr::AllocationCollection</scope><name>DebugVisualizationImpl</name></member>
      <member refid="classvpr_1_1_allocation_collection_1ad0078fb962f01a4245c8b33a094d3f87" prot="public" virt="non-virtual"><scope>vpr::AllocationCollection</scope><name>Empty</name></member>
      <member refid="classvpr_1_1_allocation_collection_1a9285cc70c50e9380ecb8dc5667eff759" prot="public" virt="non-virtual"><scope>vpr::AllocationCollection</scope><name>end</name></member>
      <member refid="classvpr_1_1_allocation_collection_1aa970f37eac4a92334165ecf683717c3b" prot="public" virt="non-virtual"><scope>vpr::AllocationCollection</scope><name>end</name></member>
      <member refid="classvpr_1_1_allocation_collection_1a723a651fdda475182b15d93e131441f7" prot="public" virt="non-virtual"><scope>vpr::AllocationCollection</scope><name>iterator</name></member>
      <member refid="classvpr_1_1_allocation_collection_1a1e9894a592cdafc75b397b732dd5b853" prot="private" virt="non-virtual"><scope>vpr::AllocationCollection</scope><name>operator=</name></member>
      <member refid="classvpr_1_1_allocation_collection_1aad244bf0ed5c0b9d0ad474df45eeab1e" prot="public" virt="non-virtual"><scope>vpr::AllocationCollection</scope><name>operator=</name></member>
      <member refid="classvpr_1_1_allocation_collection_1a46ab8c77bb2397e34eea28fcd55cb8dd" prot="public" virt="non-virtual"><scope>vpr::AllocationCollection</scope><name>operator[]</name></member>
      <member refid="classvpr_1_1_allocation_collection_1a0f3acc309968ac65588c61bc2a367ce8" prot="public" virt="non-virtual"><scope>vpr::AllocationCollection</scope><name>operator[]</name></member>
      <member refid="classvpr_1_1_allocation_collection_1a8a66b73729415adc78507ace1a938f8c" prot="public" virt="non-virtual"><scope>vpr::AllocationCollection</scope><name>RemoveBlock</name></member>
      <member refid="classvpr_1_1_allocation_collection_1a2da5a9d137c84fe3f6739de5fdb7fddc" prot="public" virt="non-virtual"><scope>vpr::AllocationCollection</scope><name>SortAllocations</name></member>
      <member refid="classvpr_1_1_allocation_collection_1ad0d7f2d163ab8031eb9126fe25f3d896" prot="public" virt="non-virtual"><scope>vpr::AllocationCollection</scope><name>~AllocationCollection</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
