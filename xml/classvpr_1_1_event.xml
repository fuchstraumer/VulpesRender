<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classvpr_1_1_event" kind="class" language="C++" prot="public">
    <compoundname>vpr::Event</compoundname>
    <includes refid="_event_8hpp" local="no">Event.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classvpr_1_1_event_1ad84628d3da32bfa347f385b84124bc59" prot="private" static="no" mutable="no">
        <type>VkDevice</type>
        <definition>VkDevice vpr::Event::device</definition>
        <argsstring></argsstring>
        <name>device</name>
        <initializer>{ VK_NULL_HANDLE }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sync/include/Event.hpp" line="57" column="1" bodyfile="sync/include/Event.hpp" bodystart="57" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_event_1aa0caf00452e301cb6220e2394b102084" compoundref="_event_8cpp" startline="7" endline="10">Event</referencedby>
        <referencedby refid="classvpr_1_1_event_1ac3ba488b1703ded001e55af5ada50849" compoundref="_event_8cpp" startline="39" endline="41">GetStatus</referencedby>
        <referencedby refid="classvpr_1_1_event_1abf78b8b9982c506d3e85ba5f75c8285c" compoundref="_event_8cpp" startline="34" endline="37">Reset</referencedby>
        <referencedby refid="classvpr_1_1_event_1a0089000d7e4ffd39efab590059c52ca5" compoundref="_event_8cpp" startline="29" endline="32">Set</referencedby>
        <referencedby refid="classvpr_1_1_event_1a751e895a90d66ce635ce8479dec8e92f" compoundref="_event_8cpp" startline="12" endline="16">~Event</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classvpr_1_1_event_1a40c5e09a133ea869f45bde3d184d0e08" prot="private" static="no" mutable="no">
        <type>VkEvent</type>
        <definition>VkEvent vpr::Event::handle</definition>
        <argsstring></argsstring>
        <name>handle</name>
        <initializer>{ VK_NULL_HANDLE }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sync/include/Event.hpp" line="58" column="1" bodyfile="sync/include/Event.hpp" bodystart="58" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_event_1aa0caf00452e301cb6220e2394b102084" compoundref="_event_8cpp" startline="7" endline="10">Event</referencedby>
        <referencedby refid="classvpr_1_1_event_1ac3ba488b1703ded001e55af5ada50849" compoundref="_event_8cpp" startline="39" endline="41">GetStatus</referencedby>
        <referencedby refid="classvpr_1_1_event_1abf78b8b9982c506d3e85ba5f75c8285c" compoundref="_event_8cpp" startline="34" endline="37">Reset</referencedby>
        <referencedby refid="classvpr_1_1_event_1a0089000d7e4ffd39efab590059c52ca5" compoundref="_event_8cpp" startline="29" endline="32">Set</referencedby>
        <referencedby refid="classvpr_1_1_event_1a55ce6fe834e0adb16b0085ad9762233e" compoundref="_event_8cpp" startline="61" endline="63">Wait</referencedby>
        <referencedby refid="classvpr_1_1_event_1a751e895a90d66ce635ce8479dec8e92f" compoundref="_event_8cpp" startline="12" endline="16">~Event</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classvpr_1_1_event_1ac8c4a4985a5121dcb9cf3d7fb2d85b2f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::Event::Event</definition>
        <argsstring>(const Event &amp;)=delete</argsstring>
        <name>Event</name>
        <param>
          <type>const <ref refid="classvpr_1_1_event" kindref="compound">Event</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sync/include/Event.hpp" line="24" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_event_1a6581a8a04a35539bbc44e52fcd022b4d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classvpr_1_1_event" kindref="compound">Event</ref> &amp;</type>
        <definition>Event&amp; vpr::Event::operator=</definition>
        <argsstring>(const Event &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classvpr_1_1_event" kindref="compound">Event</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sync/include/Event.hpp" line="25" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classvpr_1_1_event_1aa0caf00452e301cb6220e2394b102084" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::Event::Event</definition>
        <argsstring>(const VkDevice &amp;dvc)</argsstring>
        <name>Event</name>
        <param>
          <type>const VkDevice &amp;</type>
          <declname>dvc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sync/include/Event.hpp" line="28" column="1" bodyfile="sync/src/Event.cpp" bodystart="7" bodyend="10"/>
        <references refid="classvpr_1_1_event_1ad84628d3da32bfa347f385b84124bc59" compoundref="_event_8hpp" startline="57">device</references>
        <references refid="classvpr_1_1_event_1a40c5e09a133ea869f45bde3d184d0e08" compoundref="_event_8hpp" startline="58">handle</references>
        <references refid="namespacevpr_1a9afd956451263d552a1d9e90a4d8676e" compoundref="_create_info_base_8hpp" startline="574">vpr::vk_event_create_info_base</references>
        <references refid="vk_assert_8hpp_1a92c2e07b0d021fc331be70a65c61dacc" compoundref="vk_assert_8hpp" startline="9">VkAssert</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_event_1a751e895a90d66ce635ce8479dec8e92f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::Event::~Event</definition>
        <argsstring>()</argsstring>
        <name>~Event</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sync/include/Event.hpp" line="29" column="1" bodyfile="sync/src/Event.cpp" bodystart="12" bodyend="16"/>
        <references refid="classvpr_1_1_event_1ad84628d3da32bfa347f385b84124bc59" compoundref="_event_8hpp" startline="57">device</references>
        <references refid="classvpr_1_1_event_1a40c5e09a133ea869f45bde3d184d0e08" compoundref="_event_8hpp" startline="58">handle</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_event_1a5e559677956dfabb3a4b612490c437b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::Event::Event</definition>
        <argsstring>(Event &amp;&amp;other) noexcept</argsstring>
        <name>Event</name>
        <param>
          <type><ref refid="classvpr_1_1_event" kindref="compound">Event</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sync/include/Event.hpp" line="30" column="1" bodyfile="sync/src/Event.cpp" bodystart="18" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_event_1a0a2e28f3aa88a4cbf622d63f699654d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classvpr_1_1_event" kindref="compound">Event</ref> &amp;</type>
        <definition>Event &amp; vpr::Event::operator=</definition>
        <argsstring>(Event &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classvpr_1_1_event" kindref="compound">Event</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sync/include/Event.hpp" line="31" column="1" bodyfile="sync/src/Event.cpp" bodystart="22" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_event_1a350d16bc60d14a29f99041e91e9be982" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const VkEvent &amp;</type>
        <definition>const VkEvent&amp; vpr::Event::vkHandle</definition>
        <argsstring>() const noexcept</argsstring>
        <name>vkHandle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sync/include/Event.hpp" line="33" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_event_1a0089000d7e4ffd39efab590059c52ca5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Event::Set</definition>
        <argsstring>() noexcept</argsstring>
        <name>Set</name>
        <briefdescription>
<para>Sets the event to signaled/&quot;set&quot; on the <emphasis>host</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sync/include/Event.hpp" line="36" column="1" bodyfile="sync/src/Event.cpp" bodystart="29" bodyend="32"/>
        <references refid="classvpr_1_1_event_1ad84628d3da32bfa347f385b84124bc59" compoundref="_event_8hpp" startline="57">device</references>
        <references refid="classvpr_1_1_event_1a40c5e09a133ea869f45bde3d184d0e08" compoundref="_event_8hpp" startline="58">handle</references>
        <references refid="vk_assert_8hpp_1a92c2e07b0d021fc331be70a65c61dacc" compoundref="vk_assert_8hpp" startline="9">VkAssert</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_event_1abf78b8b9982c506d3e85ba5f75c8285c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Event::Reset</definition>
        <argsstring>() noexcept</argsstring>
        <name>Reset</name>
        <briefdescription>
<para>Resets the event unsignaled/&quot;reset&quot; on the <emphasis>host</emphasis> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sync/include/Event.hpp" line="38" column="1" bodyfile="sync/src/Event.cpp" bodystart="34" bodyend="37"/>
        <references refid="classvpr_1_1_event_1ad84628d3da32bfa347f385b84124bc59" compoundref="_event_8hpp" startline="57">device</references>
        <references refid="classvpr_1_1_event_1a40c5e09a133ea869f45bde3d184d0e08" compoundref="_event_8hpp" startline="58">handle</references>
        <references refid="vk_assert_8hpp_1a92c2e07b0d021fc331be70a65c61dacc" compoundref="vk_assert_8hpp" startline="9">VkAssert</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_event_1ac3ba488b1703ded001e55af5ada50849" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>VkResult</type>
        <definition>VkResult vpr::Event::GetStatus</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetStatus</name>
        <briefdescription>
<para>Retrieves current status of the event - either VK_EVENT_SET or VK_EVENT_RESET. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sync/include/Event.hpp" line="40" column="1" bodyfile="sync/src/Event.cpp" bodystart="39" bodyend="41"/>
        <references refid="classvpr_1_1_event_1ad84628d3da32bfa347f385b84124bc59" compoundref="_event_8hpp" startline="57">device</references>
        <references refid="classvpr_1_1_event_1a40c5e09a133ea869f45bde3d184d0e08" compoundref="_event_8hpp" startline="58">handle</references>
        <referencedby refid="classvpr_1_1_event_1a136668a70c07e1e3f3801184e6bc80d1" compoundref="_event_8cpp" startline="48" endline="51">IsReset</referencedby>
        <referencedby refid="classvpr_1_1_event_1a065551f41d822e7fe5d371d96f23282a" compoundref="_event_8cpp" startline="43" endline="46">IsSet</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_event_1a065551f41d822e7fe5d371d96f23282a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vpr::Event::IsSet</definition>
        <argsstring>() const noexcept</argsstring>
        <name>IsSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sync/include/Event.hpp" line="42" column="1" bodyfile="sync/src/Event.cpp" bodystart="43" bodyend="46"/>
        <references refid="classvpr_1_1_event_1ac3ba488b1703ded001e55af5ada50849" compoundref="_event_8cpp" startline="39" endline="41">GetStatus</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_event_1a136668a70c07e1e3f3801184e6bc80d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vpr::Event::IsReset</definition>
        <argsstring>() const noexcept</argsstring>
        <name>IsReset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sync/include/Event.hpp" line="43" column="1" bodyfile="sync/src/Event.cpp" bodystart="48" bodyend="51"/>
        <references refid="classvpr_1_1_event_1ac3ba488b1703ded001e55af5ada50849" compoundref="_event_8cpp" startline="39" endline="41">GetStatus</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_event_1a4a02a4dbd5693ca95254074ada52286a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Event::Set</definition>
        <argsstring>(const VkCommandBuffer &amp;cmd, const VkPipelineStageFlags stage_to_signal_at)</argsstring>
        <name>Set</name>
        <param>
          <type>const VkCommandBuffer &amp;</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>const VkPipelineStageFlags</type>
          <declname>stage_to_signal_at</declname>
        </param>
        <briefdescription>
<para>Sets this event to signaled at the given stage of the pipeline, upon execution of the passed command buffer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sync/include/Event.hpp" line="46" column="1" bodyfile="sync/src/Event.cpp" bodystart="53" bodyend="55"/>
        <references refid="classvpr_1_1_event_1a40c5e09a133ea869f45bde3d184d0e08" compoundref="_event_8hpp" startline="58">handle</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_event_1a2b3891c61c0b78ed8abedef27658aa27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Event::Reset</definition>
        <argsstring>(const VkCommandBuffer &amp;cmd, const VkPipelineStageFlags stage_to_reset_at)</argsstring>
        <name>Reset</name>
        <param>
          <type>const VkCommandBuffer &amp;</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>const VkPipelineStageFlags</type>
          <declname>stage_to_reset_at</declname>
        </param>
        <briefdescription>
<para>Resets this event at the given pipeline stage upon execution of the passed command buffer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sync/include/Event.hpp" line="48" column="1" bodyfile="sync/src/Event.cpp" bodystart="57" bodyend="59"/>
        <references refid="classvpr_1_1_event_1a40c5e09a133ea869f45bde3d184d0e08" compoundref="_event_8hpp" startline="58">handle</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_event_1a55ce6fe834e0adb16b0085ad9762233e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::Event::Wait</definition>
        <argsstring>(const VkCommandBuffer &amp;cmd, const VkPipelineStageFlags potential_signal_stages, const VkPipelineStageFlags stages_to_wait_at)</argsstring>
        <name>Wait</name>
        <param>
          <type>const VkCommandBuffer &amp;</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>const VkPipelineStageFlags</type>
          <declname>potential_signal_stages</declname>
        </param>
        <param>
          <type>const VkPipelineStageFlags</type>
          <declname>stages_to_wait_at</declname>
        </param>
        <briefdescription>
<para>Waits for event when executing given command buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>potential_signal_stages</parametername>
</parameternamelist>
<parameterdescription>
<para>stages the event can potentially be set to &quot;signalled&quot; in. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stages_to_wait_at</parametername>
</parameternamelist>
<parameterdescription>
<para>stages that will wait for this event before executing </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sync/include/Event.hpp" line="53" column="1" bodyfile="sync/src/Event.cpp" bodystart="61" bodyend="63"/>
        <references refid="classvpr_1_1_event_1a40c5e09a133ea869f45bde3d184d0e08" compoundref="_event_8hpp" startline="58">handle</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Events are a unique synchronization primitive on Vulkan: unlike fences or semaphores they are not strictly intended for only use on the device or only use on the host. </para>    </briefdescription>
    <detaileddescription>
<para>Events can have their status retrieved and set on the host, but cannot be waited on by the host. However, they can be waited on by the device - but the device cannot retrieve their status (it can however, set or reset the event).</para><para>vkCmdWaitEvent also takes six more parameters than what is presented here - representing various memory barriers to execute once the event clears. These would&apos;ve added clutter to the function signature though, so that is left unimplemented. Instead, the pure wait-only interpretation of that function is presented through this class interface.</para><para>Events are best used to synchronize and regulate events occuring at different stages of the same pipeline, unlike semaphores which work well across queues and command submissions (though they could be used like this, as well, I believe). </para>    </detaileddescription>
    <location file="sync/include/Event.hpp" line="23" column="1" bodyfile="sync/include/Event.hpp" bodystart="23" bodyend="59"/>
    <listofallmembers>
      <member refid="classvpr_1_1_event_1ad84628d3da32bfa347f385b84124bc59" prot="private" virt="non-virtual"><scope>vpr::Event</scope><name>device</name></member>
      <member refid="classvpr_1_1_event_1ac8c4a4985a5121dcb9cf3d7fb2d85b2f" prot="private" virt="non-virtual"><scope>vpr::Event</scope><name>Event</name></member>
      <member refid="classvpr_1_1_event_1aa0caf00452e301cb6220e2394b102084" prot="public" virt="non-virtual"><scope>vpr::Event</scope><name>Event</name></member>
      <member refid="classvpr_1_1_event_1a5e559677956dfabb3a4b612490c437b5" prot="public" virt="non-virtual"><scope>vpr::Event</scope><name>Event</name></member>
      <member refid="classvpr_1_1_event_1ac3ba488b1703ded001e55af5ada50849" prot="public" virt="non-virtual"><scope>vpr::Event</scope><name>GetStatus</name></member>
      <member refid="classvpr_1_1_event_1a40c5e09a133ea869f45bde3d184d0e08" prot="private" virt="non-virtual"><scope>vpr::Event</scope><name>handle</name></member>
      <member refid="classvpr_1_1_event_1a136668a70c07e1e3f3801184e6bc80d1" prot="public" virt="non-virtual"><scope>vpr::Event</scope><name>IsReset</name></member>
      <member refid="classvpr_1_1_event_1a065551f41d822e7fe5d371d96f23282a" prot="public" virt="non-virtual"><scope>vpr::Event</scope><name>IsSet</name></member>
      <member refid="classvpr_1_1_event_1a6581a8a04a35539bbc44e52fcd022b4d" prot="private" virt="non-virtual"><scope>vpr::Event</scope><name>operator=</name></member>
      <member refid="classvpr_1_1_event_1a0a2e28f3aa88a4cbf622d63f699654d9" prot="public" virt="non-virtual"><scope>vpr::Event</scope><name>operator=</name></member>
      <member refid="classvpr_1_1_event_1abf78b8b9982c506d3e85ba5f75c8285c" prot="public" virt="non-virtual"><scope>vpr::Event</scope><name>Reset</name></member>
      <member refid="classvpr_1_1_event_1a2b3891c61c0b78ed8abedef27658aa27" prot="public" virt="non-virtual"><scope>vpr::Event</scope><name>Reset</name></member>
      <member refid="classvpr_1_1_event_1a0089000d7e4ffd39efab590059c52ca5" prot="public" virt="non-virtual"><scope>vpr::Event</scope><name>Set</name></member>
      <member refid="classvpr_1_1_event_1a4a02a4dbd5693ca95254074ada52286a" prot="public" virt="non-virtual"><scope>vpr::Event</scope><name>Set</name></member>
      <member refid="classvpr_1_1_event_1a350d16bc60d14a29f99041e91e9be982" prot="public" virt="non-virtual"><scope>vpr::Event</scope><name>vkHandle</name></member>
      <member refid="classvpr_1_1_event_1a55ce6fe834e0adb16b0085ad9762233e" prot="public" virt="non-virtual"><scope>vpr::Event</scope><name>Wait</name></member>
      <member refid="classvpr_1_1_event_1a751e895a90d66ce635ce8479dec8e92f" prot="public" virt="non-virtual"><scope>vpr::Event</scope><name>~Event</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
