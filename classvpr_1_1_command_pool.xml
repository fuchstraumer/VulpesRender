<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classvpr_1_1_command_pool" kind="class" language="C++" prot="public">
    <compoundname>vpr::CommandPool</compoundname>
    <includes refid="_command_pool_8hpp" local="no">CommandPool.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classvpr_1_1_command_pool_1a72066e2fd4dbc0f3320a43d8b90db9fa" prot="private" static="no" mutable="no">
        <type>VkCommandPool</type>
        <definition>VkCommandPool vpr::CommandPool::handle</definition>
        <argsstring></argsstring>
        <name>handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="command/include/CommandPool.hpp" line="77" column="1" bodyfile="command/include/CommandPool.hpp" bodystart="77" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_command_pool_1a3df787753ace292c1b295907754172a3" compoundref="_command_pool_8cpp" startline="59" endline="73">AllocateCmdBuffers</referencedby>
        <referencedby refid="classvpr_1_1_command_pool_1a62755d6f74406b1b506cbdebda7620a1" compoundref="_command_pool_8cpp" startline="21" endline="23">CommandPool</referencedby>
        <referencedby refid="classvpr_1_1_command_pool_1ad40b0becc578d8291780202126f119ee" compoundref="_command_pool_8cpp" startline="48" endline="57">destroy</referencedby>
        <referencedby refid="classvpr_1_1_command_pool_1a7c6a4a50328cf4dd6ac76760001f68ab" compoundref="_command_pool_8cpp" startline="75" endline="80">FreeCommandBuffers</referencedby>
        <referencedby refid="classvpr_1_1_command_pool_1aa016e75a990a46203a0b75de317e6f1e" compoundref="_command_pool_8cpp" startline="25" endline="27">ResetCmdPool</referencedby>
        <referencedby refid="classvpr_1_1_command_pool_1a27e9ae2e084faaffe032cb9b92ad2fa4" compoundref="_command_pool_8cpp" startline="102" endline="120">StartSingleCmdBuffer</referencedby>
        <referencedby refid="classvpr_1_1_command_pool_1a49d7a6a1633737f382dfe1b501f673b2" compoundref="_command_pool_8cpp" startline="86" endline="88">vkHandle</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classvpr_1_1_command_pool_1a7b77449cdde922d7dbf7619facb1fcf9" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="structvpr_1_1_command_buffers" kindref="compound">CommandBuffers</ref> &gt;</type>
        <definition>std::unique_ptr&lt;CommandBuffers&gt; vpr::CommandPool::cmdBuffers</definition>
        <argsstring></argsstring>
        <name>cmdBuffers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="command/include/CommandPool.hpp" line="78" column="1" bodyfile="command/include/CommandPool.hpp" bodystart="78" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_command_pool_1a3df787753ace292c1b295907754172a3" compoundref="_command_pool_8cpp" startline="59" endline="73">AllocateCmdBuffers</referencedby>
        <referencedby refid="classvpr_1_1_command_pool_1a1434a842101a0354902fe53140be34ef" compoundref="_command_pool_8cpp" startline="143" endline="145">Data</referencedby>
        <referencedby refid="classvpr_1_1_command_pool_1ad40b0becc578d8291780202126f119ee" compoundref="_command_pool_8cpp" startline="48" endline="57">destroy</referencedby>
        <referencedby refid="classvpr_1_1_command_pool_1a7c6a4a50328cf4dd6ac76760001f68ab" compoundref="_command_pool_8cpp" startline="75" endline="80">FreeCommandBuffers</referencedby>
        <referencedby refid="classvpr_1_1_command_pool_1af5b53194b4ee68edad5290595623f3bb" compoundref="_command_pool_8cpp" startline="98" endline="100">GetCmdBuffer</referencedby>
        <referencedby refid="classvpr_1_1_command_pool_1a7645594e0dd6952515f1240c75ae248b" compoundref="_command_pool_8cpp" startline="90" endline="92">GetCommandBuffers</referencedby>
        <referencedby refid="classvpr_1_1_command_pool_1a04e53dde1a3d1d7103eaea6ad7862efe" compoundref="_command_pool_8cpp" startline="94" endline="96">operator[]</referencedby>
        <referencedby refid="classvpr_1_1_command_pool_1aa17782ac38bd5d72a4c7f3867162b03e" compoundref="_command_pool_8cpp" startline="82" endline="84">ResetCmdBuffer</referencedby>
        <referencedby refid="classvpr_1_1_command_pool_1afc12541bb9b26e7fd4e35b7ad92f3f33" compoundref="_command_pool_8cpp" startline="139" endline="141">size</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classvpr_1_1_command_pool_1ad195ffefa8027dca83d0d3554eb93099" prot="private" static="no" mutable="no">
        <type>VkDevice</type>
        <definition>VkDevice vpr::CommandPool::parent</definition>
        <argsstring></argsstring>
        <name>parent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="command/include/CommandPool.hpp" line="79" column="1" bodyfile="command/include/CommandPool.hpp" bodystart="79" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_command_pool_1a3df787753ace292c1b295907754172a3" compoundref="_command_pool_8cpp" startline="59" endline="73">AllocateCmdBuffers</referencedby>
        <referencedby refid="classvpr_1_1_command_pool_1a62755d6f74406b1b506cbdebda7620a1" compoundref="_command_pool_8cpp" startline="21" endline="23">CommandPool</referencedby>
        <referencedby refid="classvpr_1_1_command_pool_1ad40b0becc578d8291780202126f119ee" compoundref="_command_pool_8cpp" startline="48" endline="57">destroy</referencedby>
        <referencedby refid="classvpr_1_1_command_pool_1a7c6a4a50328cf4dd6ac76760001f68ab" compoundref="_command_pool_8cpp" startline="75" endline="80">FreeCommandBuffers</referencedby>
        <referencedby refid="classvpr_1_1_command_pool_1aa016e75a990a46203a0b75de317e6f1e" compoundref="_command_pool_8cpp" startline="25" endline="27">ResetCmdPool</referencedby>
        <referencedby refid="classvpr_1_1_command_pool_1a27e9ae2e084faaffe032cb9b92ad2fa4" compoundref="_command_pool_8cpp" startline="102" endline="120">StartSingleCmdBuffer</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classvpr_1_1_command_pool_1ae7526bd09f8b2407146ff3df1057a959" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::CommandPool::CommandPool</definition>
        <argsstring>(const CommandPool &amp;)=delete</argsstring>
        <name>CommandPool</name>
        <param>
          <type>const <ref refid="classvpr_1_1_command_pool" kindref="compound">CommandPool</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="command/include/CommandPool.hpp" line="25" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_command_pool_1a751041197c520a69652ec0df6ce6385b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classvpr_1_1_command_pool" kindref="compound">CommandPool</ref> &amp;</type>
        <definition>CommandPool&amp; vpr::CommandPool::operator=</definition>
        <argsstring>(const CommandPool &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classvpr_1_1_command_pool" kindref="compound">CommandPool</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="command/include/CommandPool.hpp" line="26" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_command_pool_1ad40b0becc578d8291780202126f119ee" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::CommandPool::destroy</definition>
        <argsstring>()</argsstring>
        <name>destroy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="command/include/CommandPool.hpp" line="76" column="1" bodyfile="command/src/CommandPool.cpp" bodystart="48" bodyend="57"/>
        <references refid="classvpr_1_1_command_pool_1a7b77449cdde922d7dbf7619facb1fcf9" compoundref="_command_pool_8hpp" startline="78">cmdBuffers</references>
        <references refid="classvpr_1_1_command_pool_1a7c6a4a50328cf4dd6ac76760001f68ab" compoundref="_command_pool_8cpp" startline="75" endline="80">FreeCommandBuffers</references>
        <references refid="classvpr_1_1_command_pool_1a72066e2fd4dbc0f3320a43d8b90db9fa" compoundref="_command_pool_8hpp" startline="77">handle</references>
        <references refid="classvpr_1_1_command_pool_1ad195ffefa8027dca83d0d3554eb93099" compoundref="_command_pool_8hpp" startline="79">parent</references>
        <references refid="namespacevpr_1a85a5d8c5ba83b162eda5df835a7e6e4d" compoundref="vpr__stdafx_8h" startline="31">vpr::VERBOSE_LOGGING</references>
        <referencedby refid="classvpr_1_1_command_pool_1a726585b12ac4f21b74de94c757136c4c" compoundref="_command_pool_8cpp" startline="44" endline="46">~CommandPool</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classvpr_1_1_command_pool_1a62755d6f74406b1b506cbdebda7620a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::CommandPool::CommandPool</definition>
        <argsstring>(const VkDevice parent, const VkCommandPoolCreateInfo &amp;create_info)</argsstring>
        <name>CommandPool</name>
        <param>
          <type>const VkDevice</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>const VkCommandPoolCreateInfo &amp;</type>
          <declname>create_info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="command/include/CommandPool.hpp" line="29" column="1" bodyfile="command/src/CommandPool.cpp" bodystart="21" bodyend="23"/>
        <references refid="classvpr_1_1_command_pool_1a72066e2fd4dbc0f3320a43d8b90db9fa" compoundref="_command_pool_8hpp" startline="77">handle</references>
        <references refid="classvpr_1_1_command_pool_1ad195ffefa8027dca83d0d3554eb93099" compoundref="_command_pool_8hpp" startline="79">parent</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_command_pool_1a4eb45e5362115372ebcee0a8c59fb5c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::CommandPool::CommandPool</definition>
        <argsstring>(CommandPool &amp;&amp;other) noexcept</argsstring>
        <name>CommandPool</name>
        <param>
          <type><ref refid="classvpr_1_1_command_pool" kindref="compound">CommandPool</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="command/include/CommandPool.hpp" line="30" column="1" bodyfile="command/src/CommandPool.cpp" bodystart="29" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_command_pool_1a42538efdf3d0cba5bbb4954b28e7e6fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classvpr_1_1_command_pool" kindref="compound">CommandPool</ref> &amp;</type>
        <definition>CommandPool &amp; vpr::CommandPool::operator=</definition>
        <argsstring>(CommandPool &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classvpr_1_1_command_pool" kindref="compound">CommandPool</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="command/include/CommandPool.hpp" line="31" column="1" bodyfile="command/src/CommandPool.cpp" bodystart="36" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_command_pool_1a726585b12ac4f21b74de94c757136c4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::CommandPool::~CommandPool</definition>
        <argsstring>()</argsstring>
        <name>~CommandPool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="command/include/CommandPool.hpp" line="32" column="1" bodyfile="command/src/CommandPool.cpp" bodystart="44" bodyend="46"/>
        <references refid="classvpr_1_1_command_pool_1ad40b0becc578d8291780202126f119ee" compoundref="_command_pool_8cpp" startline="48" endline="57">destroy</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_command_pool_1a3df787753ace292c1b295907754172a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::CommandPool::AllocateCmdBuffers</definition>
        <argsstring>(const uint32_t &amp;num_buffers, const VkCommandBufferLevel &amp;cmd_buffer_level)</argsstring>
        <name>AllocateCmdBuffers</name>
        <param>
          <type>const uint32_t &amp;</type>
          <declname>num_buffers</declname>
        </param>
        <param>
          <type>const VkCommandBufferLevel &amp;</type>
          <declname>cmd_buffer_level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="command/include/CommandPool.hpp" line="35" column="1" bodyfile="command/src/CommandPool.cpp" bodystart="59" bodyend="73"/>
        <references refid="classvpr_1_1_command_pool_1a7b77449cdde922d7dbf7619facb1fcf9" compoundref="_command_pool_8hpp" startline="78">cmdBuffers</references>
        <references refid="classvpr_1_1_command_pool_1a72066e2fd4dbc0f3320a43d8b90db9fa" compoundref="_command_pool_8hpp" startline="77">handle</references>
        <references refid="classvpr_1_1_command_pool_1ad195ffefa8027dca83d0d3554eb93099" compoundref="_command_pool_8hpp" startline="79">parent</references>
        <references refid="namespacevpr_1a85a5d8c5ba83b162eda5df835a7e6e4d" compoundref="vpr__stdafx_8h" startline="31">vpr::VERBOSE_LOGGING</references>
        <references refid="namespacevpr_1a570f1edb395e4e16019d1a4c71969be4" compoundref="_create_info_base_8hpp" startline="107">vpr::vk_command_buffer_allocate_info_base</references>
        <references refid="vk_assert_8hpp_1a92c2e07b0d021fc331be70a65c61dacc" compoundref="vk_assert_8hpp" startline="9">VkAssert</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_command_pool_1aa016e75a990a46203a0b75de317e6f1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::CommandPool::ResetCmdPool</definition>
        <argsstring>(const VkCommandPoolResetFlagBits &amp;command_pool_reset_flag_bits=VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT)</argsstring>
        <name>ResetCmdPool</name>
        <param>
          <type>const VkCommandPoolResetFlagBits &amp;</type>
          <declname>command_pool_reset_flag_bits</declname>
          <defval>VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT</defval>
        </param>
        <briefdescription>
<para>Resets the entire command pool via a call to VkResetCommandPool. </para>        </briefdescription>
        <detaileddescription>
<para>Uses VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT by default, which releases all resources that the Vulkan implementation internally allocates. This may take time, and may require re-allocation upon reinitialization but also prevents memory fragmentation when using command pools for quite some time. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command_pool_reset_flag_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>- Only current options are VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT, the default, or no flags (thus, no resources released) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="command/include/CommandPool.hpp" line="42" column="1" bodyfile="command/src/CommandPool.cpp" bodystart="25" bodyend="27"/>
        <references refid="classvpr_1_1_command_pool_1a72066e2fd4dbc0f3320a43d8b90db9fa" compoundref="_command_pool_8hpp" startline="77">handle</references>
        <references refid="classvpr_1_1_command_pool_1ad195ffefa8027dca83d0d3554eb93099" compoundref="_command_pool_8hpp" startline="79">parent</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_command_pool_1aa17782ac38bd5d72a4c7f3867162b03e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::CommandPool::ResetCmdBuffer</definition>
        <argsstring>(const size_t &amp;idx, const VkCommandBufferResetFlagBits &amp;command_buffer_reset_flag_bits=VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT)</argsstring>
        <name>ResetCmdBuffer</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const VkCommandBufferResetFlagBits &amp;</type>
          <declname>command_buffer_reset_flag_bits</declname>
          <defval>VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT</defval>
        </param>
        <briefdescription>
<para>Resets the single command buffer at the given index. </para>        </briefdescription>
        <detaileddescription>
<para>Uses VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT by default, which returns the resources allocated by the Vulkan implementation for this particular command buffer back to the parent pool. Be careful using this in a pool that doesn&apos;t have other buffers reset: this can cause memory fragmentation in the command buffer memory resources, which will increase the time it takes for the Vulkan implementation to find a suitable memory location to use (or it will have to allocate more memory). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command_buffer_reset_flag_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>- Only current options are VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT, the default, or no flags (thus, no resources released) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="command/include/CommandPool.hpp" line="50" column="1" bodyfile="command/src/CommandPool.cpp" bodystart="82" bodyend="84"/>
        <references refid="classvpr_1_1_command_pool_1a7b77449cdde922d7dbf7619facb1fcf9" compoundref="_command_pool_8hpp" startline="78">cmdBuffers</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_command_pool_1a7c6a4a50328cf4dd6ac76760001f68ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::CommandPool::FreeCommandBuffers</definition>
        <argsstring>()</argsstring>
        <name>FreeCommandBuffers</name>
        <briefdescription>
<para>Frees the memory used for all command buffers in this pool, which effectively &quot;deletes&quot; them, unlike resetting a single command buffer or even resetting the entire pool. </para>        </briefdescription>
        <detaileddescription>
<para>This will require calling AllocateCmdBuffers again, as it ultimately resets the object into its base state. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="command/include/CommandPool.hpp" line="55" column="1" bodyfile="command/src/CommandPool.cpp" bodystart="75" bodyend="80"/>
        <references refid="classvpr_1_1_command_pool_1a7b77449cdde922d7dbf7619facb1fcf9" compoundref="_command_pool_8hpp" startline="78">cmdBuffers</references>
        <references refid="classvpr_1_1_command_pool_1a72066e2fd4dbc0f3320a43d8b90db9fa" compoundref="_command_pool_8hpp" startline="77">handle</references>
        <references refid="classvpr_1_1_command_pool_1ad195ffefa8027dca83d0d3554eb93099" compoundref="_command_pool_8hpp" startline="79">parent</references>
        <references refid="namespacevpr_1a85a5d8c5ba83b162eda5df835a7e6e4d" compoundref="vpr__stdafx_8h" startline="31">vpr::VERBOSE_LOGGING</references>
        <referencedby refid="classvpr_1_1_command_pool_1ad40b0becc578d8291780202126f119ee" compoundref="_command_pool_8cpp" startline="48" endline="57">destroy</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_command_pool_1a49d7a6a1633737f382dfe1b501f673b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const VkCommandPool &amp;</type>
        <definition>const VkCommandPool &amp; vpr::CommandPool::vkHandle</definition>
        <argsstring>() const noexcept</argsstring>
        <name>vkHandle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="command/include/CommandPool.hpp" line="57" column="1" bodyfile="command/src/CommandPool.cpp" bodystart="86" bodyend="88"/>
        <references refid="classvpr_1_1_command_pool_1a72066e2fd4dbc0f3320a43d8b90db9fa" compoundref="_command_pool_8hpp" startline="77">handle</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_command_pool_1a04e53dde1a3d1d7103eaea6ad7862efe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkCommandBuffer &amp;</type>
        <definition>VkCommandBuffer &amp; vpr::CommandPool::operator[]</definition>
        <argsstring>(const size_t &amp;idx)</argsstring>
        <name>operator[]</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="command/include/CommandPool.hpp" line="59" column="1" bodyfile="command/src/CommandPool.cpp" bodystart="94" bodyend="96"/>
        <references refid="classvpr_1_1_command_pool_1a7b77449cdde922d7dbf7619facb1fcf9" compoundref="_command_pool_8hpp" startline="78">cmdBuffers</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_command_pool_1af5b53194b4ee68edad5290595623f3bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkCommandBuffer &amp;</type>
        <definition>VkCommandBuffer &amp; vpr::CommandPool::GetCmdBuffer</definition>
        <argsstring>(const size_t &amp;idx)</argsstring>
        <name>GetCmdBuffer</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="command/include/CommandPool.hpp" line="60" column="1" bodyfile="command/src/CommandPool.cpp" bodystart="98" bodyend="100"/>
        <references refid="classvpr_1_1_command_pool_1a7b77449cdde922d7dbf7619facb1fcf9" compoundref="_command_pool_8hpp" startline="78">cmdBuffers</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_command_pool_1a7645594e0dd6952515f1240c75ae248b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const VkCommandBuffer *</type>
        <definition>const VkCommandBuffer * vpr::CommandPool::GetCommandBuffers</definition>
        <argsstring>(const size_t &amp;offset) const</argsstring>
        <name>GetCommandBuffers</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Gets a range of command buffers, starting at the given offset. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="command/include/CommandPool.hpp" line="65" column="1" bodyfile="command/src/CommandPool.cpp" bodystart="90" bodyend="92"/>
        <references refid="classvpr_1_1_command_pool_1a7b77449cdde922d7dbf7619facb1fcf9" compoundref="_command_pool_8hpp" startline="78">cmdBuffers</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_command_pool_1a27e9ae2e084faaffe032cb9b92ad2fa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkCommandBuffer</type>
        <definition>VkCommandBuffer vpr::CommandPool::StartSingleCmdBuffer</definition>
        <argsstring>()</argsstring>
        <name>StartSingleCmdBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="command/include/CommandPool.hpp" line="67" column="1" bodyfile="command/src/CommandPool.cpp" bodystart="102" bodyend="120"/>
        <references refid="classvpr_1_1_command_pool_1a72066e2fd4dbc0f3320a43d8b90db9fa" compoundref="_command_pool_8hpp" startline="77">handle</references>
        <references refid="classvpr_1_1_command_pool_1ad195ffefa8027dca83d0d3554eb93099" compoundref="_command_pool_8hpp" startline="79">parent</references>
        <referencedby refid="classvpr_1_1_buffer_1a3a369873112eb478f3dfdf7b1549d2f6" compoundref="_buffer_deprecated_8cpp" startline="120" endline="141">vpr::Buffer::CopyTo</referencedby>
        <referencedby refid="classvpr_1_1_image_1af859b6a324c843f53bc822fcb90fdf33" compoundref="_image_deprecated_8cpp" startline="69" endline="75">vpr::Image::TransitionLayout</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_command_pool_1ac46b6fae9d0650041a4929698d59508a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vpr::CommandPool::EndSingleCmdBuffer</definition>
        <argsstring>(VkCommandBuffer &amp;cmd_buffer, const VkQueue &amp;queue)</argsstring>
        <name>EndSingleCmdBuffer</name>
        <param>
          <type>VkCommandBuffer &amp;</type>
          <declname>cmd_buffer</declname>
        </param>
        <param>
          <type>const VkQueue &amp;</type>
          <declname>queue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="command/include/CommandPool.hpp" line="68" column="1" bodyfile="command/src/CommandPool.cpp" bodystart="122" bodyend="137"/>
        <references refid="vk_assert_8hpp_1a92c2e07b0d021fc331be70a65c61dacc" compoundref="vk_assert_8hpp" startline="9">VkAssert</references>
        <referencedby refid="classvpr_1_1_buffer_1a3a369873112eb478f3dfdf7b1549d2f6" compoundref="_buffer_deprecated_8cpp" startline="120" endline="141">vpr::Buffer::CopyTo</referencedby>
        <referencedby refid="classvpr_1_1_image_1af859b6a324c843f53bc822fcb90fdf33" compoundref="_image_deprecated_8cpp" startline="69" endline="75">vpr::Image::TransitionLayout</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_command_pool_1afc12541bb9b26e7fd4e35b7ad92f3f33" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const size_t</type>
        <definition>const size_t vpr::CommandPool::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="command/include/CommandPool.hpp" line="70" column="1" bodyfile="command/src/CommandPool.cpp" bodystart="139" bodyend="141"/>
        <references refid="classvpr_1_1_command_pool_1a7b77449cdde922d7dbf7619facb1fcf9" compoundref="_command_pool_8hpp" startline="78">cmdBuffers</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_command_pool_1a1434a842101a0354902fe53140be34ef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const VkCommandBuffer *</type>
        <definition>const VkCommandBuffer * vpr::CommandPool::Data</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="command/include/CommandPool.hpp" line="72" column="1" bodyfile="command/src/CommandPool.cpp" bodystart="143" bodyend="145"/>
        <references refid="classvpr_1_1_command_pool_1a7b77449cdde922d7dbf7619facb1fcf9" compoundref="_command_pool_8hpp" startline="78">cmdBuffers</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classvpr_1_1_command_pool" kindref="compound">CommandPool</ref> class is the primary interface through which one will acquire VkCommandBuffer objects. </para>    </briefdescription>
    <detaileddescription>
<para>The quantity of command buffers is not selected upon construction: only the command buffer level, primary or secondary. Before use, one must call AllocateCmdBuffers or risk exceptions. StartSingleCmdBuffer and EndSingleCmdBuffer can be used to retrieve (relatively wasteful, don&apos;t do it while rendering) single-shot command buffers for things like binding resources to sparse buffers, submitting transfers, or performing image layout transitions.&apos; <xrefsect id="todo_1_todo000001"><xreftitle>Todo</xreftitle><xrefdescription><para>Remove the bool &quot;primary&quot; index from the constructor, only accepting the VkCommandPoolCreateInfo struct </para><para>Remove redundant num_buffers parameter from AllocateCmdBuffers, make the primary/secondary level selected upon alloc not construction.</para></xrefdescription></xrefsect></para>    </detaileddescription>
    <collaborationgraph>
      <node id="89">
        <label>vpr::CommandPool</label>
        <link refid="classvpr_1_1_command_pool"/>
        <childnode refid="90" relation="usage">
          <edgelabel>cmdBuffers</edgelabel>
        </childnode>
      </node>
      <node id="92">
        <label>std::vector&lt; VkCommandBuffer &gt;</label>
      </node>
      <node id="90">
        <label>std::unique_ptr&lt; vpr::CommandBuffers &gt;</label>
        <childnode refid="91" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="91">
        <label>vpr::CommandBuffers</label>
        <link refid="structvpr_1_1_command_buffers"/>
        <childnode refid="92" relation="usage">
          <edgelabel>Data</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="command/include/CommandPool.hpp" line="24" column="1" bodyfile="command/include/CommandPool.hpp" bodystart="24" bodyend="81"/>
    <listofallmembers>
      <member refid="classvpr_1_1_command_pool_1a3df787753ace292c1b295907754172a3" prot="public" virt="non-virtual"><scope>vpr::CommandPool</scope><name>AllocateCmdBuffers</name></member>
      <member refid="classvpr_1_1_command_pool_1a7b77449cdde922d7dbf7619facb1fcf9" prot="private" virt="non-virtual"><scope>vpr::CommandPool</scope><name>cmdBuffers</name></member>
      <member refid="classvpr_1_1_command_pool_1ae7526bd09f8b2407146ff3df1057a959" prot="private" virt="non-virtual"><scope>vpr::CommandPool</scope><name>CommandPool</name></member>
      <member refid="classvpr_1_1_command_pool_1a62755d6f74406b1b506cbdebda7620a1" prot="public" virt="non-virtual"><scope>vpr::CommandPool</scope><name>CommandPool</name></member>
      <member refid="classvpr_1_1_command_pool_1a4eb45e5362115372ebcee0a8c59fb5c2" prot="public" virt="non-virtual"><scope>vpr::CommandPool</scope><name>CommandPool</name></member>
      <member refid="classvpr_1_1_command_pool_1a1434a842101a0354902fe53140be34ef" prot="public" virt="non-virtual"><scope>vpr::CommandPool</scope><name>Data</name></member>
      <member refid="classvpr_1_1_command_pool_1ad40b0becc578d8291780202126f119ee" prot="private" virt="non-virtual"><scope>vpr::CommandPool</scope><name>destroy</name></member>
      <member refid="classvpr_1_1_command_pool_1ac46b6fae9d0650041a4929698d59508a" prot="public" virt="non-virtual"><scope>vpr::CommandPool</scope><name>EndSingleCmdBuffer</name></member>
      <member refid="classvpr_1_1_command_pool_1a7c6a4a50328cf4dd6ac76760001f68ab" prot="public" virt="non-virtual"><scope>vpr::CommandPool</scope><name>FreeCommandBuffers</name></member>
      <member refid="classvpr_1_1_command_pool_1af5b53194b4ee68edad5290595623f3bb" prot="public" virt="non-virtual"><scope>vpr::CommandPool</scope><name>GetCmdBuffer</name></member>
      <member refid="classvpr_1_1_command_pool_1a7645594e0dd6952515f1240c75ae248b" prot="public" virt="non-virtual"><scope>vpr::CommandPool</scope><name>GetCommandBuffers</name></member>
      <member refid="classvpr_1_1_command_pool_1a72066e2fd4dbc0f3320a43d8b90db9fa" prot="private" virt="non-virtual"><scope>vpr::CommandPool</scope><name>handle</name></member>
      <member refid="classvpr_1_1_command_pool_1a751041197c520a69652ec0df6ce6385b" prot="private" virt="non-virtual"><scope>vpr::CommandPool</scope><name>operator=</name></member>
      <member refid="classvpr_1_1_command_pool_1a42538efdf3d0cba5bbb4954b28e7e6fd" prot="public" virt="non-virtual"><scope>vpr::CommandPool</scope><name>operator=</name></member>
      <member refid="classvpr_1_1_command_pool_1a04e53dde1a3d1d7103eaea6ad7862efe" prot="public" virt="non-virtual"><scope>vpr::CommandPool</scope><name>operator[]</name></member>
      <member refid="classvpr_1_1_command_pool_1ad195ffefa8027dca83d0d3554eb93099" prot="private" virt="non-virtual"><scope>vpr::CommandPool</scope><name>parent</name></member>
      <member refid="classvpr_1_1_command_pool_1aa17782ac38bd5d72a4c7f3867162b03e" prot="public" virt="non-virtual"><scope>vpr::CommandPool</scope><name>ResetCmdBuffer</name></member>
      <member refid="classvpr_1_1_command_pool_1aa016e75a990a46203a0b75de317e6f1e" prot="public" virt="non-virtual"><scope>vpr::CommandPool</scope><name>ResetCmdPool</name></member>
      <member refid="classvpr_1_1_command_pool_1afc12541bb9b26e7fd4e35b7ad92f3f33" prot="public" virt="non-virtual"><scope>vpr::CommandPool</scope><name>size</name></member>
      <member refid="classvpr_1_1_command_pool_1a27e9ae2e084faaffe032cb9b92ad2fa4" prot="public" virt="non-virtual"><scope>vpr::CommandPool</scope><name>StartSingleCmdBuffer</name></member>
      <member refid="classvpr_1_1_command_pool_1a49d7a6a1633737f382dfe1b501f673b2" prot="public" virt="non-virtual"><scope>vpr::CommandPool</scope><name>vkHandle</name></member>
      <member refid="classvpr_1_1_command_pool_1a726585b12ac4f21b74de94c757136c4c" prot="public" virt="non-virtual"><scope>vpr::CommandPool</scope><name>~CommandPool</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
