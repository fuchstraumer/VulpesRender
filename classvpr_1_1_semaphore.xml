<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classvpr_1_1_semaphore" kind="class" language="C++" prot="public">
    <compoundname>vpr::Semaphore</compoundname>
    <includes refid="_semaphore_8hpp" local="no">Semaphore.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classvpr_1_1_semaphore_1aaa6537fc68271eb5f84db347505621de" prot="private" static="no" mutable="no">
        <type>VkDevice</type>
        <definition>VkDevice vpr::Semaphore::device</definition>
        <argsstring></argsstring>
        <name>device</name>
        <initializer>{ VK_NULL_HANDLE }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sync/include/Semaphore.hpp" line="40" column="1" bodyfile="sync/include/Semaphore.hpp" bodystart="40" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_semaphore_1a4a3be2d6f3cbc15538d57d8798e3397b" compoundref="_semaphore_8cpp" startline="7" endline="9">Semaphore</referencedby>
        <referencedby refid="classvpr_1_1_semaphore_1a5d3e88cdff0fd3fe9d6ccfdddf39420e" compoundref="_semaphore_8cpp" startline="11" endline="15">~Semaphore</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classvpr_1_1_semaphore_1a613a6915ff3dc3e7f286c1d40ee285d9" prot="private" static="no" mutable="no">
        <type>VkSemaphore</type>
        <definition>VkSemaphore vpr::Semaphore::handle</definition>
        <argsstring></argsstring>
        <name>handle</name>
        <initializer>{ VK_NULL_HANDLE }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sync/include/Semaphore.hpp" line="41" column="1" bodyfile="sync/include/Semaphore.hpp" bodystart="41" bodyend="-1"/>
        <referencedby refid="classvpr_1_1_semaphore_1a4a3be2d6f3cbc15538d57d8798e3397b" compoundref="_semaphore_8cpp" startline="7" endline="9">Semaphore</referencedby>
        <referencedby refid="classvpr_1_1_semaphore_1a7bef04a6c02e7d2b03bc20cf10ade2cc" compoundref="_semaphore_8cpp" startline="28" endline="30">vkHandle</referencedby>
        <referencedby refid="classvpr_1_1_semaphore_1a5d3e88cdff0fd3fe9d6ccfdddf39420e" compoundref="_semaphore_8cpp" startline="11" endline="15">~Semaphore</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classvpr_1_1_semaphore_1abafcf48c972601525447cd31a8ed965b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::Semaphore::Semaphore</definition>
        <argsstring>(const Semaphore &amp;)=delete</argsstring>
        <name>Semaphore</name>
        <param>
          <type>const <ref refid="classvpr_1_1_semaphore" kindref="compound">Semaphore</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sync/include/Semaphore.hpp" line="28" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_semaphore_1ac01d23148aa4db1d000a305bd0725b29" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classvpr_1_1_semaphore" kindref="compound">Semaphore</ref> &amp;</type>
        <definition>Semaphore&amp; vpr::Semaphore::operator=</definition>
        <argsstring>(const Semaphore &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classvpr_1_1_semaphore" kindref="compound">Semaphore</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sync/include/Semaphore.hpp" line="29" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classvpr_1_1_semaphore_1a4a3be2d6f3cbc15538d57d8798e3397b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::Semaphore::Semaphore</definition>
        <argsstring>(const VkDevice &amp;dvc)</argsstring>
        <name>Semaphore</name>
        <param>
          <type>const VkDevice &amp;</type>
          <declname>dvc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sync/include/Semaphore.hpp" line="32" column="1" bodyfile="sync/src/Semaphore.cpp" bodystart="7" bodyend="9"/>
        <references refid="classvpr_1_1_semaphore_1aaa6537fc68271eb5f84db347505621de" compoundref="_semaphore_8hpp" startline="40">device</references>
        <references refid="classvpr_1_1_semaphore_1a613a6915ff3dc3e7f286c1d40ee285d9" compoundref="_semaphore_8hpp" startline="41">handle</references>
        <references refid="namespacevpr_1a45bb22caa779047d62afe5d20e7c3393" compoundref="_create_info_base_8hpp" startline="568">vpr::vk_semaphore_create_info_base</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_semaphore_1a5d3e88cdff0fd3fe9d6ccfdddf39420e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::Semaphore::~Semaphore</definition>
        <argsstring>()</argsstring>
        <name>~Semaphore</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sync/include/Semaphore.hpp" line="33" column="1" bodyfile="sync/src/Semaphore.cpp" bodystart="11" bodyend="15"/>
        <references refid="classvpr_1_1_semaphore_1aaa6537fc68271eb5f84db347505621de" compoundref="_semaphore_8hpp" startline="40">device</references>
        <references refid="classvpr_1_1_semaphore_1a613a6915ff3dc3e7f286c1d40ee285d9" compoundref="_semaphore_8hpp" startline="41">handle</references>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_semaphore_1afda52cb116726cb6d9dc35e27c026781" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vpr::Semaphore::Semaphore</definition>
        <argsstring>(Semaphore &amp;&amp;other) noexcept</argsstring>
        <name>Semaphore</name>
        <param>
          <type><ref refid="classvpr_1_1_semaphore" kindref="compound">Semaphore</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sync/include/Semaphore.hpp" line="34" column="1" bodyfile="sync/src/Semaphore.cpp" bodystart="17" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_semaphore_1a91a695abe81f52dedb2f7105e476bdcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classvpr_1_1_semaphore" kindref="compound">Semaphore</ref> &amp;</type>
        <definition>Semaphore &amp; vpr::Semaphore::operator=</definition>
        <argsstring>(Semaphore &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classvpr_1_1_semaphore" kindref="compound">Semaphore</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sync/include/Semaphore.hpp" line="35" column="1" bodyfile="sync/src/Semaphore.cpp" bodystart="21" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="classvpr_1_1_semaphore_1a7bef04a6c02e7d2b03bc20cf10ade2cc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const VkSemaphore &amp;</type>
        <definition>const VkSemaphore &amp; vpr::Semaphore::vkHandle</definition>
        <argsstring>() const noexcept</argsstring>
        <name>vkHandle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sync/include/Semaphore.hpp" line="37" column="1" bodyfile="sync/src/Semaphore.cpp" bodystart="28" bodyend="30"/>
        <references refid="classvpr_1_1_semaphore_1a613a6915ff3dc3e7f286c1d40ee285d9" compoundref="_semaphore_8hpp" startline="41">handle</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The semaphore is Vulkan&apos;s device-exclusive synchronization primitive. </para>    </briefdescription>
    <detaileddescription>
<para>They are used to synchronize command submissions across different queues and queue families, and cannot have their state queried or modified by the device. Semaphores are automatically reset after being used in a batch of command submissions.</para><para>VkQueueSubmit() is the only command capable of modifying the internal state of a semaphore object. While usage of these objects is internally atomic for the API, external semaphore references (e.g, handles in the <computeroutput>pWaitSemaphores</computeroutput> and <computeroutput>pSignalSemaphores</computeroutput> array of VkSubmitInfo) must have their usage synchronized (in case one reference ends up in a signal for one submission, and a wait for another submission, but lack of synchronization submits the wait submission before the signal submission). </para>    </detaileddescription>
    <location file="sync/include/Semaphore.hpp" line="27" column="1" bodyfile="sync/include/Semaphore.hpp" bodystart="27" bodyend="42"/>
    <listofallmembers>
      <member refid="classvpr_1_1_semaphore_1aaa6537fc68271eb5f84db347505621de" prot="private" virt="non-virtual"><scope>vpr::Semaphore</scope><name>device</name></member>
      <member refid="classvpr_1_1_semaphore_1a613a6915ff3dc3e7f286c1d40ee285d9" prot="private" virt="non-virtual"><scope>vpr::Semaphore</scope><name>handle</name></member>
      <member refid="classvpr_1_1_semaphore_1ac01d23148aa4db1d000a305bd0725b29" prot="private" virt="non-virtual"><scope>vpr::Semaphore</scope><name>operator=</name></member>
      <member refid="classvpr_1_1_semaphore_1a91a695abe81f52dedb2f7105e476bdcc" prot="public" virt="non-virtual"><scope>vpr::Semaphore</scope><name>operator=</name></member>
      <member refid="classvpr_1_1_semaphore_1abafcf48c972601525447cd31a8ed965b" prot="private" virt="non-virtual"><scope>vpr::Semaphore</scope><name>Semaphore</name></member>
      <member refid="classvpr_1_1_semaphore_1a4a3be2d6f3cbc15538d57d8798e3397b" prot="public" virt="non-virtual"><scope>vpr::Semaphore</scope><name>Semaphore</name></member>
      <member refid="classvpr_1_1_semaphore_1afda52cb116726cb6d9dc35e27c026781" prot="public" virt="non-virtual"><scope>vpr::Semaphore</scope><name>Semaphore</name></member>
      <member refid="classvpr_1_1_semaphore_1a7bef04a6c02e7d2b03bc20cf10ade2cc" prot="public" virt="non-virtual"><scope>vpr::Semaphore</scope><name>vkHandle</name></member>
      <member refid="classvpr_1_1_semaphore_1a5d3e88cdff0fd3fe9d6ccfdddf39420e" prot="public" virt="non-virtual"><scope>vpr::Semaphore</scope><name>~Semaphore</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
